// /* ******* PREFIXES ******* */

.mx__appearance (@value: none){
    -webkit-appearance: @value;
       -moz-appearance: @value;
            appearance: @value;
}

.mx__opacity-ie (@opacity) {
    filter: ~"progid:DXImageTransform.Microsoft.Alpha(opacity=@{opacity})";
}

.mx__user-select (@value: none) {
    -webkit-user-select: @value;
       -moz-user-select: @value;
            user-select: @value;
}

.mx__position (@top: auto, @right: auto, @bottom: auto, @left: auto) {
    top: @top;
    right: @right;
    bottom: @bottom;
    left: @left;
}

.mx__transition(@properties, @duration: @CmUI-Transition-Duration, @function: ease-in-out) {
    .for(@properties); .-each(@property) {
        -webkit-transition+: @property @duration @function;
                transition+: @property @duration @function;
    }
}

.mx__linear-gradient (@params) {
    background-image: -webkit-linear-gradient(@params);
    background-image: linear-gradient(@params);
}

.mx__box-sizing (@value: border-box) {
    -moz-box-sizing: @value;
         box-sizing: @value;
}

.mx__background-clip (@value: border-box) {
    -webkit-background-clip: @value;
       -moz-background-clip: @value;
            background-clip: @value;
}

.mx__placeholder (@color) {
    &::-webkit-input-placeholder {
        opacity: 1;
        color: @color;
    }
    &:-moz-placeholder {
        opacity: 1;
        color: @color;
    }
    &::-moz-placeholder {
        opacity: 1;
        color: @color;
    }
    &:-ms-input-placeholder {
        opacity: 1;
        color: @color;
    }
}

.mx__flex (@value: auto) {
    -webkit-flex: @value;
        -ms-flex: @value;
            flex: @value;
}

.mx__flex-flow (@value: row nowrap) {
    -webkit-flex-flow: @value;
        -ms-flex-flow: @value;
            flex-flow: @value;
}

.mx__flex-direction (@value: row) {
    -webkit-flex-direction: @value;
        -ms-flex-direction: @value;
            flex-direction: @value;
}

.mx__flex-wrap (@value: wrap) {
    -webkit-flex-wrap: @value;
        -ms-flex-wrap: @value;
            flex-wrap: @value;
}

.mx__justify-content (@value: flex-start) {
    -webkit-justify-content: @value;
            justify-content: @value;
}

.mx__align-items (@value: stretch) {
    -webkit-align-items: @value;
            align-items: @value;
}

.mx__backface-visibility (@value: visible) {
    -webkit-backface-visibility: @value;
    backface-visibility: @value;
}

// /* ******* COMMON ******* */

.mx__only__color (@background, @colorDark, @colorLight) when (alpha(@background) = 1) and (lightness(@background) >= 60%) {
    color: @colorDark;
}
.mx__only__color (@background, @colorDark, @colorLight) when (alpha(@background) = 1) and (lightness(@background) < 60%) {
    color: @colorLight;
}
.mx__only__color (@background, @colorDark, @colorLight) when (alpha(@background) = 0) {
    color: @colorDark;
}
.mx__background__color (@background, @colorDark, @colorLight) {
    background-color: @background;
    .mx__only__color(@background, @colorDark, @colorLight);
}

.mx__align (@value) when (@value = left){
    margin: 0;
}
.mx__align (@value) when (@value = center){
    margin: 0 auto;
}
.mx__align (@value) when (@value = right){
    margin: 0 0 0 auto;
}

// /* ******* VENDORS ******* */

// /* *** FOREACH ***/
// /* https://github.com/seven-phases-max */

// ............................................................
// .for

.for(@i, @n) {.-each(@i)}
.for(@n)     when (isnumber(@n)) {.for(1, @n)}
.for(@i, @n) when not (@i = @n)  {
    .for((@i + (@n - @i) / abs(@n - @i)), @n);
}

// ............................................................
// .for-each

.for(@array)   when (default()) {.for-impl_(length(@array))}
.for-impl_(@i) when (@i > 1)    {.for-impl_((@i - 1))}
.for-impl_(@i) when (@i > 0)    {.-each(extract(@array, @i))}