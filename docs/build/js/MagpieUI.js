/*! ************ MagpieUI v3.94.0 (2025-03-08 03:47) ************ */
// This file is autogenerated.
// It's here at this path for backwards compatibility for links to it
// but the npm package now exports both CJS and ESM.
// See https://github.com/bgrins/TinyColor/ for instructions.
  (function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.tinycolor = factory());
})(this, (function () { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    }, _typeof(obj);
  }

  // https://github.com/bgrins/TinyColor
  // Brian Grinstead, MIT License

  var trimLeft = /^\s+/;
  var trimRight = /\s+$/;
  function tinycolor(color, opts) {
    color = color ? color : "";
    opts = opts || {};

    // If input is already a tinycolor, return itself
    if (color instanceof tinycolor) {
      return color;
    }
    // If we are called as a function, call using new instead
    if (!(this instanceof tinycolor)) {
      return new tinycolor(color, opts);
    }
    var rgb = inputToRGB(color);
    this._originalInput = color, this._r = rgb.r, this._g = rgb.g, this._b = rgb.b, this._a = rgb.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb.format;
    this._gradientType = opts.gradientType;

    // Don't let the range of [0,255] come back in [0,1].
    // Potentially lose a little bit of precision here, but will fix issues where
    // .5 gets interpreted as half of the total, instead of half of 1
    // If it was supposed to be 128, this was already taken care of by `inputToRgb`
    if (this._r < 1) this._r = Math.round(this._r);
    if (this._g < 1) this._g = Math.round(this._g);
    if (this._b < 1) this._b = Math.round(this._b);
    this._ok = rgb.ok;
  }
  tinycolor.prototype = {
    isDark: function isDark() {
      return this.getBrightness() < 128;
    },
    isLight: function isLight() {
      return !this.isDark();
    },
    isValid: function isValid() {
      return this._ok;
    },
    getOriginalInput: function getOriginalInput() {
      return this._originalInput;
    },
    getFormat: function getFormat() {
      return this._format;
    },
    getAlpha: function getAlpha() {
      return this._a;
    },
    getBrightness: function getBrightness() {
      //http://www.w3.org/TR/AERT#color-contrast
      var rgb = this.toRgb();
      return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
    },
    getLuminance: function getLuminance() {
      //http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
      var rgb = this.toRgb();
      var RsRGB, GsRGB, BsRGB, R, G, B;
      RsRGB = rgb.r / 255;
      GsRGB = rgb.g / 255;
      BsRGB = rgb.b / 255;
      if (RsRGB <= 0.03928) R = RsRGB / 12.92;else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
      if (GsRGB <= 0.03928) G = GsRGB / 12.92;else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
      if (BsRGB <= 0.03928) B = BsRGB / 12.92;else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
      return 0.2126 * R + 0.7152 * G + 0.0722 * B;
    },
    setAlpha: function setAlpha(value) {
      this._a = boundAlpha(value);
      this._roundA = Math.round(100 * this._a) / 100;
      return this;
    },
    toHsv: function toHsv() {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      return {
        h: hsv.h * 360,
        s: hsv.s,
        v: hsv.v,
        a: this._a
      };
    },
    toHsvString: function toHsvString() {
      var hsv = rgbToHsv(this._r, this._g, this._b);
      var h = Math.round(hsv.h * 360),
        s = Math.round(hsv.s * 100),
        v = Math.round(hsv.v * 100);
      return this._a == 1 ? "hsv(" + h + ", " + s + "%, " + v + "%)" : "hsva(" + h + ", " + s + "%, " + v + "%, " + this._roundA + ")";
    },
    toHsl: function toHsl() {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      return {
        h: hsl.h * 360,
        s: hsl.s,
        l: hsl.l,
        a: this._a
      };
    },
    toHslString: function toHslString() {
      var hsl = rgbToHsl(this._r, this._g, this._b);
      var h = Math.round(hsl.h * 360),
        s = Math.round(hsl.s * 100),
        l = Math.round(hsl.l * 100);
      return this._a == 1 ? "hsl(" + h + ", " + s + "%, " + l + "%)" : "hsla(" + h + ", " + s + "%, " + l + "%, " + this._roundA + ")";
    },
    toHex: function toHex(allow3Char) {
      return rgbToHex(this._r, this._g, this._b, allow3Char);
    },
    toHexString: function toHexString(allow3Char) {
      return "#" + this.toHex(allow3Char);
    },
    toHex8: function toHex8(allow4Char) {
      return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
    },
    toHex8String: function toHex8String(allow4Char) {
      return "#" + this.toHex8(allow4Char);
    },
    toRgb: function toRgb() {
      return {
        r: Math.round(this._r),
        g: Math.round(this._g),
        b: Math.round(this._b),
        a: this._a
      };
    },
    toRgbString: function toRgbString() {
      return this._a == 1 ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")";
    },
    toPercentageRgb: function toPercentageRgb() {
      return {
        r: Math.round(bound01(this._r, 255) * 100) + "%",
        g: Math.round(bound01(this._g, 255) * 100) + "%",
        b: Math.round(bound01(this._b, 255) * 100) + "%",
        a: this._a
      };
    },
    toPercentageRgbString: function toPercentageRgbString() {
      return this._a == 1 ? "rgb(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%)" : "rgba(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
    },
    toName: function toName() {
      if (this._a === 0) {
        return "transparent";
      }
      if (this._a < 1) {
        return false;
      }
      return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
    },
    toFilter: function toFilter(secondColor) {
      var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
      var secondHex8String = hex8String;
      var gradientType = this._gradientType ? "GradientType = 1, " : "";
      if (secondColor) {
        var s = tinycolor(secondColor);
        secondHex8String = "#" + rgbaToArgbHex(s._r, s._g, s._b, s._a);
      }
      return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
    },
    toString: function toString(format) {
      var formatSet = !!format;
      format = format || this._format;
      var formattedString = false;
      var hasAlpha = this._a < 1 && this._a >= 0;
      var needsAlphaFormat = !formatSet && hasAlpha && (format === "hex" || format === "hex6" || format === "hex3" || format === "hex4" || format === "hex8" || format === "name");
      if (needsAlphaFormat) {
        // Special case for "transparent", all other non-alpha formats
        // will return rgba when there is transparency.
        if (format === "name" && this._a === 0) {
          return this.toName();
        }
        return this.toRgbString();
      }
      if (format === "rgb") {
        formattedString = this.toRgbString();
      }
      if (format === "prgb") {
        formattedString = this.toPercentageRgbString();
      }
      if (format === "hex" || format === "hex6") {
        formattedString = this.toHexString();
      }
      if (format === "hex3") {
        formattedString = this.toHexString(true);
      }
      if (format === "hex4") {
        formattedString = this.toHex8String(true);
      }
      if (format === "hex8") {
        formattedString = this.toHex8String();
      }
      if (format === "name") {
        formattedString = this.toName();
      }
      if (format === "hsl") {
        formattedString = this.toHslString();
      }
      if (format === "hsv") {
        formattedString = this.toHsvString();
      }
      return formattedString || this.toHexString();
    },
    clone: function clone() {
      return tinycolor(this.toString());
    },
    _applyModification: function _applyModification(fn, args) {
      var color = fn.apply(null, [this].concat([].slice.call(args)));
      this._r = color._r;
      this._g = color._g;
      this._b = color._b;
      this.setAlpha(color._a);
      return this;
    },
    lighten: function lighten() {
      return this._applyModification(_lighten, arguments);
    },
    brighten: function brighten() {
      return this._applyModification(_brighten, arguments);
    },
    darken: function darken() {
      return this._applyModification(_darken, arguments);
    },
    desaturate: function desaturate() {
      return this._applyModification(_desaturate, arguments);
    },
    saturate: function saturate() {
      return this._applyModification(_saturate, arguments);
    },
    greyscale: function greyscale() {
      return this._applyModification(_greyscale, arguments);
    },
    spin: function spin() {
      return this._applyModification(_spin, arguments);
    },
    _applyCombination: function _applyCombination(fn, args) {
      return fn.apply(null, [this].concat([].slice.call(args)));
    },
    analogous: function analogous() {
      return this._applyCombination(_analogous, arguments);
    },
    complement: function complement() {
      return this._applyCombination(_complement, arguments);
    },
    monochromatic: function monochromatic() {
      return this._applyCombination(_monochromatic, arguments);
    },
    splitcomplement: function splitcomplement() {
      return this._applyCombination(_splitcomplement, arguments);
    },
    // Disabled until https://github.com/bgrins/TinyColor/issues/254
    // polyad: function (number) {
    //   return this._applyCombination(polyad, [number]);
    // },
    triad: function triad() {
      return this._applyCombination(polyad, [3]);
    },
    tetrad: function tetrad() {
      return this._applyCombination(polyad, [4]);
    }
  };

  // If input is an object, force 1 into "1.0" to handle ratios properly
  // String input requires "1.0" as input, so 1 will be treated as 1
  tinycolor.fromRatio = function (color, opts) {
    if (_typeof(color) == "object") {
      var newColor = {};
      for (var i in color) {
        if (color.hasOwnProperty(i)) {
          if (i === "a") {
            newColor[i] = color[i];
          } else {
            newColor[i] = convertToPercentage(color[i]);
          }
        }
      }
      color = newColor;
    }
    return tinycolor(color, opts);
  };

  // Given a string or object, convert that input to RGB
  // Possible string inputs:
  //
  //     "red"
  //     "#f00" or "f00"
  //     "#ff0000" or "ff0000"
  //     "#ff000000" or "ff000000"
  //     "rgb 255 0 0" or "rgb (255, 0, 0)"
  //     "rgb 1.0 0 0" or "rgb (1, 0, 0)"
  //     "rgba (255, 0, 0, 1)" or "rgba 255, 0, 0, 1"
  //     "rgba (1.0, 0, 0, 1)" or "rgba 1.0, 0, 0, 1"
  //     "hsl(0, 100%, 50%)" or "hsl 0 100% 50%"
  //     "hsla(0, 100%, 50%, 1)" or "hsla 0 100% 50%, 1"
  //     "hsv(0, 100%, 100%)" or "hsv 0 100% 100%"
  //
  function inputToRGB(color) {
    var rgb = {
      r: 0,
      g: 0,
      b: 0
    };
    var a = 1;
    var s = null;
    var v = null;
    var l = null;
    var ok = false;
    var format = false;
    if (typeof color == "string") {
      color = stringInputToObject(color);
    }
    if (_typeof(color) == "object") {
      if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {
        rgb = rgbToRgb(color.r, color.g, color.b);
        ok = true;
        format = String(color.r).substr(-1) === "%" ? "prgb" : "rgb";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {
        s = convertToPercentage(color.s);
        v = convertToPercentage(color.v);
        rgb = hsvToRgb(color.h, s, v);
        ok = true;
        format = "hsv";
      } else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {
        s = convertToPercentage(color.s);
        l = convertToPercentage(color.l);
        rgb = hslToRgb(color.h, s, l);
        ok = true;
        format = "hsl";
      }
      if (color.hasOwnProperty("a")) {
        a = color.a;
      }
    }
    a = boundAlpha(a);
    return {
      ok: ok,
      format: color.format || format,
      r: Math.min(255, Math.max(rgb.r, 0)),
      g: Math.min(255, Math.max(rgb.g, 0)),
      b: Math.min(255, Math.max(rgb.b, 0)),
      a: a
    };
  }

  // Conversion Functions
  // --------------------

  // `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:
  // <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>

  // `rgbToRgb`
  // Handle bounds / percentage checking to conform to CSS color spec
  // <http://www.w3.org/TR/css3-color/>
  // *Assumes:* r, g, b in [0, 255] or [0, 1]
  // *Returns:* { r, g, b } in [0, 255]
  function rgbToRgb(r, g, b) {
    return {
      r: bound01(r, 255) * 255,
      g: bound01(g, 255) * 255,
      b: bound01(b, 255) * 255
    };
  }

  // `rgbToHsl`
  // Converts an RGB color value to HSL.
  // *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]
  // *Returns:* { h, s, l } in [0,1]
  function rgbToHsl(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = Math.max(r, g, b),
      min = Math.min(r, g, b);
    var h,
      s,
      l = (max + min) / 2;
    if (max == min) {
      h = s = 0; // achromatic
    } else {
      var d = max - min;
      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h: h,
      s: s,
      l: l
    };
  }

  // `hslToRgb`
  // Converts an HSL color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]
  function hslToRgb(h, s, l) {
    var r, g, b;
    h = bound01(h, 360);
    s = bound01(s, 100);
    l = bound01(l, 100);
    function hue2rgb(p, q, t) {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    }
    if (s === 0) {
      r = g = b = l; // achromatic
    } else {
      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      var p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }
    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  }

  // `rgbToHsv`
  // Converts an RGB color value to HSV
  // *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]
  // *Returns:* { h, s, v } in [0,1]
  function rgbToHsv(r, g, b) {
    r = bound01(r, 255);
    g = bound01(g, 255);
    b = bound01(b, 255);
    var max = Math.max(r, g, b),
      min = Math.min(r, g, b);
    var h,
      s,
      v = max;
    var d = max - min;
    s = max === 0 ? 0 : d / max;
    if (max == min) {
      h = 0; // achromatic
    } else {
      switch (max) {
        case r:
          h = (g - b) / d + (g < b ? 6 : 0);
          break;
        case g:
          h = (b - r) / d + 2;
          break;
        case b:
          h = (r - g) / d + 4;
          break;
      }
      h /= 6;
    }
    return {
      h: h,
      s: s,
      v: v
    };
  }

  // `hsvToRgb`
  // Converts an HSV color value to RGB.
  // *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]
  // *Returns:* { r, g, b } in the set [0, 255]
  function hsvToRgb(h, s, v) {
    h = bound01(h, 360) * 6;
    s = bound01(s, 100);
    v = bound01(v, 100);
    var i = Math.floor(h),
      f = h - i,
      p = v * (1 - s),
      q = v * (1 - f * s),
      t = v * (1 - (1 - f) * s),
      mod = i % 6,
      r = [v, q, p, p, t, v][mod],
      g = [t, v, v, q, p, p][mod],
      b = [p, p, t, v, v, q][mod];
    return {
      r: r * 255,
      g: g * 255,
      b: b * 255
    };
  }

  // `rgbToHex`
  // Converts an RGB color to hex
  // Assumes r, g, and b are contained in the set [0, 255]
  // Returns a 3 or 6 character hex
  function rgbToHex(r, g, b, allow3Char) {
    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];

    // Return a 3 character hex if possible
    if (allow3Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
    }
    return hex.join("");
  }

  // `rgbaToHex`
  // Converts an RGBA color plus alpha transparency to hex
  // Assumes r, g, b are contained in the set [0, 255] and
  // a in [0, 1]. Returns a 4 or 8 character rgba hex
  function rgbaToHex(r, g, b, a, allow4Char) {
    var hex = [pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a))];

    // Return a 4 character hex if possible
    if (allow4Char && hex[0].charAt(0) == hex[0].charAt(1) && hex[1].charAt(0) == hex[1].charAt(1) && hex[2].charAt(0) == hex[2].charAt(1) && hex[3].charAt(0) == hex[3].charAt(1)) {
      return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);
    }
    return hex.join("");
  }

  // `rgbaToArgbHex`
  // Converts an RGBA color to an ARGB Hex8 string
  // Rarely used, but required for "toFilter()"
  function rgbaToArgbHex(r, g, b, a) {
    var hex = [pad2(convertDecimalToHex(a)), pad2(Math.round(r).toString(16)), pad2(Math.round(g).toString(16)), pad2(Math.round(b).toString(16))];
    return hex.join("");
  }

  // `equals`
  // Can be called with any tinycolor input
  tinycolor.equals = function (color1, color2) {
    if (!color1 || !color2) return false;
    return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
  };
  tinycolor.random = function () {
    return tinycolor.fromRatio({
      r: Math.random(),
      g: Math.random(),
      b: Math.random()
    });
  };

  // Modification Functions
  // ----------------------
  // Thanks to less.js for some of the basics here
  // <https://github.com/cloudhead/less.js/blob/master/lib/less/functions.js>

  function _desaturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s -= amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }
  function _saturate(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.s += amount / 100;
    hsl.s = clamp01(hsl.s);
    return tinycolor(hsl);
  }
  function _greyscale(color) {
    return tinycolor(color).desaturate(100);
  }
  function _lighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l += amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }
  function _brighten(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var rgb = tinycolor(color).toRgb();
    rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
    rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
    rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
    return tinycolor(rgb);
  }
  function _darken(color, amount) {
    amount = amount === 0 ? 0 : amount || 10;
    var hsl = tinycolor(color).toHsl();
    hsl.l -= amount / 100;
    hsl.l = clamp01(hsl.l);
    return tinycolor(hsl);
  }

  // Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.
  // Values outside of this range will be wrapped into this range.
  function _spin(color, amount) {
    var hsl = tinycolor(color).toHsl();
    var hue = (hsl.h + amount) % 360;
    hsl.h = hue < 0 ? 360 + hue : hue;
    return tinycolor(hsl);
  }

  // Combination Functions
  // ---------------------
  // Thanks to jQuery xColor for some of the ideas behind these
  // <https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js>

  function _complement(color) {
    var hsl = tinycolor(color).toHsl();
    hsl.h = (hsl.h + 180) % 360;
    return tinycolor(hsl);
  }
  function polyad(color, number) {
    if (isNaN(number) || number <= 0) {
      throw new Error("Argument to polyad must be a positive number");
    }
    var hsl = tinycolor(color).toHsl();
    var result = [tinycolor(color)];
    var step = 360 / number;
    for (var i = 1; i < number; i++) {
      result.push(tinycolor({
        h: (hsl.h + i * step) % 360,
        s: hsl.s,
        l: hsl.l
      }));
    }
    return result;
  }
  function _splitcomplement(color) {
    var hsl = tinycolor(color).toHsl();
    var h = hsl.h;
    return [tinycolor(color), tinycolor({
      h: (h + 72) % 360,
      s: hsl.s,
      l: hsl.l
    }), tinycolor({
      h: (h + 216) % 360,
      s: hsl.s,
      l: hsl.l
    })];
  }
  function _analogous(color, results, slices) {
    results = results || 6;
    slices = slices || 30;
    var hsl = tinycolor(color).toHsl();
    var part = 360 / slices;
    var ret = [tinycolor(color)];
    for (hsl.h = (hsl.h - (part * results >> 1) + 720) % 360; --results;) {
      hsl.h = (hsl.h + part) % 360;
      ret.push(tinycolor(hsl));
    }
    return ret;
  }
  function _monochromatic(color, results) {
    results = results || 6;
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h,
      s = hsv.s,
      v = hsv.v;
    var ret = [];
    var modification = 1 / results;
    while (results--) {
      ret.push(tinycolor({
        h: h,
        s: s,
        v: v
      }));
      v = (v + modification) % 1;
    }
    return ret;
  }

  // Utility Functions
  // ---------------------

  tinycolor.mix = function (color1, color2, amount) {
    amount = amount === 0 ? 0 : amount || 50;
    var rgb1 = tinycolor(color1).toRgb();
    var rgb2 = tinycolor(color2).toRgb();
    var p = amount / 100;
    var rgba = {
      r: (rgb2.r - rgb1.r) * p + rgb1.r,
      g: (rgb2.g - rgb1.g) * p + rgb1.g,
      b: (rgb2.b - rgb1.b) * p + rgb1.b,
      a: (rgb2.a - rgb1.a) * p + rgb1.a
    };
    return tinycolor(rgba);
  };

  // Readability Functions
  // ---------------------
  // <http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef (WCAG Version 2)

  // `contrast`
  // Analyze the 2 colors and returns the color contrast defined by (WCAG Version 2)
  tinycolor.readability = function (color1, color2) {
    var c1 = tinycolor(color1);
    var c2 = tinycolor(color2);
    return (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05);
  };

  // `isReadable`
  // Ensure that foreground and background color combinations meet WCAG2 guidelines.
  // The third argument is an optional Object.
  //      the 'level' property states 'AA' or 'AAA' - if missing or invalid, it defaults to 'AA';
  //      the 'size' property states 'large' or 'small' - if missing or invalid, it defaults to 'small'.
  // If the entire object is absent, isReadable defaults to {level:"AA",size:"small"}.

  // *Example*
  //    tinycolor.isReadable("#000", "#111") => false
  //    tinycolor.isReadable("#000", "#111",{level:"AA",size:"large"}) => false
  tinycolor.isReadable = function (color1, color2, wcag2) {
    var readability = tinycolor.readability(color1, color2);
    var wcag2Parms, out;
    out = false;
    wcag2Parms = validateWCAG2Parms(wcag2);
    switch (wcag2Parms.level + wcag2Parms.size) {
      case "AAsmall":
      case "AAAlarge":
        out = readability >= 4.5;
        break;
      case "AAlarge":
        out = readability >= 3;
        break;
      case "AAAsmall":
        out = readability >= 7;
        break;
    }
    return out;
  };

  // `mostReadable`
  // Given a base color and a list of possible foreground or background
  // colors for that base, returns the most readable color.
  // Optionally returns Black or White if the most readable color is unreadable.
  // *Example*
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:false}).toHexString(); // "#112255"
  //    tinycolor.mostReadable(tinycolor.mostReadable("#123", ["#124", "#125"],{includeFallbackColors:true}).toHexString();  // "#ffffff"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"large"}).toHexString(); // "#faf3f3"
  //    tinycolor.mostReadable("#a8015a", ["#faf3f3"],{includeFallbackColors:true,level:"AAA",size:"small"}).toHexString(); // "#ffffff"
  tinycolor.mostReadable = function (baseColor, colorList, args) {
    var bestColor = null;
    var bestScore = 0;
    var readability;
    var includeFallbackColors, level, size;
    args = args || {};
    includeFallbackColors = args.includeFallbackColors;
    level = args.level;
    size = args.size;
    for (var i = 0; i < colorList.length; i++) {
      readability = tinycolor.readability(baseColor, colorList[i]);
      if (readability > bestScore) {
        bestScore = readability;
        bestColor = tinycolor(colorList[i]);
      }
    }
    if (tinycolor.isReadable(baseColor, bestColor, {
      level: level,
      size: size
    }) || !includeFallbackColors) {
      return bestColor;
    } else {
      args.includeFallbackColors = false;
      return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
    }
  };

  // Big List of Colors
  // ------------------
  // <https://www.w3.org/TR/css-color-4/#named-colors>
  var names = tinycolor.names = {
    aliceblue: "f0f8ff",
    antiquewhite: "faebd7",
    aqua: "0ff",
    aquamarine: "7fffd4",
    azure: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "000",
    blanchedalmond: "ffebcd",
    blue: "00f",
    blueviolet: "8a2be2",
    brown: "a52a2a",
    burlywood: "deb887",
    burntsienna: "ea7e5d",
    cadetblue: "5f9ea0",
    chartreuse: "7fff00",
    chocolate: "d2691e",
    coral: "ff7f50",
    cornflowerblue: "6495ed",
    cornsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "0ff",
    darkblue: "00008b",
    darkcyan: "008b8b",
    darkgoldenrod: "b8860b",
    darkgray: "a9a9a9",
    darkgreen: "006400",
    darkgrey: "a9a9a9",
    darkkhaki: "bdb76b",
    darkmagenta: "8b008b",
    darkolivegreen: "556b2f",
    darkorange: "ff8c00",
    darkorchid: "9932cc",
    darkred: "8b0000",
    darksalmon: "e9967a",
    darkseagreen: "8fbc8f",
    darkslateblue: "483d8b",
    darkslategray: "2f4f4f",
    darkslategrey: "2f4f4f",
    darkturquoise: "00ced1",
    darkviolet: "9400d3",
    deeppink: "ff1493",
    deepskyblue: "00bfff",
    dimgray: "696969",
    dimgrey: "696969",
    dodgerblue: "1e90ff",
    firebrick: "b22222",
    floralwhite: "fffaf0",
    forestgreen: "228b22",
    fuchsia: "f0f",
    gainsboro: "dcdcdc",
    ghostwhite: "f8f8ff",
    gold: "ffd700",
    goldenrod: "daa520",
    gray: "808080",
    green: "008000",
    greenyellow: "adff2f",
    grey: "808080",
    honeydew: "f0fff0",
    hotpink: "ff69b4",
    indianred: "cd5c5c",
    indigo: "4b0082",
    ivory: "fffff0",
    khaki: "f0e68c",
    lavender: "e6e6fa",
    lavenderblush: "fff0f5",
    lawngreen: "7cfc00",
    lemonchiffon: "fffacd",
    lightblue: "add8e6",
    lightcoral: "f08080",
    lightcyan: "e0ffff",
    lightgoldenrodyellow: "fafad2",
    lightgray: "d3d3d3",
    lightgreen: "90ee90",
    lightgrey: "d3d3d3",
    lightpink: "ffb6c1",
    lightsalmon: "ffa07a",
    lightseagreen: "20b2aa",
    lightskyblue: "87cefa",
    lightslategray: "789",
    lightslategrey: "789",
    lightsteelblue: "b0c4de",
    lightyellow: "ffffe0",
    lime: "0f0",
    limegreen: "32cd32",
    linen: "faf0e6",
    magenta: "f0f",
    maroon: "800000",
    mediumaquamarine: "66cdaa",
    mediumblue: "0000cd",
    mediumorchid: "ba55d3",
    mediumpurple: "9370db",
    mediumseagreen: "3cb371",
    mediumslateblue: "7b68ee",
    mediumspringgreen: "00fa9a",
    mediumturquoise: "48d1cc",
    mediumvioletred: "c71585",
    midnightblue: "191970",
    mintcream: "f5fffa",
    mistyrose: "ffe4e1",
    moccasin: "ffe4b5",
    navajowhite: "ffdead",
    navy: "000080",
    oldlace: "fdf5e6",
    olive: "808000",
    olivedrab: "6b8e23",
    orange: "ffa500",
    orangered: "ff4500",
    orchid: "da70d6",
    palegoldenrod: "eee8aa",
    palegreen: "98fb98",
    paleturquoise: "afeeee",
    palevioletred: "db7093",
    papayawhip: "ffefd5",
    peachpuff: "ffdab9",
    peru: "cd853f",
    pink: "ffc0cb",
    plum: "dda0dd",
    powderblue: "b0e0e6",
    purple: "800080",
    rebeccapurple: "663399",
    red: "f00",
    rosybrown: "bc8f8f",
    royalblue: "4169e1",
    saddlebrown: "8b4513",
    salmon: "fa8072",
    sandybrown: "f4a460",
    seagreen: "2e8b57",
    seashell: "fff5ee",
    sienna: "a0522d",
    silver: "c0c0c0",
    skyblue: "87ceeb",
    slateblue: "6a5acd",
    slategray: "708090",
    slategrey: "708090",
    snow: "fffafa",
    springgreen: "00ff7f",
    steelblue: "4682b4",
    tan: "d2b48c",
    teal: "008080",
    thistle: "d8bfd8",
    tomato: "ff6347",
    turquoise: "40e0d0",
    violet: "ee82ee",
    wheat: "f5deb3",
    white: "fff",
    whitesmoke: "f5f5f5",
    yellow: "ff0",
    yellowgreen: "9acd32"
  };

  // Make it easy to access colors via `hexNames[hex]`
  var hexNames = tinycolor.hexNames = flip(names);

  // Utilities
  // ---------

  // `{ 'name1': 'val1' }` becomes `{ 'val1': 'name1' }`
  function flip(o) {
    var flipped = {};
    for (var i in o) {
      if (o.hasOwnProperty(i)) {
        flipped[o[i]] = i;
      }
    }
    return flipped;
  }

  // Return a valid alpha value [0,1] with all invalid values being set to 1
  function boundAlpha(a) {
    a = parseFloat(a);
    if (isNaN(a) || a < 0 || a > 1) {
      a = 1;
    }
    return a;
  }

  // Take input from [0, n] and return it as [0, 1]
  function bound01(n, max) {
    if (isOnePointZero(n)) n = "100%";
    var processPercent = isPercentage(n);
    n = Math.min(max, Math.max(0, parseFloat(n)));

    // Automatically convert percentage into number
    if (processPercent) {
      n = parseInt(n * max, 10) / 100;
    }

    // Handle floating point rounding errors
    if (Math.abs(n - max) < 0.000001) {
      return 1;
    }

    // Convert into [0, 1] range if it isn't already
    return n % max / parseFloat(max);
  }

  // Force a number between 0 and 1
  function clamp01(val) {
    return Math.min(1, Math.max(0, val));
  }

  // Parse a base-16 hex value into a base-10 integer
  function parseIntFromHex(val) {
    return parseInt(val, 16);
  }

  // Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1
  // <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>
  function isOnePointZero(n) {
    return typeof n == "string" && n.indexOf(".") != -1 && parseFloat(n) === 1;
  }

  // Check to see if string passed in is a percentage
  function isPercentage(n) {
    return typeof n === "string" && n.indexOf("%") != -1;
  }

  // Force a hex value to have 2 characters
  function pad2(c) {
    return c.length == 1 ? "0" + c : "" + c;
  }

  // Replace a decimal with it's percentage value
  function convertToPercentage(n) {
    if (n <= 1) {
      n = n * 100 + "%";
    }
    return n;
  }

  // Converts a decimal to a hex value
  function convertDecimalToHex(d) {
    return Math.round(parseFloat(d) * 255).toString(16);
  }
  // Converts a hex value to a decimal
  function convertHexToDecimal(h) {
    return parseIntFromHex(h) / 255;
  }
  var matchers = function () {
    // <http://www.w3.org/TR/css3-values/#integers>
    var CSS_INTEGER = "[-\\+]?\\d+%?";

    // <http://www.w3.org/TR/css3-values/#number-value>
    var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";

    // Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.
    var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";

    // Actual matching.
    // Parentheses and commas are optional, but not required.
    // Whitespace can take the place of commas or opening paren
    var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
    return {
      CSS_UNIT: new RegExp(CSS_UNIT),
      rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
      rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
      hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
      hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
      hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
      hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
      hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
      hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
      hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
    };
  }();

  // `isValidCSSUnit`
  // Take in a single string / number and check to see if it looks like a CSS unit
  // (see `matchers` above for definition).
  function isValidCSSUnit(color) {
    return !!matchers.CSS_UNIT.exec(color);
  }

  // `stringInputToObject`
  // Permissive string parsing.  Take in a number of formats, and output an object
  // based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`
  function stringInputToObject(color) {
    color = color.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
    var named = false;
    if (names[color]) {
      color = names[color];
      named = true;
    } else if (color == "transparent") {
      return {
        r: 0,
        g: 0,
        b: 0,
        a: 0,
        format: "name"
      };
    }

    // Try to match string input using regular expressions.
    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]
    // Just return an object and let the conversion functions handle that.
    // This way the result will be the same whether the tinycolor is initialized with string or object.
    var match;
    if (match = matchers.rgb.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3]
      };
    }
    if (match = matchers.rgba.exec(color)) {
      return {
        r: match[1],
        g: match[2],
        b: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hsl.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3]
      };
    }
    if (match = matchers.hsla.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        l: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hsv.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3]
      };
    }
    if (match = matchers.hsva.exec(color)) {
      return {
        h: match[1],
        s: match[2],
        v: match[3],
        a: match[4]
      };
    }
    if (match = matchers.hex8.exec(color)) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        a: convertHexToDecimal(match[4]),
        format: named ? "name" : "hex8"
      };
    }
    if (match = matchers.hex6.exec(color)) {
      return {
        r: parseIntFromHex(match[1]),
        g: parseIntFromHex(match[2]),
        b: parseIntFromHex(match[3]),
        format: named ? "name" : "hex"
      };
    }
    if (match = matchers.hex4.exec(color)) {
      return {
        r: parseIntFromHex(match[1] + "" + match[1]),
        g: parseIntFromHex(match[2] + "" + match[2]),
        b: parseIntFromHex(match[3] + "" + match[3]),
        a: convertHexToDecimal(match[4] + "" + match[4]),
        format: named ? "name" : "hex8"
      };
    }
    if (match = matchers.hex3.exec(color)) {
      return {
        r: parseIntFromHex(match[1] + "" + match[1]),
        g: parseIntFromHex(match[2] + "" + match[2]),
        b: parseIntFromHex(match[3] + "" + match[3]),
        format: named ? "name" : "hex"
      };
    }
    return false;
  }
  function validateWCAG2Parms(parms) {
    // return valid WCAG2 parms for isReadable.
    // If input parms are invalid, return {"level":"AA", "size":"small"}
    var level, size;
    parms = parms || {
      level: "AA",
      size: "small"
    };
    level = (parms.level || "AA").toUpperCase();
    size = (parms.size || "small").toLowerCase();
    if (level !== "AA" && level !== "AAA") {
      level = "AA";
    }
    if (size !== "small" && size !== "large") {
      size = "small";
    }
    return {
      level: level,
      size: size
    };
  }

  return tinycolor;

}));

/*

 Running the following code before any other code will create if it's not natively available.
 https://developer.mozilla.org/

*/

window.URL = window.URL || window.webkitURL;

// /* ************************************************ */
// /* ******* MAGPIE UI: COMMON ******* */
// /* ************************************************ */

/* ******* INFO ******* */

/* *******

    Objects and Arrays:             56
    Events:                         339
    Nodes:                          703
    Forms:                          1006
    Strings:                        1282
    Date and Time:                  1379
    Styles:                         1506
    Animation:                      2168
    Cookie and Local Storage:       2372
    Ajax:                           2439
    Hash (?):                       2717
    Graphics:                       2737
    Class Fabric                    2747

    -------

    Custom Events / Hooks:
        ajax.beforePrepare
        ajax.afterPrepare
        scrollSizeChange
        pageSizeChange

 ******* */

var cm = {
        '_version' : '3.94.0',
        '_lang': 'en',
        '_locale' : 'en-IN',
        '_loadTime' : Date.now(),
        '_isDocumentReady' : false,
        '_isDocumentLoad' : false,
        '_debug' : true,
        '_debugAlert' : false,
        '_deviceType' : 'desktop',
        '_deviceOrientation' : 'landscape',
        '_adaptive' : false,
        '_baseUrl': [window.location.protocol, window.location.hostname].join('//'),
        '_pathUrl' : '',
        '_assetsUrl' : [window.location.protocol, window.location.hostname].join('//'),
        '_scrollSize' : 0,
        '_pageSize' : {},
        '_clientPosition' : {'left' : 0, 'top' : 0},
        '_config' : {
            'redrawOnLoad' : true,
            'motionAsymmetric' : 'cubic-bezier(.5,0,.15,1)',
            'motionSmooth' : 'ease-in-out',
            'animDuration' : 250,
            'animDurationShort' : 150,
            'animDurationLong' : 500,
            'loadDelay' : 500,
            'lazyDelay' : 1000,
            'hideDelay' : 250,
            'hideDelayShort' : 150,
            'hideDelayLong' : 500,
            'autoHideDelay' : 2000,
            'requestDelay' : 300,
            'adaptiveFrom' : 768,
            'screenTablet' : 1024,
            'screenTabletPortrait' : 768,
            'screenMobile' : 640,
            'screenMobilePortrait' : 480,
            'screenXSmall' : 375,
            'dateFormat' : '%Y-%m-%d',
            'dateTimeFormat' : '%Y-%m-%d %H:%i:%s',
            'dateFormatCase' : 'nominative',
            'timeFormat' : '%H:%i:%s',
            'displayDateFormat' : '%F %j, %Y',
            'displayDateTimeFormat' : '%F %j, %Y, %H:%i',
            'displayDateFormatCase' : 'nominative',
            'tooltipIndent' : 4,
            'tooltipTop' : 'targetHeight + 4',
            'tooltipDown' : 'targetHeight + 4',
            'tooltipUp' : '- (selfHeight + 4)',
            'fileExtensions' : {
                'image' : 'jpg|jpeg|png|gif|bmp|tga|svg|tiff|webp',
                'video' : 'avi|ogg|mpeg|mp4|m4a|m4b|mov|wmv|webm',
            },
            'fileTypes' : {
                'image' : /image\/.*/,
                'video' : /video\/(mp4|webm|ogg|avi|mp4|mov|mpg|x-ms-wmv|quicktime)/,
                'embed' : /application\/pdf/,
            }
        },
        '_variables' : {
            '%baseUrl%' : 'cm._baseUrl',
            '%assetsUrl%' : 'cm._assetsUrl',
            '%pathUrl%' : 'cm._pathUrl',
            '%version%' : 'cm._version'
        },
        '_strings' : {
            'common' : {
                'server_error' : 'An unexpected error has occurred. Please try again later.'
            },
            'months' : ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
            'days' : ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
            'daysShort' : ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
            'daysAbbr' : ['S', 'M', 'T', 'W', 'T', 'F', 'S']
        }
    },
    Mod = {},
    Part = {},
    Com = {
        'Elements' : {}
    };

/* ******* BREAKPOINTS ******* */

cm.getBreakpoints = function() {
    return {
        desktop: cm._config.screenTablet,
        desktopUp: cm._config.screenTablet,
        desktopDown: (cm._config.screenTablet - 1),
        tablet: cm._config.screenTabletPortrait,
        tabletUp: (cm._config.screenTabletPortrait + 1),
        tabletDown: cm._config.screenTabletPortrait,
        mobile: cm._config.screenMobile,
        mobileUp: (cm._config.screenMobile + 1),
        mobileDown: cm._config.screenMobile,
        small: cm._config.screenMobilePortrait,
        smallUp: (cm._config.screenMobilePortrait + 1),
        smallDown: cm._config.screenMobilePortrait,
        xSmall: cm._config.screenXSmall,
        xSmallUp: (cm._config.screenXSmall + 1),
        xSmallDown: cm._config.screenXSmall,
    };
};

cm.getBreakpoint = function() {
    var pageSize = cm._pageSize || cm.getPageSize();
    var breakpoints = [];
    cm.forEach(cm._breakpoints, function(breakpoint, name) {
        if (name.indexOf('Up') > -1 && pageSize.winWidth >= breakpoint) {
            breakpoints.push(name);
        }
        if (name.indexOf('Down') > -1 && pageSize.winWidth <= breakpoint) {
            breakpoints.push(name);
        }
    });
    return breakpoints;
};

cm.isBreakpoint = function(name) {
    return cm.inArray(cm._breakpoint, name);
};

/* ******* CHECK SUPPORT ******* */

cm.isFileReader = (function(){return 'FileReader' in window;})();
cm.isHistoryAPI = !!(window.history && history.pushState);
cm.isLocalStorage = (function(){try{return 'localStorage' in window && window.localStorage !== null;}catch(e){return false;}})();
cm.isSessionStorage = (function(){try{return 'sessionStorage' in window && window.sessionStorage !== null;}catch(e){return false;}})();
cm.isCanvas = !!document.createElement("canvas").getContext;
cm.isMotionReduced = window.matchMedia('(prefers-reduced-motion: reduce)') === true || window.matchMedia('(prefers-reduced-motion: reduce)').matches === true;
cm.hasBeacon = !!(navigator.sendBeacon);
cm.hasPointerEvent = !!(window.PointerEvent);

/* ******* COMMON ******* */

cm._getVariables = function(){
    var data = {};
    cm.forEach(cm._variables, function(value, name){
        data[name] = cm.reducePath(value, window);
    });
    return data;
};

/* ******* OBJECTS AND ARRAYS ******* */

cm.top = (function(){
    try {
        return window.top.cm;
    }catch(e){
        return window.cm;
    }
})();

cm.isType = function(o, types){
    if(cm.isString(types)){
        return Object.prototype.toString.call(o) === '[object ' + types +']';
    }
    if(cm.isRegExp(types)){
        return types.test(Object.prototype.toString.call(o));
    }
    if(cm.isObject(types)){
        var match = false;
        cm.forEach(types, function(type){
            if(!match){
                match = Object.prototype.toString.call(o) === '[object ' + type +']';
            }
        });
        return match;
    }
    return false;
};

cm.isBoolean = function(o){
    return Object.prototype.toString.call(o) === '[object Boolean]';
};

cm.isString = function(o){
    return Object.prototype.toString.call(o) === '[object String]';
};

cm.isNumber = function(o){
    return Object.prototype.toString.call(o) === '[object Number]' && !isNaN(o);
};

cm.isArray = Array.isArray || function(o){
    return Object.prototype.toString.call(o) === '[object Array]';
};

cm.isObject = function(o){
    return Object.prototype.toString.call(o) === '[object Object]';
};

cm.isArguments = function(o){
    return Object.prototype.toString.call(o) === '[object Arguments]';
};

cm.isFunction = function(o){
    return Object.prototype.toString.call(o) === '[object Function]' || Object.prototype.toString.call(o) === '[object AsyncFunction]';
};

cm.isRegExp = function(o){
    return Object.prototype.toString.call(o) === '[object RegExp]';
};

cm.isDate = function(o){
    return Object.prototype.toString.call(o) === '[object Date]';
};

cm.isFile = function(o){
    return Object.prototype.toString.call(o) === '[object File]';
};

cm.isWindow = function(o){
    return Object.prototype.toString.call(o) === '[object Window]' || Object.prototype.toString.call(o) === '[object global]';
};

cm.isNode = function(node){
    try{
        return !!(node && node.nodeType && node.nodeType !== 9);
    }catch(e){}
    return false;
};

cm.isTextNode = function(node){
    try{
        return !!(node && node.nodeType && node.nodeType === 3);
    }catch(e){}
    return false;
};

cm.isElementNode = function(node){
    try{
        return !!(node && node.nodeType && node.nodeType === 1);
    }catch(e){}
    return false;
};

cm.isTagName = function(node, tag){
    return cm.isElementNode(node) && node.tagName.toLowerCase() === tag.toLowerCase();
};

cm.isPlainObject = function(obj) {
    if (typeof obj === 'object' && obj !== null) {
        if (typeof Object.getPrototypeOf === 'function') {
            var proto = Object.getPrototypeOf(obj);
            return proto === Object.prototype || proto === null;
        }
        return Object.prototype.toString.call(obj) === '[object Object]';
    }
    return false;
};

cm.forEach = function(o, callback){
    if(!o || !(callback && typeof callback === 'function')){
        return o;
    }
    var i, l;
    // Objects
    if(cm.isObject(o)){
        for(var key in o){
            if(o.hasOwnProperty(key)){
                callback(o[key], key, o);
            }
        }
        return o;
    }
    // Arrays
    if(cm.isArray(o)){
        o.forEach(callback);
        return o;
    }
    // Numbers
    if(cm.isNumber(o)){
        for(i = 0; i < o; i++){
            callback(i);
        }
        return o;
    }
    // Default
    try{
        Array.prototype.forEach.call(o, callback);
    }catch(e){
        try{
            for(i = 0, l = o.length; i < l; i++){
                callback(o[i], i, o);
            }
        }catch(e){}
    }
    return o;
};

cm.forEachReverse = function(o, callback){
    if(!o){
        return null;
    }
    if(!callback){
        return o;
    }
    o.reverse();
    cm.forEach(o, callback);
    o.reverse();
    return o;
};

cm.merge = function(o1, o2){
    var o;
    if(!o2){
        if(cm.isArray(o1)){
            o2 = [];
        }else{
            o2 = {};
        }
    }
    if(!o1){
        if(cm.isArray(o2)){
            o1 = [];
        }else{
            o1 = {};
        }
    }
    if(cm.isObject(o1)){
        o = cm.clone(o1);
        cm.forEach(o2, function(item, key){
            try{
                if(item === undefined){
                    o[key] = item;
                }else if(item._isComponent){
                    o[key] = item;
                }else if(cm.isObject(item)){
                    if(cm.isObject(o[key])){
                        o[key] = cm.merge(o[key], item);
                    }else{
                        o[key] = cm.clone(item);
                    }
                }else if(cm.isArray(item)){
                    o[key] = cm.clone(item);
                }else{
                    o[key] = item;
                }
            }catch(e){
                o[key] = item;
            }
        });
    }else if(cm.isArray(o1)){
        o = cm.clone(o1);
        cm.forEach(o2, function(item){
            if(!cm.inArray(o, item)){
                o.push(item);
            }
        });
    }
    return o;
};

cm.extend = function(o1, o2, deep, clone){
    if(!o1){
        return o2;
    }
    if(!o2){
        return o1;
    }
    deep = cm.isUndefined(deep) ? false : deep;
    clone = cm.isUndefined(clone) ? true : clone;
    if(cm.isArray(o1)){
        return o1.concat(o2);
    }
    if(cm.isObject(o1)){
        var o = clone ? cm.clone(o1) : o1;
        cm.forEach(o2, function(item, key){
            if(deep){
                o[key] = cm.extend(o[key], item, deep, clone);
            }else{
                o[key] = item;
            }
        });
        return o;
    }
    return o2;
};

cm.join = function(arr, separator) {
    return arr
        .filter(function(item) {
            return !cm.isEmpty(item);
        })
        .join(separator);
};

cm.extract = function(o1, o2){
    if(!o1){
        return o2;
    }
    if(!o2){
        return o1;
    }
    var o;
    if(cm.isArray(o1)){
        o = o1.filter(function(value){
            return !cm.inArray(o2, value);
        });
    }
    return o;
};

cm.clone = function(o, cloneNode, deep){
    var newO;
    if(!o){
        return o;
    }
    cloneNode = cm.isUndefined(cloneNode) ? false : cloneNode;
    deep = cm.isUndefined(deep) ? true : deep;
    // Arrays
    if(cm.isType(o, 'Arguments')){
        return [].slice.call(o);
    }
    if(cm.isType(o, /Array|StyleSheetList|CSSRuleList|HTMLCollection|NodeList|DOMTokenList|FileList/)){
        if(deep){
            newO = [];
            cm.forEach(o, function(item){
                newO.push(cm.clone(item, cloneNode));
            });
            return newO;
        }else{
            return [].slice.call(o);
        }
    }
    // Objects
    if(cm.isObject(o) && !o._isComponent){
        newO = {};
        cm.forEach(o, function(item, key){
            if(deep){
                newO[key] = cm.clone(item, cloneNode);
            }else{
                newO[key] = item;
            }
        });
        return newO;
    }
    // Dates
    if(cm.isDate(o)){
        newO = new Date();
        newO.setTime(o.getTime());
        return newO;
    }
    // Nodes
    if(cm.isNode(o)){
        if(cloneNode){
            newO = o.cloneNode(true);
        }else{
            newO = o;
        }
        return newO;
    }
    // Other (make links)
    return o;
};

cm.getLength = function(o){
    // Array
    if(cm.isArray(o)){
        return o.length;
    }
    // Object
    var keys = Object.keys(o);
    return keys.length;
};

cm.getCount = function(o){
    var i = 0;
    cm.forEach(o, function(item){
        if(!cm.isUndefined(item)){
            i++;
        }
    });
    return i;
};

cm.arrayIndex = function(a, item){
    return Array.prototype.indexOf.call(a, item);
};

cm.inArray = function(a, item){
    if(cm.isString(a)){
        return a === item;
    }
    if(cm.isArray(a)){
        return a.indexOf(item) > -1;
    }
    return false
};

cm.arrayRemove = function(a, item){
    var index = cm.arrayIndex(a, item);
    if(index > -1){
        a.splice(index, 1);
    }
    return a;
};

cm.arrayClear = function(a){
    while(a.length > 0){
        a.pop();
    }
    return a;
};

cm.arrayAdd = function(a, item, move){
    if(move){
        a = cm.arrayRemove(a, item);
    }
    if(!cm.inArray(a, item)){
        a.push(item);
    }
    return a;
}

cm.arrayPrepend = function(a, item, move){
    if(move){
        a = cm.arrayRemove(a, item);
    }
    if(!cm.inArray(a, item)){
        a.unshift(item);
    }
    return a;
};

cm.arrayFilter = function(a, items){
    return a.filter(function(item){
        return !items.includes(item);
    });
};

cm.arraySort = function(a, key, dir, clone){
    var newA;
    if(!cm.isArray(a)){
        return a;
    }
    dir = cm.isUndefined(dir) ? 'asc' : dir.toLowerCase();
    dir = cm.inArray(['asc', 'desc'], dir) ? dir : 'asc';
    clone = cm.isUndefined(clone) ? true : clone;
    newA = clone ? cm.clone(a) : a;
    switch(dir){
        case 'asc':
            newA.sort(function(a, b){
                return cm.arraySortAsc(a, b, key);
            });
            break;
        case 'desc' :
            newA.sort(function(a, b){
                return cm.arraySortDesc(a, b, key);
            });
            break;
    }
    return newA;
};

cm.arraySortAsc = function(a, b, key) {
    if(key){
        return (a[key] < b[key]) ? 1 : ((a[key] > b[key]) ? -1 : 0);
    }else{
        return (a < b) ? 1 : ((a > b) ? -1 : 0);
    }
};

cm.arraySortDesc = function(a, b, key) {
    if(key){
        return (a[key] < b[key]) ? -1 : ((a[key] > b[key]) ? 1 : 0);
    }else{
        return (a < b) ? -1 : ((a > b) ? 1 : 0);
    }
};

cm.arrayParseFloat = function(a){
    return a.map(Number.parseFloat);
};

cm.objectToArray = function(o){
    if(!cm.isObject(o)){
        return [o];
    }
    var a = [];
    cm.forEach(o, function(item){
        if(!cm.isEmpty(item)){
            a.push(item);
        }
    });
    return a;
};

cm.arrayToObject = function(a){
    var o = {};
    a.forEach(function(item, i){
        if(typeof item === 'object'){
            o[i] = item;
        }else{
            o[item] = item;
        }
    });
    return o;
};

cm.objectReplace = function(o, map, replaceKeys){
    var newO = cm.isArray(o) ? [] : {},
        newKey;
    replaceKeys = !cm.isUndefined(replaceKeys) ? replaceKeys : true;
    cm.forEach(o, function(value, key){
        if(cm.isString(key)){
            newKey = replaceKeys ? cm.strReplace(key, map) : key;
        }else{
            newKey = key;
        }
        if(cm.isObject(value)){
            newO[newKey] = cm.objectReplace(value, map, replaceKeys);
        }else if(cm.isString(value)){
            newO[newKey] = cm.strReplace(value, map);
        }else{
            newO[newKey] = value;
        }
    });
    return newO;
};

cm.getDiffCompare = function(item1, item2){
    var newO = {};
    cm.diffCompare(newO, item1, item2, 'key');
    return newO['key'];
};

cm.isEmpty = function(value){
    if(cm.isUndefined(value)){
        return true;
    }
    if(cm.isString(value) || cm.isArray(value)){
        return value.length === 0;
    }
    if(cm.isObject(value)){
        return cm.getLength(value) === 0;
    }
    return false;
};

cm.isUndefined = function(value){
    return typeof value === 'undefined' || value === undefined || value === null;
};

cm.objectFormPath = function(name, value, defaultValue){
    var newO = {},
        tempO = newO,
        nameO = name.toString().split('.'),
        nameL = nameO.length;
    defaultValue = !cm.isUndefined(defaultValue) ? defaultValue : {};
    value = !cm.isEmpty(value) ? value : defaultValue;
    nameO.map(function(item, i){
        if(nameL === i + 1){
            tempO[item] = value;
        }else{
            tempO = tempO[item] = {};
        }
    });
    return newO;
};

cm.objectSelector = function(name, obj, apply){
    if(cm.isUndefined(obj) || cm.isUndefined(name)){
        return obj;
    }
    name = name.toString().split('.');
    var findObj = obj,
        length = name.length;
    cm.forEach(name, function(item, key){
        if(!findObj[item]){
            findObj[item] = {};
        }
        if(apply && key === length -1){
            findObj[item] = apply;
        }
        findObj = findObj[item];
    });
    return findObj;
};

cm.reducePath = cm.objectPath = function(name, obj){
    if(cm.isUndefined(obj) || cm.isUndefined(name)){
        return obj;
    }
    name = name.toString().split('.');
    return name.reduce(function(object, property){
        return cm.isUndefined(object) ? undefined : object[property];
    }, obj);
};

cm.fillDataMap = function(map, data){
    var items = {},
        value;
    cm.forEach(map, function(id, key){
        value = cm.reducePath(id, data);
        if(cm.isEmpty(value) && /[{%]\w+[%}]/.test(id)){
            value = cm.fillVariables(id, data);
        }
        if(!cm.isEmpty(value)){
            items[key] = value;
        }
    });
    return items;
};

cm.objectFillVariables = function(o, map, skipEmpty, replaceKeys){
    var newO = cm.isArray(o) ? [] : {},
        newKey;
    replaceKeys = !cm.isUndefined(replaceKeys) ? replaceKeys : true;
    skipEmpty = !cm.isUndefined(skipEmpty) ? skipEmpty : false;
    cm.forEach(o, function(value, key){
        if(cm.isString(key)){
            newKey = replaceKeys ? cm.fillVariables(key, map, skipEmpty) : key;
        }else{
            newKey = key;
        }
        if(cm.isObject(value)){
            newO[newKey] = cm.objectFillVariables(value, map, skipEmpty, replaceKeys);
        }else if(cm.isString(value)){
            newO[newKey] = cm.fillVariables(value, map, skipEmpty);
        }else{
            newO[newKey] = value;
        }
    });
    return newO;
};

cm.sort = function(o, dir){
    var keys = cm.arraySort(Object.keys(o), null, dir),
        sorted = {};
    cm.forEach(keys, function(key){
        sorted[key] = o[key];
    });
    return sorted;
};

cm.replaceDeep = function(o, from, to){
    var newO = cm.clone(o);
    cm.forEach(newO, function(value, key){
        if(typeof value === 'object'){
            newO[key] = cm.replaceDeep(value, from, to);
        }else{
            newO[key] = value.replace(from, to);
        }
    });
    return newO;
};

/* ******* EVENTS ******* */

cm.log = (function(){
    var results = [],
        log;
    if(cm._debug && Function.prototype.bind && window.console){
        log = Function.prototype.bind.call(console.log, console);
        return function(){
            log.apply(console, arguments);
        };
    }else if(cm._debug && cm._debugAlert){
        return function(){
            cm.forEach(arguments, function(arg){
                results.push(arg);
            });
            alert(results.join(', '));
        };
    }else{
        return function(){};
    }
})();

cm.errorLog = function(o){
    var config = cm.merge({
            'type' : 'error',
            'name' : '',
            'message' : '',
            'langs' : {
                'error' : 'Error!',
                'success' : 'Success!',
                'attention' : 'Attention!',
                'common' : 'Common'
            }
        }, o),
        data = [
            config['langs'][config['type']],
            config['name'],
            config['message']
        ],
        str = data.join(' > ');
    switch(config['type']){
        case 'error':
            console.error(str);
            break;
        case 'attention':
            console.warn(str);
            break;
        case 'common':
        case 'success':
        default:
            console.info(str);
            break;
    }
};

cm.getEvent = function(e){
    return e || window.event;
};

cm.stopPropagation = function(e){
    return e.stopPropagation ? e.stopPropagation() : e.cancelBubble = true;
};

cm.preventDefault = function(e){
    return e.preventDefault ? e.preventDefault() : e.returnValue = false;
};

cm.getObjFromEvent = cm.getEventObject = cm.getEventTarget = function(e){
    return  e.target || e.srcElement;
};

cm.getObjToEvent = cm.getRelatedTarget = function(e){
    return e.relatedTarget || e.srcElement;
};

cm.getEventClientPosition = function(e){
    var o = {
        'left' : 0,
        'top' : 0
    };
    if(e){
        try{
            o['left'] = e.clientX;
            o['top'] = e.clientY;
            if(e.touches && e.touches.length){
                o['left'] = e.touches[0].clientX;
                o['top'] = e.touches[0].clientY;
            }else if(e.changedTouches && e.changedTouches.length){
                o['left'] = e.changedTouches[0].clientX;
                o['top'] = e.changedTouches[0].clientY;
            }
        }catch(e){}
    }
    return o;
};

cm.getElementAbove = function(e){
    var x = e.clientX || cm._clientPosition['left'],
        y = e.clientY || cm._clientPosition['top'];
    return document.elementFromPoint(x, y);
};

cm.onSchedule = function(callback){
    animFrame(function(){
        animFrame(function(){
            callback();
        });
    });
};

cm.addEvent = function(el, type, handler, useCapture){
    if(el){
        useCapture = cm.isUndefined(useCapture)? false : useCapture;
        el.addEventListener(type, handler, useCapture);
    }
    return el;
};

cm.removeEvent = function(el, type, handler, useCapture){
    if(el){
        useCapture = cm.isUndefined(useCapture) ? false : useCapture;
        el.removeEventListener(type, handler, useCapture);
    }
    return el;
};

cm.triggerEvent = function(el, type, options){
    if(el){
        options = cm.merge({
            bubbles: true,
            cancelable: true
        }, options);
        var event = new Event(type, options);
        el.dispatchEvent(event);
    }
    return el;
};

cm.click =  (function() {
    var stack = new Map();

    return {
        add: function(el, callback, useCapture) {
            if (!el || !cm.isFunction(callback)) {
                return el;
            }

            function helper(event) {
                if (event && cm.isNotToggleKey(event) || /button|input/i.test(el.tagName)) {
                    return;
                }
                callback(event);
            }

            var item = stack.get(el);
            if (!item) {
                item = new Map();
                stack.set(el, item);
            }
            item.set(callback, helper);

            cm.addEvent(el, 'click', callback, useCapture);
            cm.addEvent(el, 'keypress', helper, useCapture);
            return el;
        },
        remove: function(el, callback, useCapture) {
            if (!el || !cm.isFunction(callback)) {
                return el;
            }

            var item = stack.get(el);
            if (!item) {
                return el;
            }

            var helper = item.get(callback);
            if (!helper) {
                return el;
            }
            item.delete(callback);

            cm.removeEvent(el, 'click', callback, useCapture);
            cm.removeEvent(el, 'keypress', helper, useCapture);
            return el;
        },
        list: function() {
            return stack;
        },
    };
})();

cm.customEvent = (function(){
    var _stack = {};

    return {
        'add' : function(node, type, handler){
            if(!_stack[type]){
                _stack[type] = [];
            }
            _stack[type].push({
                'node' : node,
                'type' : type,
                'handler' : cm.isFunction(handler) ? handler : function(){}
            });
            return node;
        },
        'remove' : function(node, type, handler){
            if(!_stack[type]){
                _stack[type] = [];
            }
            _stack[type] = _stack[type].filter(function(item){
                return item['node'] !== node && item['handler'] !== handler;
            });
            return node;
        },
        'trigger' : function(node, type, params){
            if(!node){
                return null;
            }
            var stopPropagation = false;
            params = cm.merge({
                'target' : node,
                'type' : type,
                'direction' : 'all',            // child | parent | all
                'self' : true,
                'stopPropagation' : function(){
                    stopPropagation = true;
                }
            }, params);
            if(_stack[type]){
                _stack[type].sort(function(a, b){
                    if(params['direction'] === 'parent'){
                        return cm.getNodeOffsetIndex(b['node']) > cm.getNodeOffsetIndex(a['node']);
                    }
                    return cm.getNodeOffsetIndex(a['node']) - cm.getNodeOffsetIndex(b['node']);
                });
                cm.forEach(_stack[type], function(item){
                    var itemParams = cm.merge(params, {
                        'currentTarget' : item['node'],
                        'item' : item
                    });
                    if(!stopPropagation){
                        if(itemParams['self'] && node === item['node']){
                            item['handler'](itemParams);
                        }
                        switch(itemParams['direction']){
                            case 'child':
                                if(cm.isParent(node, item['node'], false)){
                                    item['handler'](itemParams);
                                }
                                break;
                            case 'parent':
                                if(cm.isParent(item['node'], node, false)){
                                    item['handler'](itemParams);
                                }
                                break;
                            default:
                                if(node !== item['node']){
                                    item['handler'](itemParams);
                                }
                                break;
                        }
                    }
                });
            }
            return node;
        }
    };
})();

cm.hook = (function(){
    var _stack = {};

    return {
        'get' : function(type){
            if(!type){
                return _stack;
            }
            if(!_stack[type]){
                _stack[type] = [];
            }
            return _stack[type];
        },
        'add' : function(type, handler){
            if(!_stack[type]){
                _stack[type] = [];
            }
            if(cm.isFunction(handler)){
                _stack[type].push(handler);
            }else{
                cm.errorLog({
                    'name' : 'cm.hook',
                    'message' : ['Handler of event', cm.strWrap(type, '"'), 'must be a function.'].join(' ')
                });
            }
        },
        'remove' : function(type, handler){
            if(!_stack[type]){
                _stack[type] = [];
            }
            if(cm.isFunction(handler)){
                _stack[type] = _stack[type].filter(function(item){
                    return item !== handler;
                });
            }else{
                cm.errorLog({
                    'name' : 'cm.hook',
                    'message' : ['Handler of event', cm.strWrap(type, '"'), 'must be a function.'].join(' ')
                });
            }
        },
        'trigger' : function(type, params){
            var that = this,
                data = cm.clone(arguments);
            // Remove event name parameter from data
            data.shift();
            if(_stack[type]){
                cm.forEach(_stack[type], function(handler){
                    handler.apply(that, data);
                });
            }
        }
    }
})();

cm.onLoad = function(handler, logMessage){
    logMessage = cm.isUndefined(logMessage) ? true : logMessage;
    var called = false;
    var execute = function(){
        if(called){
            return;
        }
        called = true;
        if(logMessage){
            cm.errorLog({
                'type' : 'common',
                'name' : 'cm.onLoad',
                'message' : ['Load time', (Date.now() - cm._loadTime), 'ms.'].join(' ')
            });
        }
        handler();
    };
    try{
        cm.addEvent(window, 'load', execute);
    }catch(e){}
};

cm.onReady = function(handler, logMessage){
    logMessage = cm.isUndefined(logMessage) ? true : logMessage;
    var called = false;
    var execute = function(){
        if(called){
            return;
        }
        called = true;
        if(logMessage){
            cm.errorLog({
                type: 'common',
                name: 'cm.onReady',
                message: ['Ready time', (Date.now() - cm._loadTime), 'ms.'].join(' ')
            });
        }
        handler();
    };
    cm.addEvent(document, 'DOMContentLoaded', execute);
    try{
        cm.addEvent(window, 'load', execute);
    }catch(e){}
};

cm.addScrollEvent = function(node, callback, useCapture){
    useCapture = cm.isUndefined(useCapture) ? false : useCapture;
    if(cm.isWindow(node)){
        cm.addEvent(node, 'scroll', callback, useCapture);
    }else if(cm.isNode(node)){
        if(/body|html/gi.test(node.tagName)){
            cm.addEvent(cm.getOwnerWindow(node), 'scroll', callback, useCapture);
        }else{
            cm.addEvent(node, 'scroll', callback, useCapture);
        }
    }
    return node;
};

cm.removeScrollEvent = function(node, callback, useCapture){
    useCapture = cm.isUndefined(useCapture) ? false : useCapture;
    if(cm.isWindow(node)){
        cm.removeEvent(node, 'scroll', callback, useCapture);
    }if(cm.isNode(node)){
        if(/body|html/gi.test(node.tagName)){
            cm.removeEvent(cm.getOwnerWindow(node), 'scroll', callback, useCapture);
        }else{
            cm.removeEvent(node, 'scroll', callback, useCapture);
        }
    }
    return node;
};

cm.isolateScrolling = function(e){
    var that = this;
    if(e.deltaY > 0 && that.clientHeight + that.scrollTop >= that.scrollHeight){
        that.scrollTop = that.scrollHeight - that.clientHeight;
        cm.stopPropagation(e);
        cm.preventDefault(e);
        return false;
    }else if (e.deltaY < 0 && that.scrollTop <= 0){
        that.scrollTop = 0;
        cm.stopPropagation(e);
        cm.preventDefault(e);
        return false;
    }
    return true;
};

cm.addIsolateScrolling = function(node){
    cm.addEvent(node, 'wheel', cm.isolateScrolling);
    return node;
};

cm.removeIsolateScrolling = function(node){
    cm.removeEvent(node, 'wheel', cm.isolateScrolling);
    return node;
};

cm.isCenterButton = function(e){
    return e.button === 1;
};

cm.debounce = function(func, wait, immediate){
    var timeout, result;
    return function(){
        var context = this,
            args = arguments;
        var later = function(){
            timeout = null;
            if(!immediate){
                result = func.apply(context, args);
            }
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if(callNow){
            result = func.apply(context, args);
        }
        return result;
    };
};

cm.onScrollStart = function(node, handler){
    var worked = false,
        scrollEnd = function(){
            worked = false;
        },
        helper = cm.debounce(scrollEnd, 100),
        scrollEvent = function(){
            !worked && handler();
            worked = true;
            helper();
        };
    cm.addEvent(node, 'scroll', scrollEvent);
    return {
        'remove' : function(){
            cm.removeEvent(node, 'scroll', scrollEvent);
        }
    };
};

cm.onScrollEnd = function(node, handler){
    var helper = cm.debounce(handler, 100);
    cm.addEvent(node, 'scroll', helper);
    return {
        'remove' : function(){
            cm.removeEvent(node, 'scroll', helper);
        }
    };
};

cm.onImageLoad = function(src, success, error){
    var nodes = [],
        isMany = cm.isArray(src),
        images = isMany ? src : [src],
        imagesLength = images.length,
        isLoad = 0;

    images.forEach(function(item, i){
        nodes[i] = cm.node('img', {'alt' : ''});
        nodes[i].onload = function(){
            isLoad++;
            if(isLoad === imagesLength){
                cm.isFunction(success) && success(isMany ? nodes : nodes[0]);
            }
        };
        nodes[i].onerror = function(event){
            cm.isFunction(error) && error(isMany ? nodes : nodes[0], event);
        };
        nodes[i].src = item;
    });

    return isMany ? nodes : nodes[0];
};

cm.fileFromDataTransfer = function(e, callback){
    var types = ['url', 'text/plain', 'text/uri-list'],
        image = new Image(),
        canvas = document.createElement('canvas'),
        dt = e.dataTransfer,
        tempData,
        data,
        dataURL,
        blob,
        file;
    // Get URL from HTML
    tempData = dt.getData('text/html');
    if(!cm.isEmpty(tempData)){
        tempData = cm.strToHTML(tempData);
        if(!cm.isEmpty(tempData)){
            tempData = tempData.querySelector('img');
            if(!cm.isEmpty(tempData)){
                data = tempData.src;
            }
        }
    }
    // Get URL
    if(cm.isEmpty(data)){
        cm.forEach(types, function(type){
            tempData = dt.getData(type);
            if(!cm.isEmpty(tempData)){
                data = tempData
            }
        });
    }
    // Get Data URL
    image.crossOrigin = 'anonymous';
    cm.addEvent(image, 'load', function(){
        var that = this;
        canvas.width = that.naturalWidth;
        canvas.height = that.naturalHeight;
        canvas.getContext('2d').drawImage(that, 0, 0);
        dataURL = canvas.toDataURL('image/png');
        blob = cm.dataURItoBlob(dataURL);
        file = new File([blob], data);
        cm.isFunction(callback) && callback(file);
    });
    image.src = data;
    return data;
};

cm.dataURItoBlob = function(dataURI){
    var byteString = atob(dataURI.split(',')[1]),
        mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0],
        ab = new ArrayBuffer(byteString.length),
        ia = new Uint8Array(ab);
    for (var i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }
    return new Blob([ab], {'type': mimeString});
};

cm.dataURItoFile = function(dataURI, data) {
    data = cm.merge({
        name: cm.quid('$$$$$$$'),
        type: 'image/jpeg',
    }, data);
    var blob = cm.dataURItoBlob(dataURI);
    return new File([blob], data.name, data);
};

cm.bufferToHEX = function(arrayBuffer){
    var byteArray = new Uint8Array(arrayBuffer),
        hexParts = [];
    for(var i = 0; i < byteArray.length; i++){
        var hex = byteArray[i].toString(16),
            paddedHex = ('00' + hex).slice(-2);
        hexParts.push(paddedHex);
    }
    return hexParts.join('');
};

/* ******* NODES ******* */

cm.getOwnerWindow = function(node){
    return node.ownerDocument.defaultView;
};

cm._addScriptStack = {};

cm.addScript = function(src, async, callback){
    var item,
        vars = cm._getVariables();
    // Config
    src = cm.isArray(src) ? cm.objectReplace(src, vars) : cm.strReplace(src, vars);
    async = !cm.isUndefined(async) ? async : false;
    callback = !cm.isUndefined(callback) ? callback : function(){};
    // Configure Stack Item
    if(cm._addScriptStack[src]){
        item = cm._addScriptStack[src];
        if(!item['loaded']){
            item['callbacks'].push(callback);
        }else{
            callback();
        }
    }else{
        item = {
            'src' : src,
            'async' : async,
            'loaded' : false,
            'callback' : function(e){
                item['loaded'] = true;
                while(item['callbacks'].length){
                    item['callbacks'][0](e);
                    cm.arrayRemove(item['callbacks'], item['callbacks'][0]);
                }
            },
            'callbacks' : [callback]
        };
        cm._addScriptStack[src] = item;
        // Render Script
        item['script'] = document.createElement('script');
        item['script'].async = item['async'];
        item['script'].src = item['src'];
        cm.addEvent(item['script'], 'load', item['callback']);
        cm.addEvent(item['script'], 'error', item['callback']);
        cm.appendChild(item['script'], cm.getDocumentHead());
    }
    return item['script'];
};

cm.loadScript = function(config) {
    config = cm.merge({
        path: '',
        src: '',
        async: true,
        callback: function() {},
    }, config);

    var path = cm.objectPath(config.path, window);
    if (!cm.isEmpty(path)) {
        return new Promise(function(resolve, reject) {
            config.callback(path);
            resolve(path);
        });
    } else {
        return new Promise(function(resolve, reject) {
            cm.addScript(config.src, config.async, function(event) {
                path = cm.objectPath(config.path, window);
                if (!cm.isEmpty(path)) {
                    config.callback(path);
                    resolve(path);
                } else {
                    cm.errorLog({
                        type: 'error',
                        name: 'cm.loadScript',
                        message: [config.path, 'was not loaded.'].join(' '),
                    });
                    config.callback(null);
                    reject(event);
                }
            });
        });
    }
};

cm.addLink = function(href, callback){
    var node  = document.createElement('link');
    node.rel  = 'stylesheet';
    node.type = 'text/css';
    node.media = 'all';
    node.href = href;
    cm.appendChild(node, cm.getDocumentHead());
    return node;
}

cm.getEl = function(str){
    return document.getElementById(str);
};

cm.getByClass = function(str, node){
    node = node || document;
    return node.getElementsByClassName(str);
};

cm.getByAttr = function(attr, value, element){
    var p = element || document;
    return p.querySelectorAll('[' + attr + '="' + value + '"]');
};

cm.getByName = function(name, node){
    if(cm.isNode(node)){
        return node.querySelectorAll('[name="' + name + '"]');
    }else{
        return document.getElementsByName(name);
    }
};

cm.getParentByTagName = function(tagName, node){
    if(cm.isEmpty(tagName) || !cm.hasParentNode(node)){
        return null;
    }
    var el = node.parentNode;
    do{
        if(el.tagName && el.tagName.toLowerCase() === tagName.toLowerCase()){
            return el;
        }
    }while(el = el.parentNode);
    return null;
};

cm.getIFrameDOM = function(o){
    return o.contentDocument || o.document;
};

cm.getDocumentHead = function(){
    return document.getElementsByTagName('head')[0];
};

cm.getDocumentHtml = function(){
    return document.documentElement;
};

cm.getNodeOffsetIndex = function(node){
    if(!cm.isNode(node)){
        return 0;
    }
    var o = node,
        i = 0;
    while(o.parentNode){
        o = o.parentNode;
        i++;
    }
    return i;
};

cm.node = cm.Node = function(){
    var args = arguments,
        el = document.createElement(args[0]),
        i = 0;
    if(cm.isObject(args[1])){
        cm.forEach(args[1], function(value, key){
            if(cm.isUndefined(value)){
                return;
            }
            if(cm.isObject(value) && !['class', 'classes', 'style', 'styles'].includes(key)){
                value = JSON.stringify(value);
            }
            switch(key){
                case 'style':
                case 'styles':
                    cm.addStyles(el, value);
                    break;
                case 'class':
                case 'classes':
                    cm.addClass(el, value);
                    break;
                case 'innerHTML':
                    el.innerHTML = value;
                    break;
                case 'innerText':
                    el.innerText = value;
                    break;
                default:
                    el.setAttribute(key, value);
                    break;
            }
        });
        i = 2;
    }else{
        i = 1;
    }
    for(var ln = args.length; i < ln; i++){
        if(typeof args[i] !== 'undefined'){
            if(typeof args[i] === 'string' || typeof args[i] === 'number'){
                cm.appendChild(cm.textNode(args[i]), el);
            }else{
                cm.appendNodes(args[i], el);
            }
        }
    }
    return el;
};

cm.textNode = function(text){
    return document.createTextNode(text);
};

cm.wrap = function(target, node){
    if(!target || !node){
        return null;
    }
    if(node.parentNode){
        cm.insertBefore(target, node);
    }
    target.appendChild(node);
    return target;
};

cm.inDOM = function(node){
    return node === document.body || document.body.contains(node);
};

cm.hasParentNode = function(o){
    if(!cm.isNode(o)){
        return false;
    }
    return !!o.parentNode;
};

cm.isParent = function(p, node, flag){
    if(flag && p === node){
        return true;
    }
    if(cm.isNode(node)){
        if(cm.isWindow(p) && cm.inDOM(node)){
            return true;
        }
        if(p.contains(node) && p !== node){
            return true
        }
    }
    return false;
};

cm.isParentByClass = function(parentClass, o){
    if(o && o.parentNode){
        var el = o.parentNode;
        do{
            if(cm.isClass(el, parentClass)){
                return true;
            }
        }while(el = el.parentNode);
    }
    return false;
};

cm.getData = function(node, name){
    if(!node){
        return null;
    }
    if(node.dataset){
        return node.dataset[name];
    }else{
        return node.getAttribute(['data', name].join('-'));
    }
};

cm.getTextValue = cm.getTxtVal = function(o){
    return o.nodeType === 1 && o.firstChild ? o.firstChild.nodeValue : '';
};

cm.getTextNodesStr = function(node){
    var str = '',
        childs;
    if(node){
        if(cm.isArray(node)){
            cm.forEach(node, function(child){
                str += cm.getTextNodesStr(child);
            });
        }else if(cm.isNode(node)){
            childs = node.childNodes;
            cm.forEach(childs, function(child){
                if(child.nodeType === 1){
                    str += cm.getTextNodesStr(child);
                }else{
                    str += child.nodeValue;
                }
            });
        }
    }
    return str;
};

cm.remove = cm.removeNode = function(node){
    if(node && node.parentNode){
        node.parentNode.removeChild(node);
    }
};

cm.removeNodes = function(nodes){
    if(cm.isEmpty(nodes)){
        return;
    }
    if(cm.isNode(nodes)){
        cm.remove(nodes)
    }else{
        while(nodes.length){
            cm.remove(nodes[0]);
        }
    }
};

cm.clearNode = function(node){
    if(cm.isNode(node)){
        while(node.childNodes.length){
            node.removeChild(node.firstChild);
        }
    }
    return node;
};

cm.prevEl = function(node){
    node = node.previousSibling;
    if(node && node.nodeType && node.nodeType !== 1){
        node = cm.prevEl(node);
    }
    return node;
};

cm.nextEl = function(node){
    node = node.nextSibling;
    if(node && node.nodeType && node.nodeType !== 1){
        node = cm.nextEl(node);
    }
    return node;
};

cm.firstEl = function(node){
    if(!node || !node.firstChild){
        return null;
    }
    node = node.firstChild;
    if(node.nodeType !== 1){
        node = cm.nextEl(node);
    }
    return node;
};

cm.insertFirst = function(node, target, reAppend){
    reAppend = cm.isUndefined(reAppend) ? true : reAppend;
    if(!cm.isNode(node) || !cm.isNode(target)){
        return node;
    }
    if(target.firstChild){
        var isAppended = cm.isParent(target, node);
        if (reAppend || !isAppended || (isAppended && node !== target.firstChild)) {
            cm.insertBefore(node, target.firstChild);
        }
    }else{
        cm.appendChild(node, target, reAppend);
    }
    return node;
};

cm.insertLast = cm.appendChild = function(node, target, reAppend){
    reAppend = cm.isUndefined(reAppend) ? true : reAppend;
    if(!cm.isNode(node) || !cm.isNode(target)){
        return node;
    }
    if(reAppend || !cm.isParent(target, node)){
        target.appendChild(node);
    }
    return node;
};

cm.insertBefore = function(node, target){
    if(cm.isNode(node) && cm.isNode(target) && target.parentNode){
        target.parentNode.insertBefore(node, target);
    }
    return node;
};

cm.insertAfter = function(node, target){
    if(cm.isNode(node) && cm.isNode(target) && target.parentNode){
        var before = target.nextSibling;
        if(before){
            cm.insertBefore(node, before);
        }else{
            target.parentNode.appendChild(node);
        }
    }
    return node;
};

cm.replaceNode = function(node, target){
    cm.insertBefore(node, target);
    cm.remove(target);
    return node;
};

cm.appendNodes = function(nodes, target) {
    if (cm.isEmpty(nodes)) {
        return target;
    }
    if (cm.isNode(nodes)) {
        cm.appendChild(nodes, target);
    } else if(cm.isArray(nodes)) {
        cm.forEach(nodes, function(node) {
            cm.appendChild(node, target);
        });
    } else {
        while (nodes.length) {
            if (cm.isNode(nodes[0])) {
                cm.appendChild(nodes[0], target);
            } else {
                cm.remove(nodes[0]);
            }
        }
    }
    return target;
};

cm.hideSpecialTags = function(){
    var els;
    if(document.querySelectorAll){
        els = document.querySelectorAll('iframe,object,embed');
        cm.forEach(els, function(item){
            item.style.visibility = 'hidden';
        });
    }else{
        els = document.getElementsByTagName('*');
        cm.forEach(els, function(item){
            if(item.tagName && /iframe|object|embed/.test(item.tagName)){
                item.style.visibility = 'hidden';
            }
        });
    }
};

cm.showSpecialTags = function(){
    var els;
    if(document.querySelectorAll){
        els = document.querySelectorAll('iframe,object,embed');
        cm.forEach(els, function(item){
            item.style.visibility = 'visible';
        });
    }else{
        els = document.getElementsByTagName('*');
        cm.forEach(els, function(item){
            if(item.tagName && /iframe|object|embed/.test(item.tagName)){
                item.style.visibility = 'visible';
            }
        });
    }
};

cm.strToHTML = function(str){
    if(!str || cm.isNode(str)){
        return str;
    }
    var node = cm.node('div');
    node.insertAdjacentHTML('beforeend', str);
    return node.childNodes.length === 1? node.firstChild : node.childNodes;
};

cm.getNodes = function(container, marker){
    container = container || document.body;
    marker = marker || 'data-node';
    var accumulator = {},
        processedNodes = [];

    var separation = function(node, accumulatorObj, processedObj){
        var path = node.getAttribute(marker),
            pathItems = path? path.split('|') : [],
            tempProcessedObj;

        cm.forEach(pathItems, function(item){
            tempProcessedObj = [];
            if(item.indexOf('.') === -1){
                process(node, item, accumulatorObj, tempProcessedObj);
            }else{
                pathway(node, item, tempProcessedObj);
            }
            cm.forEach(tempProcessedObj, function(node){
                processedObj.push(node);
            });
        });
    };

    var pathway = function(node, path, processedObj){
        var pathItems = path? path.split('.') : [],
            accumulatorObj = accumulator;
        cm.forEach(pathItems, function(item, i){
            if(i === 0 && cm.isEmpty(item)){
                accumulatorObj = accumulator;
            }else if((i + 1) === pathItems.length){
                process(node, item, accumulatorObj, processedObj);
            }else{
                if(!accumulatorObj[item]){
                    accumulatorObj[item] = {};
                }
                accumulatorObj = accumulatorObj[item];
            }
        });
    };

    var process = function(node, path, accumulatorObj, processedObj){
        var pathItems = path? path.split(':') : [],
            childNodes;
        if(pathItems.length === 1){
            accumulatorObj[pathItems[0]] = node;
        }else if(pathItems.length === 2 || pathItems.length === 3){
            if(pathItems[1] === '[]'){
                if(!accumulatorObj[pathItems[0]]){
                    accumulatorObj[pathItems[0]] = [];
                }
                childNodes = {};
                if(pathItems[2]){
                    childNodes[pathItems[2]] = node;
                }
                find(node, childNodes, processedObj);
                accumulatorObj[pathItems[0]].push(childNodes);
            }else if(pathItems[1] === '[&]'){
                if(!accumulatorObj[pathItems[0]]){
                    accumulatorObj[pathItems[0]] = [];
                }
                accumulatorObj[pathItems[0]].push(node);
            }else if(pathItems[1] === '{}'){
                if(!accumulatorObj[pathItems[0]]){
                    accumulatorObj[pathItems[0]] = {};
                }
                if(pathItems[2]){
                    accumulatorObj[pathItems[0]][pathItems[2]] = node;
                }
                find(node, accumulatorObj[pathItems[0]], processedObj);
            }
        }
        processedObj.push(node);
    };

    var find = function(container, accumulatorObj, processedObj){
        var childNodes = container.querySelectorAll('[' + marker +']');
        cm.forEach(childNodes, function(node){
            if(!cm.inArray(processedObj, node)){
                separation(node, accumulatorObj, processedObj);
            }
        });
    };

    separation(container, accumulator, processedNodes);
    find(container, accumulator, processedNodes);

    return accumulator;
};

cm.processDataAttributes = function(node, name, vars){
    vars = !cm.isUndefined(vars) ? vars : {};
    var marker = ['data-attributes', name].join('-'),
        nodes = node.querySelectorAll('[' + marker + ']'),
        value;

    var process = function(node){
        if(value = node.getAttribute(marker)){
            node.setAttribute(name, cm.strReplace(value, vars));
        }
    };

    process(node);
    cm.forEach(nodes, process);
};

/* ******* FORM ******* */

cm.setFDO = function(o, form){
    cm.forEach(o, function(item, name){
        var el = cm.getByAttr('name', name, form);

        for(var i = 0, ln = el.length; i < ln; i++){
            var type = (el[i].type || '').toLowerCase();
            switch(type){
                case 'radio':
                    if(item == el[i].value){
                        el[i].checked = true;
                    }
                    break;

                case 'checkbox':
                    el[i].checked = !!item;
                    break;

                default:
                    if(cm.isTagName(el[i], 'select')){
                        cm.setSelect(el[i], item);
                    }else{
                        el[i].value = item;
                    }
                    break;
            }
        }
    });
    return form;
};

cm.getFDO = function(o, chbx){
    var data = {};

    if(!cm.isNode(o)){
        return data;
    }

    var elements = [
        o.getElementsByTagName('input'),
        o.getElementsByTagName('textarea'),
        o.getElementsByTagName('select')
    ];

    var setValue = function(name, value){
        if(/\[.*\]$/.test(name)){
            var indexes = [];
            var re = /\[(.*?)\]/g;
            var results = null;
            while(results = re.exec(name)){
                indexes.push(results[1]);
            }
            name = name.replace(/\[.*\]$/, '');
            data[name] = (function(i, obj){
                var index = indexes[i];
                var next = !cm.isUndefined(indexes[i + 1]);
                if(index === ''){
                    if(obj && obj instanceof Array){
                        obj.push(next ? arguments.callee(i + 1, obj) : value);
                    }else{
                        obj = [next? arguments.callee(i+1, obj) : value];
                    }
                }else{
                    if(!obj || !(obj instanceof Object)){
                        obj = {};
                    }
                    obj[index] = next ? arguments.callee(i + 1, obj[index]) : value;
                }
                return obj;
            })(0, data[name]);
        }else{
            data[name] = value;
        }
        return 1;
    };

    for(var d = 0, lnd = elements.length; d < lnd; d++){
        for(var i = 0, ln = elements[d].length; i < ln; i++){
            if(!elements[d][i].name.length){
                continue;
            }
            switch(elements[d][i].tagName.toLowerCase()){
                case 'input':
                    switch(elements[d][i].type.toLowerCase()){
                        case 'radio':
                            if(elements[d][i].checked){
                                setValue(elements[d][i].name, elements[d][i].value || 1);
                            }
                            break;

                        case 'checkbox':
                            if(elements[d][i].checked){
                                setValue(elements[d][i].name, elements[d][i].value || 1);
                            }else if(!cm.isUndefined(chbx) && chbx !== false){
                                setValue(elements[d][i].name, chbx);
                            }
                            break;

                        case 'password':
                        case 'hidden':
                        case 'text':
                        default:
                            setValue(elements[d][i].name, elements[d][i].value);
                            break;
                    }
                    break;

                case 'select':
                    if(elements[d][i].multiple){
                        var opts = elements[d][i].getElementsByTagName('option');
                        for(var j in opts){
                            if(opts[j].selected){
                                setValue(elements[d][i].name, opts[j].value);
                            }
                        }
                    }else{
                        setValue(elements[d][i].name, elements[d][i].value);
                    }
                    break;

                case 'textarea':
                    setValue(elements[d][i].name, elements[d][i].value);
                    break;
            }
        }
    }
    return data;
};

cm.clearForm = function(o){
    var formEls = cm.getByClass('formData', o);
    for(var i = 0, ln = formEls.length; i < ln; i++){
        if(cm.isTagName(formEls[i], 'input')){
            if(formEls[i].type.toLowerCase() === 'checkbox' || formEls[i].type.toLowerCase() === 'radio'){
                formEls[i].checked = false;
            }else{
                formEls[i].value = '';
            }
        }else if(cm.isTagName(formEls[i], 'textarea')){
            formEls[i].value = '';
        }else if(cm.isTagName(formEls[i], 'select')){
            var opts = formEls[i].getElementsByTagName('option');
            for(var d = 0, lnd = opts.length; d < lnd; d++){
                opts[d].selected = false;
            }
        }
    }
    return o;
};

cm.setSelect = function(o, value){
    if(!o || !cm.isNode(o)){
        return null;
    }
    var options = o.getElementsByTagName('option');
    cm.forEach(options, function(node){
        if(cm.isArray(value)){
            node.selected = cm.inArray(value, node.value);
        }else{
            if(cm.isBoolean(value)){
                value = value.toString();
            }
            node.selected = node.value == value;
        }
    });
    return o;
};

cm.toggleRadio = function(name, value, node){
    node = node || document.body;
    var els = cm.getByName(name, node);
    for(var i = 0; i < els.length; i++){
        if(els[i].value == value){
            els[i].checked = els[i].value == value;
        }
    }
};

cm.getValue = function(name, node){
    node = node || document.body;
    var nodes = cm.getByName(name, node),
        value;
    for(var i = 0, l = nodes.length; i < l; i++){
        if(nodes[i].checked){
            value = nodes[i].value;
        }
    }
    return value;
};

cm.getSelectedOptions = function(node, index){
    if(!cm.isNode(node)){
        return null;
    }
    var options = node.selectedOptions ? node.selectedOptions : node.querySelectorAll('option:checked');
    return !cm.isUndefined(index) ? options[index] : options;
};

cm.getSelectValue = function(node){
    if(!cm.isNode(node)){
        return null;
    }
    if(!node.multiple){
        return node.value;
    }
    var options,
        selected = [];
    try{
        options = cm.getSelectedOptions(node);
        selected = Array.from(options).map(function(option){
            return option.value;
        });
    }catch(e){}
    return selected;
};

cm.setInputMaxLength = function(input, maxLength, max, limit){
    limit = cm.isUndefined(limit) ? true : limit;
    if(cm.isNode(input)){
        var value = 0;
        if(input.type === 'number'){
            value = max || '9'.repeat(maxLength);
            if(value){
                input.max = value;
            }
        }else{
            value = maxLength || max;
            if(limit && value){
                input.maxLength = value;
            }
        }
    }
    return input;
};

cm.setInputMinLength = function(input, minLength, min){
    if(cm.isNode(input)){
        var value = 0;
        if(input.type === 'number'){
            value = min || (minLength ? Math.pow(10, minLength - 1) : 0);
            if(value){
                input.min = value;
            }
        }else{
            value = minLength || min;
            if(value){
                input.minLength = value;
            }
        }
    }
    return input;
};

cm.getMinMax = function(value, min, max, minLength, maxLength) {
    value = parseFloat(value);
    min = min || (minLength ? Math.pow(10, minLength - 1) : 0);
    max = max || (maxLength ? '9'.repeat(maxLength) : Infinity);
    return Math.min(Math.max(value, min), max);
};

cm.constraintsPattern = function(pattern, match, message){
    var test,
        testPattern;
    return function(data){
        testPattern = cm.isFunction(pattern) ? pattern(data) : pattern;
        if(cm.isRegExp(testPattern)){
            test = testPattern.test(data['value']);
        }else{
            test = testPattern === data['value'];
        }
        data['pattern'] = testPattern;
        data['message'] = message;
        data['valid'] = match? test : !test;
        return data;
    }
};

cm.constraintsCallback = function(callback, message){
    return function(data){
        data['message'] = message;
        data['valid'] = cm.isFunction(callback) ? callback(data) : function(){};
        return data;
    }
};

cm.constraintsCallbackAsync = function(callback, message){
    return async function(data){
        data['async'] = true;
        data['message'] = message;
        data['valid'] = cm.isFunction(callback) ? await callback(data) : function(){};
        return data;
    }
};

/* ******* STRINGS ******* */

cm.toFixed = function(n, x, toNumber){
    if(!x || x === 0){
        return Math.round(n);
    }
    var value = Number.parseFloat(n).toFixed(x);
    return toNumber ? Number(value) : value;
};

cm.toNumber = function(str){
    return parseInt(str.replace(/\s+/, ''));
};

cm.is = function(str){
    if(cm.isUndefined(Com.UA)){
        cm.log('Error. UA.js is not exists or not loaded. Method "cm.is()" returns false.');
        return false;
    }
    return Com.UA.is(str);
};

cm.isVersion = function(){
    if(cm.isUndefined(Com.UA)){
        cm.log('Error. UA.js is not exists or not loaded. Method "cm.isVersion()" returns null.');
        return null;
    }
    return Com.UA.isVersion();
};

cm.isMobile = function(){
    if(cm.isUndefined(Com.UA)){
        cm.log('Error. UA.js is not exists or not loaded. Method "cm.isMobile()" returns false.');
        return false;
    }
    return Com.UA.isMobile();
};

cm.decode = (function(){
    var node;
    return function(text){
        if(!node){
            node = cm.node('textarea', {'class' : 'cm__textarea-clipboard'});
        }
        if(!cm.isEmpty(text)){
            node.innerHTML = text;
            return node.value;
        }else{
            return '';
        }

    };
})();

cm.copyToClipboard = function(text, callback){
    var node, successful;

    if(cm.isEmpty(text)){
        return;
    }

    node = cm.node('textarea');
    node.value = text;
    cm.appendChild(node, document.body);

    node.select();
    successful = document.execCommand( 'copy' );
    cm.remove(node);

    if(!successful){
        cm.errorLog({'type' : 'error', 'name' : 'cm.copyToClipboard', 'message' : 'Unable to copy text to clipboard!'});
    }
    cm.isFunction(callback) && callback(successful);
};

cm.share = function(data){
    try {
        navigator.share(data)
    } catch(err) {
        cm.errorLog({'type' : 'error', 'name' : 'cm.share', 'message' : 'Unable to share text!'});
    }
};

cm.RegExpEscape = function(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
};

cm.strWrap = function(str, symbol){
    str = str.toString();
    return ['', str, ''].join(symbol);
};

cm.strReplace = function(str, map){
    if(map && cm.isObject(map)){
        str = str.toString();
        cm.forEach(map, function(item, key){
            if(cm.isObject(item)){
                item = JSON.stringify(item);
            }
            str = str.replace(new RegExp(key, 'g'), item);
        });
    }
    return str;
};

cm.fillVariables = function(value, data, skipEmpty){
    var tests;
    skipEmpty = !cm.isUndefined(skipEmpty) ? skipEmpty : false;
    return value.replace(/[{%](\w.+?)[%}]/g, function(math, p1){
        tests = [
            cm.reducePath(p1, data),
            cm.reducePath('%' + p1 + '%', data),
            cm.reducePath('{' + p1 + '}', data),
            skipEmpty ? math : ''
        ];
        return tests.find(function(item){
            return !cm.isUndefined(item);
        });
    });
};

cm.reduceText = function(str, length, points){
    str = str.toString();
    points = cm.isUndefined(points) ? false : points;
    if(str.length > length){
        return str.slice(0, length) + ((points) ? '…' : '');
    }else{
        return str;
    }
};

cm.reduceTextSmart = function(str, length, points){
    if(str.length <= length){
        return str;
    }
    var split = str.split(/[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+/),
        newStr = '',
        testStr = '',
        i = 0;
    while(split[i] && testStr.length <= length){
        newStr = testStr;
        testStr += ' ' + split[i];
        i++;
    }
    if(!cm.isUndefined(points)){
        newStr += '…';
    }
    return newStr;
};

cm.removeDanger = function(str){
    return str.replace(/(<|>|&lt;|&gt;)/gim, '');
};

cm.removeSpaces = function(str){
    return str.replace(/[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+/g, '');
};

// https://doc.wikimedia.org/mediawiki-core/master/js/source/mediawiki.base.html#mw-html-method-escape
cm.escapeHTML = function(str){
    if (!cm.isString(str)) {
        return;
    }
    function escapeCallback(str){
        switch(str){
            case '\'':
                return '&#039;';
            case '"':
                return '&quot;';
            case '<':
                return '&lt;';
            case '>':
                return '&gt;';
            case '&':
                return '&amp;';
        }
    }

    return str.replace( /['"<>&]/g, escapeCallback );
};

cm.cutHTML = function(str){
    if (!cm.isString(str)) {
        return;
    }
    return str.replace(/<[^>]*>/g, '');
};

cm.splitNumber = function(str){
    return str.toString().replace(/(\d)(?=(\d\d\d)+([^\d]|$))/g, '$1 ');
};

cm.formatNumber = function(number, locale, params){
    locale = !cm.isEmpty(locale) ? locale : cm._locale;
    return new Intl.NumberFormat(locale, params).format(number);
};

cm.getPercentage = function(num, total){
    return num / total / 100;
};

cm.rand = function(min, max){
    return Math.floor(Math.random() * (max - min + 1)) + min;
};

cm.quid = function(pattern){
    pattern = !cm.isUndefined(pattern) ? pattern : '$';
    function generator(){
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }
    return pattern.replaceAll('$', generator);
};

cm.isEven = function(number){
    return !(number % 2);
};

cm.addLeadZero = function(x, count){
    count = !cm.isUndefined(count) ? count : 1;
    return x.toString().padStart(++count, '0');
};

cm.plural = cm.getNumberDeclension = function(number, titles /* ['найдена', 'найдено', 'найдены'] */){
    if(!cm.isArray(titles)){
        return titles;
    }
    var cases = [2, 0, 1, 1, 1, 2],
        i = (number % 100 > 4 && number % 100 < 20) ? 2 : cases[(number % 10 < 5) ? number % 10 : 5];
    return titles[i] || titles[i - 1] || titles[0];
};

cm.toRadians = function(degrees) {
    return degrees * Math.PI / 180;
};

cm.toDegrees = function(radians) {
    return radians * 180 / Math.PI;
};

/* ******* DATE AND TIME ******* */

cm.isDateValid = function(date){
    return (cm.isDate(date) && !isNaN(date.valueOf()));
};

cm.getCurrentDate = function(format){
    format = format || cm._config.dateTimeFormat;
    return cm.dateFormat(new Date(), format);
};

cm.dateFormat = function(date, format, langs, formatCase){
    if(cm.isDate(date)){
        date = new Date(+date);
    }else if(cm.isString(date) || cm.isNumber(date)){
        date = new Date(date);
    }
    if(isNaN(date)){
        date = null;
    }
    // Validate format
    format = cm.isString(format) ? format : cm._config.dateTimeFormat;
    formatCase = cm.isString(formatCase) ? formatCase : cm._config.dateFormatCase;
    // Validate language strings
    langs = cm.merge({
        'months' : cm._strings.months,
        'days' : cm._strings.days
    }, langs);
    // Validate language case
    if(cm.isObject(langs['months']) && langs['months'][formatCase]){
        langs['months'] = langs['months'][formatCase]
    }
    // Define format variables
    var convertFormats = {
        '%Y%' : '%Y',
        '%m%' : '%m',
        '%n%' : '%n',
        '%F%' : '%F',
        '%d%' : '%d',
        '%j%' : '%j',
        '%l%' : '%l',
        '%a%' : '%a',
        '%A%' : '%A',
        '%g%' : '%g',
        '%G%' : '%G',
        '%h%' : '%h',
        '%H%' : '%H',
        '%i%' : '%i',
        '%s%' : '%s'
    };
    var formats = function(date){
        return {
            '%Y' : function(){
                return date ? date.getFullYear() : '0000';
            },
            '%m' : function(){
                return date ? cm.addLeadZero(date.getMonth() + 1) : '00';
            },
            '%n' : function(){
                return date ? (date.getMonth() + 1) : '00';
            },
            '%F' : function(){
                return date ? langs['months'][date.getMonth()] : '00';
            },
            '%d' : function(){
                return date ? cm.addLeadZero(date.getDate()) : '00';
            },
            '%j' : function(){
                return date ? date.getDate() : '00';
            },
            '%l' : function(){
                return date ? langs['days'][date.getDay()] : '00';
            },
            '%a' : function(){
                return date ? (date.getHours() >= 12? 'pm' : 'am') : '';
            },
            '%A' : function(){
                return date ? (date.getHours() >= 12? 'PM' : 'AM') : '';
            },
            '%g' : function(){
                return date ? (date.getHours() % 12 || 12) : '00';
            },
            '%G' : function(){
                return date ? date.getHours() : '00';
            },
            '%h' : function(){
                return date ? cm.addLeadZero(date.getHours() % 12 || 12) : '00';
            },
            '%H' : function(){
                return date ? cm.addLeadZero(date.getHours()) : '00';
            },
            '%i' : function(){
                return date ? cm.addLeadZero(date.getMinutes()) : '00';
            },
            '%s' : function(){
                return date ? cm.addLeadZero(date.getSeconds()) : '00';
            },
            '%v' : function(){
                return date ? cm.addLeadZero(date.getMilliseconds(), 2) : '000';
            },
        };
    };
    format = cm.strReplace(format, convertFormats);
    format = cm.strReplace(format, formats(date));
    return format;
};

cm.parseDate = function(str, format){
    if(!str){
        return null;
    }
    var date = new Date(),
        convert = {
            '%Y%' : 'YYYY',
            '%m%' : 'mm',
            '%d%' : 'dd',
            '%H%' : 'HH',
            '%i%' : 'ii',
            '%s%' : 'ss',
            '%Y' : 'YYYY',
            '%m' : 'mm',
            '%d' : 'dd',
            '%h' : 'hh',
            '%H' : 'HH',
            '%i' : 'ii',
            '%s' : 'ss',
            '%v' : 'vvv',
            '$e' : 'e'
        },
        helpers = {
            'YYYY' : function(value){
                return (value !== '0000') ? value : date.getFullYear();
            },
            'mm' : function(value){
                return (value !== '00') ? value - 1 : date.getMonth();
            },
            'dd' : function(value){
                return (value !== '00') ? value : date.getDate();
            },
            'hh' : function(value){
                return value;
            },
            'HH' : function(value){
                return value;
            },
            'ii' : function(value){
                return value;
            },
            'ss' : function(value){
                return value;
            },
            'vv' : function(value){
                return value;
            },
            'e' : function(value){
                return value;
            }
        },
        parsed = {
            'YYYY' : '0000',
            'mm' : '00',
            'dd' : '00',
            'hh' : '00',
            'HH' : '00',
            'ii' : '00',
            'ss' : '00',
            'vvv' : '000',
            'e' : 'Z'
        },
        fromIndex = 0;
    format = cm.isString(format) ? format : cm._config.dateTimeFormat;
    format = cm.strReplace(format, convert);
    cm.forEach(helpers, function(item, key){
        fromIndex = format.indexOf(key);
        while(fromIndex !== -1){
            parsed[key] = item(str.substr(fromIndex, key.length));
            fromIndex = format.indexOf(key, fromIndex + 1);
        }
    });
    return new Date(parsed['YYYY'], parsed['mm'], parsed['dd'], parsed['HH'], parsed['ii'], parsed['ss'], parsed['vvv']);
};

cm.parseFormatDate = function(str, format, displayFormat, langs, formatCase){
    format = format || cm._config.dateFormat;
    displayFormat = displayFormat || cm._config.displayDateFormat;
    formatCase = formatCase|| cm._config.displayDateFormatCase;
    var date = cm.parseDate(str, format);
    return cm.dateFormat(date, displayFormat, langs, formatCase);
};

cm.parseFormatDateTime = function(str, format, displayFormat, langs, formatCase){
    format = format || cm._config.dateTimeFormat;
    displayFormat = displayFormat || cm._config.displayDateTimeFormat;
    formatCase = formatCase|| cm._config.displayDateFormatCase;
    var date = cm.parseDate(str, format);
    return cm.dateFormat(date, displayFormat, langs, formatCase);
};

cm.getWeek = function(date){
    var d = new Date();
    if(cm.isDate(date)){
        d = new Date(+date);
    }else if(cm.isString(date)){
        d = new Date(date);
    }
    d.setHours(0,0,0);
    d.setDate(d.getDate()+4-(d.getDay()||7));
    return Math.ceil((((d-new Date(d.getFullYear(),0,1))/8.64e7)+1)/7);
};

cm.getWeeksInYear = function(year){
    year = !year ? new Date().getFullYear() : year;
    var date = new Date(year, 11, 31),
        week = cm.getWeek(date);
    return week === 1 ? cm.getWeek(date.setDate(24)) : week;
};

/* ******* STYLES ******* */

cm.addClass = function(node, classes, useHack){
    if(!cm.isNode(node) || cm.isEmpty(classes)){
        return;
    }
    if(useHack){
        useHack = node.clientHeight;
    }
    if(cm.isString(classes) || cm.isNumber(classes)){
        classes = classes.toString().split(/\s+/);
    }
    cm.forEach(classes, function(item){
        if(!cm.isEmpty(item)){
            node.classList.add(item);
        }
    });
    return node;
};

cm.removeClass = function(node, classes, useHack){
    if(!cm.isNode(node) || cm.isEmpty(classes)){
        return;
    }
    if(useHack){
        useHack = node.clientHeight;
    }
    if(cm.isString(classes) || cm.isNumber(classes)){
        classes = classes.toString().split(/\s+/);
    }
    cm.forEach(classes, function(item){
        if(!cm.isEmpty(item)){
            node.classList.remove(item);
        }
    });
    return node;
};

cm.toggleClass = function(node, classes, value) {
    if(!cm.isNode(node)){
        return null;
    }
    if(value){
        return cm.addClass(node, classes);
    }
    return cm.removeClass(node, classes);
};

cm.replaceClass = function(node, oldClass, newClass, useHack){
    if(!cm.isNode(node)){
        return null;
    }
    return cm.addClass(cm.removeClass(node, oldClass, useHack), newClass, useHack);
};

cm.clearClass = function(node){
    if(!cm.isNode(node)){
        return null;
    }
    var classes = node.classList;
    while (classes.length > 0) {
        classes.remove(classes.item(0));
    }
    return node;
};

cm.hasClass = cm.isClass = function(node, cssClass){
    var classes;
    if(!cm.isNode(node)){
        return false;
    }
    return node.classList.contains(cssClass);
};

cm.getPageSize = function(key){
    var d = document,
        de = d.documentElement,
        b = d.body,
        o = {
            'height' : Math.max(
                Math.max(b.scrollHeight, de.scrollHeight),
                Math.max(b.offsetHeight, de.offsetHeight),
                Math.max(b.clientHeight, de.clientHeight)
            ),
            'width' : Math.max(
                Math.max(b.scrollWidth, de.scrollWidth),
                Math.max(b.offsetWidth, de.offsetWidth),
                Math.max(b.clientWidth, de.clientWidth)
            ),
            'winHeight' : de.clientHeight,
            'winWidth' : de.clientWidth
        };
    o['scrollTop'] = cm.getBodyScrollTop();
    o['scrollLeft'] = cm.getBodyScrollLeft();
    o['scrollHeight'] = o['height'] - o['winHeight'];
    o['scrollWidth'] = o['width'] - o['winWidth'];
    return o[key] || o;
};

cm.getScrollBarSize = (function(){
    var node;
    return function(){
        if(!node){
            node = cm.node('div', {'class' : 'cm__scrollbar-size-checker', 'aria-hidden' : true});
            cm.insertFirst(node, document.body);
        }
        return Math.max(node.offsetWidth - node.clientWidth, 0);
    };
})();

cm.setOpacity = function(node, value){
    if(cm.isNode(node)){
        node.style.opacity = value;
    }
    return node;
};

cm.getX = function(o){
    var x = 0,
        p = o;
    try{
        while(p){
            x += p.offsetLeft;
            if(p !== o){
                x += cm.getStyle(p, 'borderLeftWidth', true) || 0;
            }
            p = p.offsetParent;
        }
    }catch(e){
        return x;
    }
    return x;
};

cm.getY = function(o){
    var y = 0,
        p = o;
    try{
        while(p){
            y += p.offsetTop;
            if(p !== o){
                y += cm.getStyle(p, 'borderTopWidth', true) || 0;
            }
            p = p.offsetParent;
        }
    }catch(e){
        return y;
    }
    return y;
};

cm.getRealX = function(node){
    if(cm.isNode(node)){
        return node.getBoundingClientRect()['left'];
    }
    return 0;
};

cm.getRealY = function(node){
    if(cm.isNode(node)){
        return node.getBoundingClientRect()['top'];
    }
    return 0;
};

cm.getRect = function(node){
    var docEl, o, rect;
    if(cm.isWindow(node)){
        docEl = node.document.documentElement;
        return {
            'top' : 0,
            'right' : docEl.clientWidth,
            'bottom' : docEl.clientHeight,
            'left' : 0,
            'width' : docEl.clientWidth,
            'height' : docEl.clientHeight
        };
    }
    if(cm.isNode(node)){
        o = node.getBoundingClientRect();
        rect = {
            'top' : Math.round(o['top']),
            'right' : Math.round(o['right']),
            'bottom' : Math.round(o['bottom']),
            'left' : Math.round(o['left'])
        };
        rect['width'] = !cm.isUndefined(o['width']) ? Math.round(o['width']) : o['right'] - o['left'];
        rect['height'] = !cm.isUndefined(o['height']) ? Math.round(o['height']) : o['bottom'] - o['top'];
        return rect;
    }
    return {
        'top' : 0,
        'right' : 0,
        'bottom' : 0,
        'left' : 0,
        'width' : 0,
        'height' : 0
    };
};

cm.getOffsetRect = function(node){
    var rect = cm.getRect(node),
        topOffset = cm.getBodyScrollTop(),
        leftOffset = cm.getBodyScrollLeft();
    rect.offset = {
        'top' : rect.top + topOffset,
        'right' : rect.right +  leftOffset,
        'bottom' : rect.bottom +  topOffset,
        'left' : rect.left + leftOffset
    }
    return rect;
};

cm.getFullRect = function(node, styleObject){
    if(!cm.isNode(node)){
        return null;
    }
    var dimensions = {};
    styleObject = cm.isUndefined(styleObject) ? cm.getStyleObject(node) : styleObject;
    // Get size and position
    dimensions['width'] = node.offsetWidth;
    dimensions['height'] = node.offsetHeight;
    dimensions['x1'] = cm.getRealX(node);
    dimensions['y1'] = cm.getRealY(node);
    dimensions['x2'] = dimensions['x1'] + dimensions['width'];
    dimensions['y2'] = dimensions['y1'] + dimensions['height'];
    // Calculate Padding and Inner Dimensions
    dimensions['padding'] = {
        'top' :     cm.getCSSStyle(styleObject, 'paddingTop', true),
        'right' :   cm.getCSSStyle(styleObject, 'paddingRight', true),
        'bottom' :  cm.getCSSStyle(styleObject, 'paddingBottom', true),
        'left' :    cm.getCSSStyle(styleObject, 'paddingLeft', true)
    };
    dimensions['innerWidth'] = dimensions['width'] - dimensions['padding']['left'] - dimensions['padding']['right'];
    dimensions['innerHeight'] = dimensions['height'] - dimensions['padding']['top'] - dimensions['padding']['bottom'];
    dimensions['innerX1'] = dimensions['x1'] + dimensions['padding']['left'];
    dimensions['innerY1'] = dimensions['y1'] + dimensions['padding']['top'];
    dimensions['innerX2'] = dimensions['innerX1'] + dimensions['innerWidth'];
    dimensions['innerY2'] = dimensions['innerY1'] + dimensions['innerHeight'];
    // Calculate Margin and Absolute Dimensions
    dimensions['margin'] = {
        'top' :     cm.getCSSStyle(styleObject, 'marginTop', true),
        'right' :   cm.getCSSStyle(styleObject, 'marginRight', true),
        'bottom' :  cm.getCSSStyle(styleObject, 'marginBottom', true),
        'left' :    cm.getCSSStyle(styleObject, 'marginLeft', true)
    };
    dimensions['absoluteWidth'] = dimensions['width'] + dimensions['margin']['left'] + dimensions['margin']['right'];
    dimensions['absoluteHeight'] = dimensions['height'] + dimensions['margin']['top'] + dimensions['margin']['bottom'];
    dimensions['absoluteX1'] = dimensions['x1'] - dimensions['margin']['left'];
    dimensions['absoluteY1'] = dimensions['y1'] - dimensions['margin']['top'];
    dimensions['absoluteX2'] = dimensions['x2'] + dimensions['margin']['right'];
    dimensions['absoluteY2'] = dimensions['y2'] + dimensions['margin']['bottom'];
    return dimensions;
};

cm.getNodeIndents = function(node, styleObject){
    if(!cm.isNode(node)){
        return null;
    }
    styleObject = cm.isUndefined(styleObject) ? cm.getStyleObject(node) : styleObject;
    // Get size and position
    var o = {};
    o['margin'] = {
        'top' :     cm.getCSSStyle(styleObject, 'marginTop', true),
        'right' :   cm.getCSSStyle(styleObject, 'marginRight', true),
        'bottom' :  cm.getCSSStyle(styleObject, 'marginBottom', true),
        'left' :    cm.getCSSStyle(styleObject, 'marginLeft', true)
    };
    o['padding'] = {
        'top' :     cm.getCSSStyle(styleObject, 'paddingTop', true),
        'right' :   cm.getCSSStyle(styleObject, 'paddingRight', true),
        'bottom' :  cm.getCSSStyle(styleObject, 'paddingBottom', true),
        'left' :    cm.getCSSStyle(styleObject, 'paddingLeft', true)
    };
    return o;
};

cm.getNodeOffset = function(node, styleObject, o, offsets){
    if(!cm.isNode(node)){
        return null;
    }
    styleObject = cm.isUndefined(styleObject) ? cm.getStyleObject(node) : styleObject;
    o = cm.isUndefined(o) ? cm.getNodeIndents(node, styleObject) : o;
    // Get size and position
    o['offset'] = cm.getRect(node);
    if(offsets){
        o['offset']['top'] += offsets['top'];
        o['offset']['right'] += offsets['left'];
        o['offset']['bottom'] += offsets['top'];
        o['offset']['left'] += offsets['left'];
    }
    o['inner'] = {
        'width' : o['offset']['width'] - o['padding']['left'] - o['padding']['right'],
        'height' : o['offset']['height'] - o['padding']['top'] - o['padding']['bottom'],
        'top' : o['offset']['top'] + o['padding']['top'],
        'right' : o['offset']['right'] - o['padding']['right'],
        'bottom' : o['offset']['bottom'] - o['padding']['bottom'],
        'left': o['offset']['left'] + o['padding']['left']
    };
    o['outer'] = {
        'width' : o['offset']['width'] + o['margin']['left'] + o['margin']['right'],
        'height' : o['offset']['height'] + o['margin']['top'] + o['margin']['bottom'],
        'top' : o['offset']['top'] - o['margin']['top'],
        'right' : o['offset']['right'] + o['margin']['right'],
        'bottom' : o['offset']['bottom'] + o['margin']['bottom'],
        'left': o['offset']['left'] - o['margin']['left']
    };
    return o;
};

cm.getRealWidth = function(node, applyWidth){
    var nodeWidth = 0,
        width = 0;
    nodeWidth = node.offsetWidth;
    node.style.width = 'auto';
    width = node.offsetWidth;
    node.style.width = cm.isUndefined(applyWidth) ? [nodeWidth, 'px'].join('') : applyWidth;
    return width;
};

cm.getRealHeight = function(node, type, applyType){
    var types = ['self', 'current', 'offset', 'offsetRelative'],
        height = {},
        styles,
        styleObject;
    // Check parameters
    if(!node || !cm.isNode(node)){
        return 0;
    }
    styleObject = cm.getStyleObject(node);
    type = cm.isUndefined(type) || !cm.inArray(types, type)? 'offset' : type;
    applyType = cm.isUndefined(applyType) || !cm.inArray(types, applyType) ? false : applyType;
    cm.forEach(types, function(type){
        height[type] = 0;
    });
    // Get inline styles
    styles = {
        'display': node.style.display,
        'height': node.style.height,
        'position' : node.style.position
    };
    node.style.display = 'block';
    height['current'] = node.offsetHeight;
    node.style.height = 'auto';

    height['offset'] = node.offsetHeight;
    height['self'] = height['offset']
        - cm.getStyle(styleObject, 'borderTopWidth', true)
        - cm.getStyle(styleObject, 'borderBottomWidth', true)
        - cm.getStyle(styleObject, 'paddingTop', true)
        - cm.getStyle(styleObject, 'paddingBottom', true);

    node.style.position = 'relative';
    height['offsetRelative'] = node.offsetHeight;
    // Set default styles
    node.style.display = styles['display'];
    node.style.height = styles['height'];
    node.style.position = styles['position'];
    if(applyType){
        node.style.height = [height[applyType], 'px'].join('');
    }
    return height[type];
};

cm.getIndentX = function(node){
    if(!node){
        return null;
    }
    return cm.getStyle(node, 'paddingLeft', true)
        + cm.getStyle(node, 'paddingRight', true)
        + cm.getStyle(node, 'borderLeftWidth', true)
        + cm.getStyle(node, 'borderRightWidth', true);
};

cm.getIndentY = function(node){
    if(!node){
        return null;
    }
    return cm.getStyle(node, 'paddingTop', true)
        + cm.getStyle(node, 'paddingBottom', true)
        + cm.getStyle(node, 'borderTopWidth', true)
        + cm.getStyle(node, 'borderBottomWidth', true);
};

cm.addStyles = function(node, data){
    if(!cm.isNode(node)){
        return;
    }
    if(cm.isObject(data)){
        cm.forEach(data, function(value, key){
            node.style[key] = value;
        });
    }else{
        node.style.cssText = data;
    }
    return node;
};

cm.getStyleObject = (function(){
    if(window.getComputedStyle){
        return function(node){
            return document.defaultView.getComputedStyle(node, null);
        };
    }else{
        return function(node){
            return node.currentStyle;
        };
    }
})();

cm.getCSSStyle = cm.getStyle = function(node, name, number){
    var obj, raw, data;
    if(cm.isNode(node)){
        obj = cm.getStyleObject(node);
    }else{
        obj = node;
    }
    if(!obj){
        return 0;
    }
    raw = obj[name];
    // Parse
    if(number){
        data = cm.styleToNumber(raw);
    }else{
        data = raw;
    }
    return data;
};

cm.getCurrentStyle = function(obj, name, dimension){
    switch(name){
        case 'width':
        case 'height':
        case 'top':
        case 'left':
            var Name = name.charAt(0).toUpperCase() + name.substr(1, name.length - 1);
            if(dimension === '%' && !obj.style[name].match(/%/)){
                var el = (/body/i.test(obj.parentNode.tagName) || /top|left/i.test(Name)) ? 'client' : 'offset';
                var pv = (/width|left/i.test(Name)) ? obj.parentNode[el + 'Width'] : obj.parentNode[el + 'Height'];
                return 100 * ( obj['offset' + Name] / pv );
            }else if(dimension === '%' && /%/.test(obj.style[name])){
                var display = obj.style.display;
                obj.style.display = 'none';
                var style = cm.getCSSStyle(obj, name, true) || 0;
                obj.style.display = display;
                return style;
            }else if(dimension === 'px' && /px/.test(obj.style[name])){
                return cm.getCSSStyle(obj, name, true) || 0;
            }
            return obj['offset' + Name];

        case 'opacity':
            var val = parseFloat(obj.style.opacity || cm.getCSSStyle(obj, 'opacity'));
            return (!isNaN(val)) ? val : 1;

        case 'color':
        case 'backgroundColor':
        case 'borderColor':
            var val = cm.getCSSStyle(obj, name);
            if(val.match(/rgb/i)){
                return val = val.match(/\d+/g), [parseInt(val[0]), parseInt(val[1]), parseInt(val[2])];
            }
            return cm.hex2rgb(val.match(/[\w\d]+/)[0]);

        case 'docScrollTop':
            return cm.getBodyScrollTop();

        case 'scrollLeft':
        case 'scrollTop':
            return obj[name];

        case 'x1':
        case 'x2':
        case 'y1':
        case 'y2':
            return parseInt(obj.getAttribute(name));

        default:
            return cm.getCSSStyle(obj, name, true) || 0;
    }
};

cm.getStyleDimension = function(value){
    var pure = value.toString().match(/\d+(\D*)/);
    return pure ? pure[1] : '';
};

cm.styleToNumber = function(data){
    data = parseFloat(data.toString().replace(/(pt|px|%)/g, ''));
    data = isNaN(data)? 0 : data;
    return data;
};

cm.hex2rgb = function(hex){
    return(function(v){
        return [v >> 16 & 255, v >> 8 & 255, v & 255];
    })(parseInt(hex, 16));
};

cm.rgb2hex = function(r, g, b){
    var rgb = [r, g, b];
    for(var i in rgb){
        rgb[i] = Number(rgb[i]).toString(16);
        if(rgb[i] == '0'){
            rgb[i] = '00';
        }else if(rgb[i].length === 1){
            rgb[i] = '0' + rgb[i];
        }
    }
    return '#' + rgb.join('');
};

cm.styleStrToKey = function(line){
    line = line.replace(/\s/g, '');
    if(line === 'float'){
        line = ['cssFloat', 'styleFloat'];
    }else if(line.match('-')){
        var st = line.split('-');
        line = st[0] + st[1].replace(st[1].charAt(0), st[1].charAt(0).toUpperCase());
    }
    return line;
};

cm.getScrollTop = function(node){
    if(cm.isWindow(node)){
        return cm.getBodyScrollTop();
    }
    if(cm.isNode(node)){
        if(/body|html/gi.test(node.tagName)){
            return cm.getBodyScrollTop();
        }
        return node.scrollTop;
    }
    return 0;
};

cm.getScrollLeft = function(node){
    if(cm.isWindow(node)){
        return cm.getBodyScrollLeft();
    }
    if(cm.isNode(node)){
        if(/body|html/gi.test(node.tagName)){
            return cm.getBodyScrollLeft();
        }
        return node.scrollLeft;
    }
    return 0;
};

cm.setScrollTop = function(node, num){
    if(cm.isWindow(node)){
        cm.setBodyScrollTop(num);
    }else if(cm.isNode(node)){
        if(/body|html/gi.test(node.tagName)){
            cm.setBodyScrollTop(num);
        }else{
            node.scrollTop = num;
        }
    }
    return node;
};

cm.setScrollLeft = function(node, num){
    if(cm.isWindow(node)){
        cm.setBodyScrollLeft(num);
    }else if(cm.isNode(node)){
        if(/body|html/gi.test(node.tagName)){
            cm.setBodyScrollLeft(num);
        }else{
            node.scrollLeft = num;
        }
    }
    return node;
};

cm.getScrollHeight = function(node){
    if(cm.isWindow(node)){
        return cm.getBodyScrollHeight();
    }
    if(cm.isNode(node)){
        if(/body|html/gi.test(node.tagName)){
            return cm.getBodyScrollHeight();
        }
        return node.scrollHeight;
    }
    return 0;
};

cm.getScrollOffsetHeight = function(node){
    if(cm.isWindow(node)){
        return cm._pageSize['winHeight'];
    }
    if(cm.isNode(node)){
        if(/body|html/gi.test(node.tagName)){
            return cm._pageSize['winHeight'];
        }
        return node.offsetHeight;
    }
    return 0;
};

cm.getScrollTopMax = function(node){
    if(cm.isWindow(node)){
        return cm.getBodyScrollMaxTop();
    }
    if(cm.isNode(node)){
        if(/body|html/gi.test(node.tagName)){
            return cm.getBodyScrollMaxTop();
        }
        return node.scrollHeight - node.offsetHeight;
    }
    return 0;
};

cm.setBodyScrollTop = function(num){
    document.documentElement.scrollTop = num;
    document.body.scrollTop = num;
};

cm.setBodyScrollLeft = function(num){
    document.documentElement.scrollLeft = num;
    document.body.scrollLeft = num;
};

cm.getBodyScrollTop = function(){
    return Math.max(
        document.documentElement.scrollTop,
        document.body.scrollTop,
        window.scrollY,
        0
    );
};

cm.getBodyScrollLeft = function(){
    return Math.max(
        document.documentElement.scrollLeft,
        document.body.scrollLeft,
        window.scrollX,
        0
    );
};

cm.getBodyScrollWidth = function(){
    return Math.max(
        document.documentElement.scrollWidth,
        document.body.scrollWidth,
        0
    );
};

cm.getBodyScrollHeight = function(){
    return Math.max(
        document.documentElement.scrollHeight,
        document.body.scrollHeight,
        0
    );
};

cm.getBodyScrollMaxTop = function(){
    return cm.getBodyScrollHeight() - cm._pageSize['winHeight'];
};

cm.showBodyScroll = function(){
    cm.removeClass(cm.getDocumentHtml(), 'cm__scroll--none');
};

cm.hideBodyScroll = function(){
    var scrollTop = cm.getBodyScrollTop();
    cm.addClass(cm.getDocumentHtml(), 'cm__scroll--none');
    cm.setBodyScrollTop(scrollTop);
};

cm.bodyScroll = (function(){
    var stack = [];

    return {
        add: function(node) {
            if (!cm.isNode(node)) {
                return;
            }
            cm.arrayAdd(stack, node);
            cm.bodyScroll.hide();
        },
        remove: function(node) {
            if (!cm.isNode(node)) {
                return;
            }
            cm.arrayRemove(stack, node);
            cm.bodyScroll.show();
        },
        show: function() {
            if (!cm.isEmpty(stack)) {
                return;
            }
            cm.showBodyScroll();
        },
        hide: function() {
            if (cm.isEmpty(stack)) {
                return;
            }
            cm.hideBodyScroll();
        },
    };
})();

cm.scrollTo = function(node, parent, params, callback){
    if(!cm.isNode(node)){
        return null;
    }
    // If parent didn't specify - scroll the window
    parent = !cm.isUndefined(parent) ? parent : window;
    // Variables
    var parentNode = cm.isWindow(parent) ? cm.getDocumentHtml() : parent,
        scrollHeight = cm.getScrollHeight(parentNode),
        scrollOffsetHeight = cm.getScrollOffsetHeight(parentNode),
        scrollMax = cm.getScrollTopMax(parentNode);
    // Do not process when parent scroll's height match parent's offset height
    if(scrollHeight === scrollOffsetHeight){
        return node;
    }
    // Validate
    params = cm.merge({
        'type' : 'auto',
        'behavior' : 'smooth',
        'block' : 'start',
        'top' : 'auto',
        'scrollPadding' : 'auto',
        'duration' : cm._config.animDuration,
        'callback' : cm.isFunction(callback) ? callback : function(){},
    }, params);
    // Check type
    if(params['type'] === 'auto'){
        params['type'] = (cm.isWindow(parent) || parent === document.body) ? 'docScrollTop' : 'scrollTop';
    }
    // Calculate top value
    if(params['top'] === 'auto'){
        var scrollPadding = 0;
        if (params['scrollPadding'] === 'auto') {
            scrollPadding = cm.getStyle(parentNode, 'scroll-padding-top', true) || 0;
        } else if (cm.isNumber(params['scrollPadding'])) {
            scrollPadding = params['scrollPadding'];
        }
        var nodeOffsetTop = (params['type'] === 'docScrollTop' ? cm.getY(node) : node.offsetTop) - scrollPadding;
        switch(params['block']){
            case 'end':
                params['top'] = Math.max(Math.min(nodeOffsetTop + node.offsetHeight, scrollMax), 0);
                break;

            case 'center':
                params['top'] = Math.max(Math.min(nodeOffsetTop - ((scrollOffsetHeight - node.offsetHeight) / 2), scrollMax), 0);
                break;

            case 'start':
            default:
                params['top'] = Math.max(Math.min(nodeOffsetTop, scrollMax), 0);
                break;
        }
    }
    // Animate
    if(params['behavior'] === 'instant'){
        cm.setScrollTop(parent, params['top']);
        params['callback']();
    }else{
        var scrollAnimation = new cm.Animation(parent);
        scrollAnimation.go({
            'anim' : params['behavior'],
            'duration' : params['duration'],
            'onStop' : params['callback'],
            'style' : {
                [params['type']]: params['top']
            },
        });
    }
    return node;
};

cm.getSupportedStyle = (function(){
    var node = document.createElement('div');

    return function(style){
        var upper = cm.styleStrToKey(style).replace(style.charAt(0), style.charAt(0).toUpperCase()),
            styles = [
                cm.styleStrToKey(style),
                ['Webkit', upper].join(''),
                ['Moz', upper].join(''),
                ['O', upper].join(''),
                ['ms', upper].join('')
            ];
        style = false;
        cm.forEach(styles, function(item){
            if(!cm.isUndefined(node.style[item]) && !style){
                style = item;
            }
        });
        return style;
    }
})();

cm.getTransitionDurationFromRule = function(rule){
    var openDurationRule = cm.getCSSRule(null, rule)[0],
        openDurationProperty;
    if(
        openDurationRule
        && (openDurationProperty = openDurationRule.style[cm.getSupportedStyle('transitionDuration')])
    ){
        return cm.parseTransitionDuration(openDurationProperty);
    }
    return 0;
};

cm.getTransitionDurationFromLESS = function(name, defaults){
    var variable = cm.getLESSVariable(name, defaults, false);
    return cm.parseTransitionDuration(variable);
};

cm.parseTransitionDuration = function(value){
    if(!cm.isEmpty(value)){
        value = value.toString();
        if(value.match('ms')){
            return parseFloat(value);
        }else if(value.match('s')){
            return (value) / 1000;
        }else{
            return parseFloat(value);
        }
    }
    return 0;
};

cm.getLESSVariable = function(name, defaults, parse){
    name = name.replace(/^@/, '');
    var variable = window.LESS && window.LESS[name] ? window.LESS[name] : defaults;
    return parse ? cm.styleToNumber(variable) : variable;
};

cm.createStyleSheet = function(){
    var style = document.createElement('style');
    // Fix for WebKit
    style.appendChild(document.createTextNode(''));
    document.head.appendChild(style);
    return style.sheet;
};

cm.createCSStyleSheet = function(options, container){
    var sheet = new CSSStyleSheet(options);
    if (cm.isNode(container)) {
        var shadow = container.attachShadow({ mode: 'open' });
        shadow.adoptedStyleSheets = [sheet];
    } else {
        document.adoptedStyleSheets = cm.extend(document.adoptedStyleSheets, [sheet]);
    }
    return sheet;
};

cm.removeCSStyleSheet = function(sheet, container){
    if(!sheet){
        return;
    }
    cm.replaceCSSRule(sheet);
    document.adoptedStyleSheets = cm.arrayRemove(document.adoptedStyleSheets, sheet);
};

cm.getCSSRule = function(sheet, selector){
    var matchedRules = [];
    if (cm.isUndefined(sheet)) {
        cm.forEach(document.styleSheets, function(sheet) {
            cm.forEach(sheet.cssRules, function(rule) {
                if(rule.selectorText === selector){
                    matchedRules.push(rule);
                }
            });
        });
    } else {
        cm.forEach(sheet.cssRules, function(rule) {
            if(rule.selectorText === selector){
                matchedRules.push(rule);
            }
        });
    }
    return matchedRules;
};

cm.reduceCSSRule = function(selector, rules) {
    rules = !cm.isUndefined(rules) ? rules : [];
    if(cm.isObject(rules)){
        rules = Object.keys(rules).map(function(key){
            return [key, rules[key]].join(':');
        });
    }
    if(cm.isArray(rules)){
        rules = rules.join(';');
    }
    return selector + '{' + rules + '}';
};

cm.addCSSRule = function(sheet, selector, rules, index){
    sheet = !cm.isUndefined(sheet) ? sheet : document.styleSheets[0];
    sheet.insertRule(cm.reduceCSSRule(selector, rules), index);
};

cm.replaceCSSRule = function(sheet, selector, rules, async){
    if(!sheet){
        return;
    }
    async = !cm.isUndefined(async) ? async : false;
    var text = !cm.isEmpty(selector) ? cm.reduceCSSRule(selector, rules) : '';
    if (async) {
        return sheet.replace(text);
    } else {
        sheet.replaceSync(text);
    }
};

cm.removeCSSRule = function(sheet, selector, index){
    if (!cm.isUndefined(sheet)) {
        if (!cm.isEmpty(index)) {
            sheet.deleteRule(index);
        } else {
            cm.forEach(sheet.cssRules, function(rule, i) {
                if (rule.selectorText === selector) {
                    sheet.deleteRule(i);
                }
            });
        }
    } else {
        cm.forEach(document.styleSheets, function(sheet) {
            cm.forEach(sheet.cssRules, function(rule, i) {
                if (rule.selectorText === selector) {
                    sheet.deleteRule(i);
                }
            });
        });
    }
};

cm.setCSSTranslate = (function(){
    var transform = cm.getSupportedStyle('transform');
    if(transform){
        return function(node, x, y, z, additional){
            x = !cm.isUndefined(x) && x !== 'auto' ? x : 0;
            y = !cm.isUndefined(y) && y !== 'auto' ? y : 0;
            z = !cm.isUndefined(z) && z !== 'auto' ? z : 0;
            additional = !cm.isUndefined(additional) ? additional : '';
            node.style[transform] = ['translate3d(', x, ',', y, ',', z,')', additional].join(' ');
            return node;
        };
    }else{
        return function(node, x, y, z, additional){
            x = !cm.isUndefined(x) ? x : 0;
            y = !cm.isUndefined(y) ? y : 0;
            node.style.left = x;
            node.style.top = y;
            return node;
        };
    }
})();

cm.clearCSSTranslate = (function(){
    var transform = cm.getSupportedStyle('transform');
    if(transform){
        return function(node){
            node.style[transform] = '';
        }
    }else{
        return function(node){
            node.style.left = '';
            node.style.top = '';
        }
    }
})();

cm.setCSSTransitionDuration = (function(){
    var rule = cm.getSupportedStyle('transition-duration');

    return function(node, time){
        if(!rule){
            return node;
        }
        if(cm.isNumber(time)){
            time = [time, 'ms'].join('');
        }
        node.style[rule] = time;
        return node;
    };
})();

cm.inRange = function(a1, b1, a2, b2){
    return a1 >= a2 && a1 <= b2 || b1 >= a2 && b1 <= b2 || a2 >= a1 && a2 <= b1;
};

cm.CSSValuesToArray = function(value){
    if(cm.isEmpty(value)){
        return [0, 0, 0, 0];
    }
    value = value.toString().replace(/[^\d\s-]/g , '').split(/\s+/);
    cm.forEach(value, function(item, key){
        value[key] = cm.isEmpty(item) ? 0 : parseFloat(item);
    });
    switch(value.length){
        case 0:
            value = [0, 0, 0, 0];
            break;
        case 1:
            value = [value[0], value[0], value[0], value[0]];
            break;
        case 2:
            value = [value[0], value[1], value[0], value[1]];
            break;
        case 3:
            value = [value[0], value[1], value[2], value[1]];
            break;
    }
    return value;
};

cm.arrayToCSSValues = function(a, units){
    var value;
    units = !cm.isUndefined(units) ? units : 'px';
    cm.forEach(a, function(item, key){
        value = cm.isEmpty(item) ? 0 : parseFloat(item);
        value = isNaN(value) ? 0 : value;
        a[key] = value;
    });
    return a.reduce(function(prev, next, index, a){
        return [prev + units, next + ((index === a.length - 1) ? units : '')].join(' ');
    });
};

cm.URLToCSSURL = function(url){
    return !cm.isEmpty(url) ? 'url("' + url + '")' : 'none';
};

cm.setCSSVariable = function(key, value, node){
    node = !cm.isUndefined(node) ? node : document.documentElement;
    if(cm.isNode(node)){
        node.style.setProperty(key, value);
    }
    return node;
};

cm.getCSSVariable = function(key, node){
    node = !cm.isUndefined(node) ? node : document.documentElement;
    if(cm.isNode(node)){
        var styleObject = cm.getStyleObject(node);
        return styleObject.getPropertyValue(key);
    }
};

cm.removeCSSVariable = function(key, node){
    node = !cm.isUndefined(node) ? node : document.documentElement;
    if(cm.isNode(node)){
        node.style.removeProperty(key);
    }
};

/* ******* VALIDATORS ******* */

cm.keyCodeTable = {
    8  : 'delete',
    9  : 'tab',
    13 : 'enter',
    27 : 'escape',
    32 : 'space',
    35 : 'home',
    36 : 'end',
    37 : 'left',
    38 : 'top',
    39 : 'right',
    40 : 'bottom',
    46 : 'backspace'
};

cm.isKey = function(e, rules){
    var keyCode = e.keyCode;
    return cm.isKeyCode(keyCode, rules);
};

cm.isKeyCode = function(code, rules){
    var isMath = false;
    if(cm.isString(rules)){
        rules = rules.split(/\s+/);
    }
    cm.forEach(rules, function(rule){
        if(cm.keyCodeTable[code] === rule){
            isMath = true;
        }
    });
    return isMath;
};

cm.handleKey = function(e, rules, callback){
    if(!cm.isInputFocused() && cm.isKey(e, rules)){
        callback && callback(e);
    }
};

cm.isNotToggleKey = function(event) {
    return event.type === 'keypress' && !['Enter', 'Space'].includes(event.code);
};

cm.isLinkClick = function(e){
    return !(e.button || e.metaKey || e.ctrlKey);
};

cm.isInputFocused = function(){
    var el = document.activeElement,
        tagName = el.tagName.toLowerCase();
    return tagName === 'textarea' || (tagName === 'input' &&  !/button|file/.test(el.type));
};

cm.isFormInputFocused = function(){
    var el = document.activeElement,
        tagName = el.tagName.toLowerCase();
    return tagName === 'input' &&  !/button|file/.test(el.type);
};

cm.allowKeyCode = function(code, rules){
    var codes = [];
    cm.forEach(cm.keyCodeTable, function(item, key){
        if(cm.inArray(rules, item)){
            codes.push(key);
        }
    });
    return cm.inArray(codes, code.toString());
};

cm.disallowKeyCode = function(code, rules){
    var codes = [];
    cm.forEach(cm.keyCodeTable, function(item, key){
        if(!cm.inArray(rules, item)){
            codes.push(key);
        }
    });
    return cm.inArray(codes, code.toString());
};

cm.charCodeIsDigit = function(code){
    var codeString = String.fromCharCode(code);
    return /^\d$/.test(codeString);
};

cm.allowOnlyDigitInputEvent = function(input, callback){
    return cm.allowOnlyNumbersInputEvent(input, callback, {'allowNegative' : false, 'allowFloat' : false});
};

cm.allowOnlyNumbersInputEvent = function(input, callback, params){
    var regexp, value, isMaxlength, isMax;
    // Validate
    params = cm.merge({
        'allowNegative' : false,
        'allowFloat' : false
    }, params);
    if(params['allowNegative'] && params['allowFloat']){
        regexp = /[^\d-.]/g;
    }else if(params['allowNegative']){
        regexp = /[^\d-]/g;
    }else if(params['allowFloat']){
        regexp = /[^\d.]/g;
    }else{
        regexp = /[^\d]/g;
    }
    // Add events
    cm.addEvent(input, 'input', function(e){
        value = input.value.replace(regexp, '');
        isMaxlength = !cm.isEmpty(input.maxlength) && input.maxlength > 0;
        isMax = !cm.isEmpty(input.max) && input.max > 0;
        if(isMaxlength || isMax){
            if(input.type === 'number'){
                input.value = Math.min(parseFloat(value), parseFloat(input.max));
            }else{
                input.value = cm.reduceText(value, parseFloat(input.maxlength));
            }
        }else{
            input.value = value;
        }
        callback && callback(e, input.value);
    });
    return input;
};

/* ******* ANIMATION ******* */

var animFrame = (function(){
    return  window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.oRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            function(callback, element){
                return window.setTimeout(callback, 1000 / 60);
            };
})();

cm.Animation = function(o){
    var that = this,
        obj = o,
        processes = [],
        animationMethod = {
            'random' : function(progress){
                return (function(min, max){
                    return Math.random() * (max - min) + min;
                })(progress, 1);
            },
            'simple' : function(progress){
                return progress;
            },
            'acceleration' : function(progress){
                return Math.pow(progress, 3);
            },
            'inhibition' : function(progress){
                return 1 - animationMethod.acceleration(1 - progress);
            },
            'smooth' : function(progress){
                return (progress < 0.5) ? animationMethod.acceleration(2 * progress) / 2 : 1 - animationMethod.acceleration(2 * (1 - progress)) / 2;
            }
        };

    var setProperties = function(progress, delta, properties, duration){
        if(progress <= 1){
            properties.forEach(function(item){
                var val = item['old'] + (item['new'] - item['old']) * delta(progress);

                if(item['name'] === 'opacity'){
                    cm.setOpacity(obj, val);
                }else if(/color/i.test(item['name'])){
                    var r = parseInt((item['new'][0] - item['old'][0]) * delta(progress) + item['old'][0]);
                    var g = parseInt((item['new'][1] - item['old'][1]) * delta(progress) + item['old'][1]);
                    var b = parseInt((item['new'][2] - item['old'][2]) * delta(progress) + item['old'][2]);
                    obj.style[properties[i]['name']] = cm.rgb2hex(r, g, b);
                }else if(/scrollLeft|scrollTop/.test(item['name'])){
                    obj[item['name']] = val;
                }else if(/x1|x2|y1|y2/.test(item['name'])){
                    obj.setAttribute(item['name'], Math.round(val));
                }else if(item['name'] === 'docScrollTop'){
                    cm.setBodyScrollTop(val);
                }else{
                    obj.style[item['name']] = Math.round(val) + item['dimension'];
                }
            });
            return false;
        }
        properties.forEach(function(item){
            if(item['name'] === 'opacity'){
                cm.setOpacity(obj, item['new']);
            }else if(/color/i.test(item['name'])){
                obj.style[item['name']] = cm.rgb2hex(item['new'][0], item['new'][1], item['new'][2]);
            }else if(/scrollLeft|scrollTop/.test(item['name'])){
                obj[item['name']] = item['new'];
            }else if(/x1|x2|y1|y2/.test(item['name'])){
                obj.setAttribute(item['name'], item['new']);
            }else if(item['name'] === 'docScrollTop'){
                cm.setBodyScrollTop(item['new']);
            }else{
                obj.style[item['name']] = item['new'] + item['dimension'];
            }
        });
        return true;
    };

    var prepareEndPosition = function(name, value){
        if(name.match(/color/i)){
            if(/rgb/i.test(value)){
                var rgb = value.match(/\d+/g);
                return [parseInt(rgb[0]), parseInt(rgb[1]), parseInt(rgb[2])];
            }else{
                return cm.hex2rgb(value.match(/[\w\d]+/)[0]);
            }
        }
        return value.replace(/[^\-0-9\.]/g, '');
    };

    that.getTarget = function(){
        return obj;
    };

    that.go = function(){
        var params = arguments[0],
            args = cm.merge({
                'style' : '',
                'duration' : '',
                'anim' : 'simple',
                'onStop' : function(){}
            }, params),
            pId = 'animation_process_' + Math.random(),
            delta = animationMethod[args.anim] || animationMethod['simple'],
            properties = [],
            start = Date.now();
        for(var name in args.style){
            var value = args.style[name].toString();
            var dimension = cm.getStyleDimension(value);
            properties.push({
                'name' : name,
                'new' : prepareEndPosition(name, value),
                'dimension' : dimension,
                'old' : cm.getCurrentStyle(obj, name, dimension)
            });
        }
        for(var i in processes){
            processes[i] = false;
        }
        processes[pId] = true;
        // Run process
        (function process(){
            var processId = pId;
            if(!processes[processId]){
                delete processes[processId];
                return false;
            }
            var now = Date.now() - start;
            var progress = now / args.duration;
            if(setProperties(progress, delta, properties, args['duration'])){
                delete processes[processId];
                args.onStop && args.onStop();
            }else{
                animFrame(process);
            }
        })();
        return that;
    };

    that.stop = function(){
        for(var i in processes){
            processes[i] = false;
        }
        return that;
    };
};

cm.transition = function(node, params){
    var rule = cm.getSupportedStyle('transition'),
        transitions = [],
        dimension;

    var init = function(){
        // Merge params
        params = cm.merge({
            'properties' : {},
            'duration' : 0,
            'easing' : 'ease-in-out',
            'delayIn' : 0,
            'delayOut' : 0,
            'immediately' : false,
            'clear' : false,
            'onStop' : function(){}
        }, params);
        // Prepare styles
        cm.forEach(params['properties'], function(value, key){
            key = cm.styleStrToKey(key);
            transitions.push([key, params['duration'] + 'ms', params['easing']].join(' '));
        });
        transitions = transitions.join(', ');
        start();
    };

    var start = function(){
        // Prepare
        cm.forEach(params['properties'], function(value, key){
            key = cm.styleStrToKey(key);
            dimension = cm.getStyleDimension(value);
            node.style[key] = cm.getCurrentStyle(node, key, dimension) + dimension;
        });
        if(params['immediately']){
            set();
            end();
        }else{
            setTimeout(set, params['delayIn']);
            setTimeout(end, params['duration'] + params['delayIn'] + params['delayOut']);
        }
    };

    var set = function(){
        node.style[rule] = transitions;
        // Set new styles
        cm.forEach(params['properties'], function(value, key){
            key = cm.styleStrToKey(key);
            node.style[key] = value;
        });
    };

    var end = function(){
        node.style[rule]  = '';
        if(params['clear']){
            cm.forEach(params['properties'], function(value, key){
                key = cm.styleStrToKey(key);
                node.style[key] = '';
            });
        }
        params['onStop'](node);
    };

    init();
};

/* ******* COOKIE & LOCAL STORAGE ******* */

cm.storageSet = function(key, value, cookie){
    cookie = cookie !== false;
    if(cm.isLocalStorage){
        try{
            window.localStorage.setItem(key, value);
        }catch(e){
        }
    }else if(cookie){
        cm.cookieSet(key, value);
    }
};

cm.storageGet = function(key, cookie){
    cookie = cookie !== false;
    if(cm.isLocalStorage){
        return window.localStorage.getItem(key);
    }else if(cookie){
        return cm.cookieGet(key);
    }
    return null;
};

cm.storageRemove = function(key, cookie){
    cookie = cookie !== false;
    if(cm.isLocalStorage){
        window.localStorage.removeItem(key);
    }else if(cookie){
        cm.cookieRemove(key);
    }
};

cm.sessionStorageSet = function(key, value){
    if(cm.isSessionStorage){
        try{
            window.sessionStorage.setItem(key, value);
        }catch(e){
            cm.storageSet.apply(this, arguments);
        }
    }
};

cm.sessionStorageGet = function(key){
    if(cm.isSessionStorage){
        return window.sessionStorage.getItem(key);
    }else{
        return cm.storageGet.apply(this, arguments);
    }
};

cm.sessionStorageRemove = function(key){
    if(cm.isSessionStorage){
        window.sessionStorage.removeItem(key);
    }else{
        cm.storageRemove.apply(this, arguments);
    }
};

cm.cookieSet = function(name, value, expires, path){
    path = 'path=' + (!cm.isEmpty(path) ? encodeURI(path) : '/');
    expires = !cm.isEmpty(expires) ? cm.cookieDate(expires) : '';
    document.cookie = encodeURI(name) + "=" + encodeURI(value) + ';' + path + ';' + expires;
};

cm.cookieGet = function(name){
    var cookie = " " + document.cookie;
    var search = " " + encodeURI(name) + "=";
    var setStr = null;
    var offset = 0;
    var end = 0;
    if(cookie.length > 0){
        offset = cookie.indexOf(search);
        if(offset !== -1){
            offset += search.length;
            end = cookie.indexOf(";", offset);
            if(end === -1){
                end = cookie.length;
            }
            setStr = encodeURI(cookie.substring(offset, end));
        }
    }
    return setStr;
};

cm.cookieRemove = function(name){
    var date = new Date();
    date.setDate(date.getDate() - 1);
    document.cookie = encodeURI(name) + '=;expires=' + date;
};

cm.cookieDate = function(days){
    return 'expires=' + (new Date(Date.now() + 1000 * 60 * 60 * 24 * days)).toUTCString() + ';';
};

/* ******* AJAX ******* */

cm.ajax = function(o){
    var config = cm.merge({
            'debug' : true,
            'type' : 'json',                                         // text | document | json | jsonp | blob
            'method' : 'POST',                                       // POST | GET | PUT | PATCH | DELETE
            'paramsType' : 'uri',                                    // uri | json | form-data | none
            'uriConfig' : {},                                        // parameters for cm.obj2URI
            'uriParams' : {},
            'data' : {},
            'params' : '',                                           // TODO: Deprecated, use uriParams and data
            'url' : '',
            'variables' : {},
            'variablesMap' : {},
            'formData'  : false,                                     // TODO: Deprecated, use paramsType: 'form-data'
            'headers' : {
                'Content-Type' : 'application/x-www-form-urlencoded',
                'X-Requested-With' : 'XMLHttpRequest'
            },
            'withCredentials' : false,
            'async' : true,
            'beacon' : false,
            'onStart' : function(){},
            'onEnd' : function(){},
            'onProgress': function(){},
            'onSuccess' : function(){},
            'onError' : function(){},
            'onAbort' : function(){},
            'onResolve' : function(){},
            'onReject': function(){},
            'handler' : false
        }, o),
        successStatuses = [200, 201, 202, 204],
        variables = cm._getVariables(),
        response,
        callbackName,
        callbackSuccessName,
        callbackSuccessEmitted,
        callbackErrorName,
        callbackErrorEmitted,
        scriptNode,
        returnObject;

    var init = function(){
        if(config['type'] === 'jsonp'){
            validateJSONP();
            validate();
            returnObject = {'abort' : abortJSONP};
            sendJSONP();
        }else{
            validate();
            returnObject = config.httpRequestObject;
            send();
        }
    };

    var validateJSONP = function(){
        // Generate unique callback name
        callbackName = ['cmAjaxJSONP', Date.now()].join('__');
        callbackSuccessName = [callbackName, 'Success'].join('__');
        callbackErrorName = [callbackName, 'Error'].join('__');
        // Add variables
        variables['%callback%'] = callbackSuccessName;
        variables['%25callback%25'] = callbackSuccessName;
    };

    var validate = function(){
        cm.hook.trigger('ajax.beforePrepare', config);
        config.httpRequestObject = cm.createXmlHttpRequestObject();
        config['type'] = config['type'].toLowerCase();
        config['method'] = config['method'].toUpperCase();
        if(config['formData'] === true){
            config['paramsType'] = 'form-data';
        }
        // Process variables
        if(!cm.isEmpty(config['variablesMap'])){
            config['_originVariables'] = cm.clone(config['variables']);
            config['variables'] = cm.fillDataMap(config['variablesMap'], config['variables']);
        }
        // Process params object
        if(config['data'] instanceof FormData || config['params'] instanceof FormData) {
            delete config['headers']['Content-Type'];
        }else{
            if(!cm.isEmpty(config['data'])){
                config['data'] = processParams(config['data']);
            }else{
                config['params'] = processParams(config['params']);
            }
        }
        if(cm.isObject(config['uriParams'])){
            config['uriParams'] = cm.obj2URI(config['uriParams'], config['uriConfig']);
        }
        // Process request route
        config['url'] = cm.strReplace(config['url'], variables);
        config['url'] = cm.fillVariables(config['url'], config['variables'], true);
        if(config['paramsType'] !== 'none') {
            if (!cm.isEmpty(config['uriParams'])) {
                config['url'] = [config['url'], config['uriParams']].join('?');
            } else if (!cm.isEmpty(config['params']) && !cm.inArray(['POST', 'PUT', 'PATCH'], config['method'])) {
                config['url'] = [config['url'], config['params']].join('?');
            }
        }
        cm.hook.trigger('ajax.afterPrepare', config);
    };

    var processParams = function(data){
        if(cm.isObject(data) || cm.isArray(data)){
            data = cm.objectReplace(data, variables);
            data = cm.objectFillVariables(data, config['variables'], true);
            if(config['paramsType'] === 'json'){
                config['headers']['Content-Type'] = 'application/json';
                data = cm.stringifyJSON(data);
            }else if(config['paramsType'] === 'form-data'){
                data = cm.obj2FormData(data);
                delete config['headers']['Content-Type'];
            }else{
                data = cm.obj2URI(data, config['uriConfig']);
            }
        }
        return data;
    };

    var send = function(){
        config.httpRequestObject.open(config['method'], config['url'], config['async']);
        config.httpRequestObject.responseType = config['type'];

        // Set Headers
        if('withCredentials' in config.httpRequestObject){
            config.httpRequestObject.withCredentials = config.withCredentials;
        }
        cm.forEach(config['headers'], function(value, name){
            config.httpRequestObject.setRequestHeader(name, value);
        });

        // Add response events
        cm.addEvent(config.httpRequestObject, 'load', loadHandler);
        cm.addEvent(config.httpRequestObject, 'error', errorHandler);
        cm.addEvent(config.httpRequestObject, 'abort', abortHandler);

        // Upload progress events
        if (config.httpRequestObject.upload) {
            cm.addEvent(config.httpRequestObject.upload, 'progress', progressHandler);
        }

        // Send
        config['onStart']();
        if(config['beacon'] && cm.hasBeacon){
            navigator.sendBeacon(
                config['url'],
                !cm.isEmpty(config['data']) ? config['data'] : (!cm.isEmpty(config['params']) ? config['params'] : null)
            );
        }else{
            if(!cm.isEmpty(config['data'])){
                config.httpRequestObject.send(config['data']);
            }else if(!cm.isEmpty(config['params']) && cm.inArray(['POST', 'PUT', 'PATCH'], config['method'])){
                config.httpRequestObject.send(config['params']);
            }else{
                config.httpRequestObject.send(null);
            }
        }
    };

    var progressHandler = function(e){
        config['onProgress'].apply(config['onProgress'], arguments);
    };

    var loadHandler = function(e){
        if(config.httpRequestObject.readyState === 4){
            response = config.httpRequestObject.response;
            if(cm.inArray(successStatuses, config.httpRequestObject.status)){
                config['onSuccess'](response, e);
                config['onResolve'](response, e);
            }else{
                config['onError'](response, e);
                config['onReject'](response, e);
            }
            deprecatedHandler(response);
            config['onEnd'](response, e);
        }
    };

    var successHandler = function(){
        config['onSuccess'].apply(config['onSuccess'], arguments);
        config['onResolve'].apply(config['onResolve'], arguments);
        deprecatedHandler.apply(deprecatedHandler, arguments);
        config['onEnd'].apply(config['onEnd'], arguments);
    };

    var errorHandler = function(){
        config['onError'].apply(config['onError'], arguments);
        config['onReject'].apply(config['onReject'], arguments);
        deprecatedHandler.apply(deprecatedHandler, arguments);
        config['onEnd'].apply(config['onEnd'], arguments);
    };

    var abortHandler = function(){
        config['onAbort'].apply(config['onAbort'], arguments);
        deprecatedHandler.apply(deprecatedHandler, arguments);
        config['onEnd'].apply(config['onEnd'], arguments);
    };

    var deprecatedHandler = function(){
        if(cm.isFunction(config['handler'])){
            cm.errorLog({
                'type' : 'attention',
                'name' : 'cm.ajax',
                'message' : 'Parameter "handler" is deprecated. Use "onSuccess", "onError" or "onAbort" callbacks instead.'
            });
            config['handler'].apply(config['handler'], arguments);
        }
    };

    var sendJSONP = function(){
        // Generate events
        window[callbackSuccessName] = function(){
            if(!callbackSuccessEmitted){
                callbackSuccessEmitted = true;
                successHandler.apply(successHandler, arguments);
                removeJSONP();
            }
        };
        window[callbackErrorName] = function(){
            if(!callbackErrorEmitted){
                callbackErrorEmitted = true;
                errorHandler.apply(errorHandler, arguments);
                removeJSONP();
            }
        };

        // Prepare url and attach events
        scriptNode = cm.Node('script', {'type' : 'application/javascript'});
        cm.addEvent(scriptNode, 'load', window[callbackSuccessName]);
        cm.addEvent(scriptNode, 'error', window[callbackErrorName]);

        // Append
        config['onStart']();
        scriptNode.setAttribute('src', config['url']);
        cm.getDocumentHead().appendChild(scriptNode);
    };

    var removeJSONP = function(){
        cm.removeEvent(scriptNode, 'load', window[callbackSuccessName]);
        cm.removeEvent(scriptNode, 'error', window[callbackErrorName]);
        cm.remove(scriptNode);
        delete window[callbackSuccessName];
        delete window[callbackErrorName];
    };

    var abortJSONP = function(){
        window[callbackSuccessName] = function(){
            abortHandler();
            removeJSONP();
        };
    };

    init();
    return returnObject;
};

cm.ajaxPromise = function(o){
    return new Promise(function(resolve, reject){
        cm.ajax(
            cm.merge(o, {
                'onResolve' : resolve,
                'onReject' : reject
            })
        );
    });
};

cm.parseJSON = function(str){
    if(cm.isObject(str) || cm.isArray(str)){
        return str;
    }
    var o;
    if(str){
        try{
            o = JSON.parse(str);
        }catch(e){
            cm.errorLog({
                'type' : 'common',
                'name' : 'cm.parseJSON',
                'message' : ['Error while parsing JSON. Input string:', str].join(' ')
            });
        }
    }
    return o;
};

cm.stringifyJSON = function(o){
    if(cm.isObject(o) || cm.isArray(o)){
        return JSON.stringify(o);
    }else {
        return o;
    }
};

cm.obj2Filter = function(obj, prefix, separator, skipEmpty){
    var data = {},
        keyPrefix;
    separator = !cm.isUndefined(separator) ? separator : '=';
    skipEmpty = !cm.isUndefined(skipEmpty) ? skipEmpty : false;
    cm.forEach(obj, function(item, key){
        if(!skipEmpty || !cm.isEmpty(item)){
            keyPrefix = !cm.isEmpty(prefix) ? prefix + separator + key : key;
            if(cm.isObject(item)){
                data = cm.merge(data, cm.obj2Filter(item, keyPrefix, separator, skipEmpty))
            }else if(cm.isArray(item)){
                data[keyPrefix] = item.join(',');
            }else{
                data[keyPrefix] = item;
            }
        }
    });
    return data;
};

cm.obj2URI = function(data, params){
    var str = [],
        keyPrefix,
        keyValue,
        keyParams;
    // TODO: Legacy: arguments[1] = prefix
    if(cm.isString(arguments[1])){
        params = {
            'multipleValues' : 'brackets',
            'prefix' : arguments[1]
        };
    }
    // Validate
    params = cm.merge({
        'multipleValues' : 'brackets',          // brackets | keys | join
        'multipleValuesConjunction' : ',',
        'prefix' : null,
        'itemConjunction' : '&',
        'valueConjunction' : '=',
        'skipEmpty' : false
    }, params);

    if(cm.isArray(data) && params.multipleValues === 'join'){
        cm.forEach(data, function(item){
            if(!cm.isUndefined(item) && (!params.skipEmpty || !cm.isEmpty(item))){
                str.push(encodeURIComponent(item));
            }
        });
        if(!cm.isEmpty(str)){
            str = str.join(params.multipleValuesConjunction);
            if(!cm.isEmpty(params.prefix)){
                str = [params.prefix, str].join(params.valueConjunction);
            }
        }
        return !cm.isEmpty(str) ? str : null;
    }

    cm.forEach(data, function(item, key){
        if(!cm.isUndefined(item) && (!params.skipEmpty || !cm.isEmpty(item))){
            keyValue = item;
            // Handle prefix
            if(!cm.isEmpty(params.prefix)){
                switch(params.multipleValues){
                    case 'brackets':
                        keyPrefix = params.prefix + '[' + key + ']';
                        break;
                    case 'keys':
                    case 'join':
                        keyPrefix = [params.prefix, key].join(params.valueConjunction);
                        break;
                    case 'same':
                        keyPrefix = params.prefix;
                        break;
                }
            }else{
                keyPrefix = key;
            }
            // Handle items
            if(cm.isArray(item) && params.multipleValues === 'keys'){
                keyValue = cm.obj2URI(keyValue, cm.merge(params, {'multipleValues' : 'same', 'prefix' : keyPrefix}));
            }else if(typeof item === 'object'){
                keyValue = cm.obj2URI(keyValue, cm.merge(params, {'prefix' : keyPrefix}));
            }else{
                keyValue = [keyPrefix, encodeURIComponent(keyValue)].join(params.valueConjunction);
            }
            str.push(keyValue);
        }
    });

    return !cm.isEmpty(str) ? str.join(params.itemConjunction) : null;
};

cm.obj2FormData = function(o){
    var fd = new FormData();
    cm.forEach(o, function(value, key){
        fd.append(key, value);
    });
    return fd;
};

cm.formData2Obj = function(fd){
    var o = {},
        data;
    if(fd.entries && (data = fd.entries())){
        cm.forEach(data, function(item){
            o[item[0]] = item[1];
        });
    }
    return o;
};

cm.formData2URI = function(fd){
    return cm.obj2URI(cm.formData2Obj(fd));
};

cm.xml2arr = function(o){
    o = o.nodeType === 9 ? cm.firstEl(o) : o;
    if(o.nodeType === 3 || o.nodeType === 4){
        //Need to be change
        var n = cm.nextEl(o);
        if(!n){
            return o.nodeValue;
        }
        o = n;
    }
    if(o.nodeType === 1){
        var res = {};
        res[o.tagName] = {};
        var els = o.childNodes;
        for(var i = 0, ln = els.length; i < ln; i++){
            var childs = arguments.callee(els[i]);
            if(typeof(childs) === 'object'){
                for(var key in childs){
                    if(!res[o.tagName][key]){
                        res[o.tagName][key] = childs[key];
                    }else if(res[o.tagName][key]){
                        if(!res[o.tagName][key].push){
                            res[o.tagName][key] = [res[o.tagName][key], childs[key]];
                        }else{
                            res[o.tagName][key].push(childs[key]);
                        }
                    }
                }
            }else{
                res[o.tagName] = childs;
            }
        }
        res[o.tagName] = ln ? res[o.tagName] : '';
        return res;
    }
    return null;
};

cm.responseInArray = function(xmldoc){
    var response = xmldoc.getElementsByTagName('response')[0];
    var data = [];
    var els = response.childNodes;
    for(var i = 0; els.length > i; i++){
        if(els[i].nodeType !== 1){
            continue;
        }
        var kids = els[i].childNodes;
        var tmp = [];
        for(var k = 0; kids.length > k; k++){
            if(kids[k].nodeType === 1){
                tmp[kids[k].tagName] = kids[k].firstChild ? kids[k].firstChild.nodeValue : '';
            }
        }
        data.push(tmp);
    }
    return data;
};

cm.createXmlHttpRequestObject = function(){
    return new XMLHttpRequest();
};

/* ******* HASH ******* */

cm.loadHashData = function(){
    var hash = document.location.hash.replace('#', '').split('&');
    window.userRequest = {};
    hash.forEach(function(item){
        window.userRequest[item.split('=')[0]] = item.split('=')[1];
    });
    return true;
};

cm.reloadHashData = function(){
    var hash = '#';
    cm.forEach(window.userRequest, function(item, key){
        hash += key + '=' + item;
    });
    document.location.hash = hash;
    return true;
};

/* ******* GRAPHICS ******* */

cm.createSvg = function(){
    var node = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    node.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
    node.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink');
    node.setAttribute('version', '1.1');
    return node;
};

/* ******* CLASS FABRIC ******* */

cm._defineStack = {};
cm._defineExtendStack = {};

cm.defineHelper = function(name, data, handler){
    var that = this;
    // Process config
    data = cm.merge({
        'modules' : [],
        'require' : [],
        'params' : {},
        'events' : [],
        'extend' : false
    }, data);
    // Create a class extend object
    that.build = {
        'constructor' : handler,
        '_raw' : cm.clone(data),
        '_update' : {},
        '_name' : {
            'full' : name,
            'short' : name.replace('.', ''),
            'split' : name.split('.')
        },
        '_className' : name,
        '_constructor' : handler,
        '_modules' : {},
        'params' : data['params'],
        'strings' : data['strings']
    };
    // Inheritance
    if(data['extend']){
        cm.getConstructor(data['extend'], function(classConstructor, className){
            handler.prototype = Object.create(classConstructor.prototype);
            that.build._inheritName = className;
            that.build._inherit = classConstructor;
            // Merge raw params
            that.build._raw['modules'] = cm.merge(that.build._inherit.prototype._raw['modules'], that.build._raw['modules']);
            that.build._raw['events'] = cm.merge(that.build._inherit.prototype._raw['events'], that.build._raw['events']);
            // Add to extend stack
            if(cm._defineExtendStack[className]){
                cm._defineExtendStack[className].push(name);
            }
        });
    }
    // Extend class by predefine modules
    cm.forEach(Mod, function(module, name){
        if(module._config && module._config['predefine']){
            Mod['Extend']._extend.call(that, name, module);
        }
    });
    // Extend class by class specific modules
    cm.forEach(that.build._raw['modules'], function(module){
        if(Mod[module]){
            Mod['Extend']._extend.call(that, module, Mod[module]);
        }
    });
    // Prototype class methods
    cm.forEach(that.build, function(value, key){
        handler.prototype[key] = value;
    });
    // Add to stack
    if(!cm._defineExtendStack[name]){
        cm._defineExtendStack[name] = [];
    }
    cm._defineStack[name] = handler;
    // Extend Window object
    cm.objectSelector(name, window, handler);
};

cm.define = (function(){
    var definer = Function.prototype.call.bind(cm.defineHelper, arguments);
    return function(){
        definer.apply(cm.defineHelper, arguments);
    };
})();

cm.getConstructor = function(className, callback){
    var classConstructor;
    callback = cm.isFunction(callback) ? callback : function(){};
    if(cm.isUndefined(className)){
        if(cm._debug){
            cm.errorLog({
                'type' : 'error',
                'name' : 'cm.getConstructor',
                'message' : ['Parameter "className" does not specified.'].join(' ')
            });
        }
        return false;
    }else if(className === '*'){
        cm.forEach(cm._defineStack, function(classConstructor){
            callback(classConstructor, className, classConstructor.prototype, classConstructor.prototype._inherit);
        });
        return cm._defineStack;
    }else{
        classConstructor = cm._defineStack[className];
        if(!classConstructor){
            if(cm._debug){
                cm.errorLog({
                    'type' : 'attention',
                    'name' : 'cm.getConstructor',
                    'message' : ['Class', cm.strWrap(className, '"'), 'is not defined.'].join(' ')
                });
            }
            return false;
        }else{
            callback(classConstructor, className, classConstructor.prototype, classConstructor.prototype._inherit);
            return classConstructor;
        }
    }
};

cm.isInstance = function(childClass, parentClass){
    var isInstance = false;
    if(cm.isString(parentClass)){
        parentClass = cm.getConstructor(parentClass);
    }
    if(!cm.isEmpty(childClass) && !cm.isEmpty(parentClass)){
        isInstance = childClass instanceof parentClass;
    }
    return isInstance;
};

cm.find = function(className, name, parentNode, callback, params){
    var items = [],
        processed = {};
    // Config
    callback = cm.isFunction(callback) ? callback : function(){};
    params = cm.merge({
        'childs' : false
    }, params);
    // Process
    if(!className || className === '*'){
        cm.forEach(cm._defineStack, function(classConstructor){
            if(classConstructor.prototype.findInStack){
                items = cm.extend(items, classConstructor.prototype.findInStack(name, parentNode, callback));
            }
        });
    }else{
        var classConstructor = cm._defineStack[className];
        if(!classConstructor){
            cm.errorLog({
                'type' : 'error',
                'name' : 'cm.find',
                'message' : ['Class', cm.strWrap(className, '"'), 'does not exist.'].join(' ')
            });
        }else if(!classConstructor.prototype.findInStack){
            cm.errorLog({
                'type' : 'error',
                'name' : 'cm.find',
                'message' : ['Class', cm.strWrap(className, '"'), 'does not support Module Stack.'].join(' ')
            });
        }else{
            // Find instances of current constructor
            items = cm.extend(items, classConstructor.prototype.findInStack(name, parentNode, callback));
            // Find child instances, and stack processed parent classes to avoid infinity loops
            if(params['childs'] && cm._defineExtendStack[className] && !processed[className]){
                processed[className] = true;
                cm.forEach(cm._defineExtendStack[className], function(childName){
                    items = cm.extend(items, cm.find(childName, name, parentNode, callback, params));
                });
            }
        }
    }
    return items;
};

cm.Finder = function(className, name, parentNode, callback, params){
    var that = this,
        isEventBind = false;

    var init = function(){
        var finder;
        // Merge params
        //parentNode = parentNode || document.body;
        callback = cm.isFunction(callback) ? callback : function(){};
        params = cm.merge({
            'event' : 'onRender',
            'multiple' : false,
            'childs' : false
        }, params);
        // Search in constructed classes
        finder = cm.find(className, name, parentNode, callback, {
            'childs' : params['childs']
        });
        // Bind event when no one constructed class found
        if(!finder || !finder.length || params['multiple']){
            isEventBind = true;
            cm.getConstructor(className, function(classConstructor){
                classConstructor.prototype.addEvent(params['event'], watcher);
            });
        }
    };

    var watcher = function(classInstance){
        classInstance.removeEvent(params['event'], watcher);
        var isSame = classInstance.isAppropriateToStack(name, parentNode, callback);
        if(isSame && !params['multiple'] && isEventBind){
            that.remove(classInstance._constructor);
        }
    };

    that.remove = function(classConstructor){
        if(classConstructor){
            classConstructor.prototype.removeEvent(params['event'], watcher);
        }else{
            cm.getConstructor(className, function(classConstructor){
                classConstructor.prototype.removeEvent(params['event'], watcher);
            });
        }
    };

    init();
};

cm.setParams = function(className, params){
    cm.getConstructor(className, function(classConstructor, className, classProto){
        classProto.setParams(params);
    });
};

cm.setMessages = cm.setStrings = function(className, strings){
    cm.getConstructor(className, function(classConstructor, className, classProto){
        classProto.setMessages(strings);
    });
};

cm.getMessage = cm.getString = function(className, str){
    var data;
    cm.getConstructor(className, function(classConstructor, className, classProto){
        data = classProto.message(str);
    });
    return data;
};

cm.getMessages = cm.getStrings = function(className, o){
    var data;
    if(cm.isUndefined(o) || cm.isEmpty(o)){
        o = '*';
    }
    cm.getConstructor(className, function(classConstructor, className, classProto){
        data = classProto.messageObject(o);
    });
    return data;
};

/* ******* EXTEND ******* */

Mod['Extend'] = {
    '_config' : {
        'extend' : true,
        'predefine' : true
    },
    '_construct' : function(){},
    '_extend' : function(name, o){
        var that = this;
        if(!that.build._modules[name]){
            // Merge Config
            o._config = cm.merge({
                'extend' : false,
                'predefine' : false,
                'require' : [],
                'events' : []
            }, o._config);
            // Check Requires
            cm.forEach(o._config['require'], function(module){
                if(Mod[module]){
                    Mod['Extend']._extend.call(that, module, Mod[module]);
                }
            });
            // Extend class by module's methods
            if(o._config['extend']){
                cm.forEach(o, function(item, key){
                    if(!/^(_)/.test(key)){
                        that.build[key] = item;
                    }
                });
            }
            // Extend class events
            if(!cm.isEmpty(o._config['events'])){
                that.build._raw['events'] = cm.extend(that.build._raw['events'], o._config['events']);
            }
            // Construct module
            if(cm.isFunction(o._construct)){
                // Construct
                o._construct.call(that);
            }else{
                cm.errorLog({
                    'type' : 'error',
                    'name' : that.build._name['full'],
                    'message' : ['Module', cm.strWrap(name, '"'), 'does not have "_construct" method.'].join(' ')
                });
            }
            // Add into stack of class's modules
            that.build._modules[name] = o;
        }
    },
    'extend' : function(name, o){
        var that = this;
        if(!o){
            cm.errorLog({
                'type' : 'error',
                'name' : that._name['full'],
                'message' : 'Trying to extend the class by non-existing module.'
            });
        }else if(!name){
            cm.errorLog({
                'type' : 'error',
                'name' : that._name['full'],
                'message' : 'Module should have a name.'
            });
        }else if(that._modules[name]){
            cm.errorLog({
                'type' : 'error',
                'name' : that._name['full'],
                'message' : ['Module with name', cm.strWrap(name, '"'), 'already constructed.'].join(' ')
            });
        }else{
            // Merge Config
            o._config = cm.merge({
                'extend' : false,
                'predefine' : false,
                'require' : [],
                'events' : []
            }, o._config);
            // Check Requires
            cm.forEach(o._config['require'], function(module){
                if(Mod[module]){
                    Mod['Extend']._extend.call(that, module, Mod[module]);
                }
            });
            // Extend class by module's methods
            if(o._config['extend']){
                cm.forEach(o, function(item, key){
                    if(!/^(_)/.test(key)){
                        cm._defineStack[that._name['full']].prototype[key] = item;
                    }
                });
            }
            // Extend events
            if(!cm.isEmpty(o._config['events'])){
                cm._defineStack[that._name['full']].prototype._raw['events'] = cm.extend(cm._defineStack[that._name['full']].prototype._raw['events'], o._config['events']);
            }
            // Construct module
            if(cm.isFunction(o._construct)){
                // Construct
                o._construct.call(that);
            }else{
                cm.errorLog({
                    'type' : 'error',
                    'name' : that._name['full'],
                    'message' : ['Module', cm.strWrap(name, '"'), 'does not have "_construct" method.'].join(' ')
                });
            }
            // Add into stack of class's modules
            that._modules[name] = o;
        }
    }
};

/* ******* COMPONENTS ******* */

Mod['Component'] = {
    '_config' : {
        'extend' : true,
        'predefine' : true
    },
    '_construct' : function(){
        var that = this;
        that.build._isComponent = true;
        if(typeof that.build['params']['consoleLogErrors'] === 'undefined'){
            that.build['params']['consoleLogErrors'] = true;
        }
    },
    'renderComponent' : function(){
        var that = this;
        cm.forEach(that._modules, function(module){
            cm.isFunction(module._render) && module._render.call(that);
        })
    },
    'cloneComponent' : function(params){
        var that = this,
            component = null;
        cm.getConstructor(that._className, function(classConstructor){
            component = new classConstructor(
                cm.merge(that.params, params)
            );
        });
        return component;
    }
};

/* ******* PARAMS ******* */

Mod['Params'] = {
    '_config' : {
        'extend' : true,
        'predefine' : false,
        'require' : ['Extend'],
        'events' : ['onSetParams']
    },
    '_construct' : function(){
        var that = this;
        if(!that.build['params']){
            that.build['params'] = {};
        }
        if(!that.build._update['params']){
            that.build._update['params'] = {};
        }
        if(that.build._inherit){
            that.build['params'] = cm.merge(that.build._inherit.prototype['params'], that.build['params']);
        }
    },
    '_render' : function(){
        var that = this;
        if(that._inherit){
            that.params = cm.merge(that._inherit.prototype['params'], that.params);
        }
    },
    'setParams' : function(params, replace, triggerEvents){
        var that = this;
        replace = cm.isUndefined(replace) ? false : replace;
        triggerEvents = !cm.isUndefined(triggerEvents) ? triggerEvents : true;
        that.params = cm.merge(replace ? that._raw.params : that.params, params);
        that._update = cm.clone(that._update);
        that._update.params = cm.merge(that._update.params, that.params);
        // Validate params
        cm.forEach(that.params, function(item, key){
            switch(key){
                case 'messages':
                case 'strings':
                case 'langs':
                    cm.isFunction(that.setLangs) && that.setLangs(item);
                    break;

                default:
                    switch(item){
                        case 'document.window':
                            that.params[key] = window;
                            break;

                        case 'document.html':
                            if(cm.getDocumentHtml()){
                                that.params[key] = cm.getDocumentHtml();
                            }
                            break;

                        case 'document.body':
                            if(document.body){
                                that.params[key] = document.body;
                            }
                            break;

                        case 'top.document.body':
                            if(window.top.document.body){
                                that.params[key] = window.top.document.body;
                            }
                            break;

                        case 'document.head':
                            if(cm.getDocumentHead()){
                                that.params[key] = cm.getDocumentHead();
                            }
                            break;

                        default:
                            if(/^cm._config./i.test(item)){
                                that.params[key] = cm._config[item.replace('cm._config.', '')];
                            }
                            if(/^@LESS./i.test(item)){
                                that.params[key] = window.LESS[item.replace('@LESS.', '')];
                            }
                            break;
                    }
                    break
            }
        });
        // Trigger event if module defined
        if(triggerEvents && that._modules['Events']){
            that.triggerEvent('onSetParams');
        }
        return that;
    },
    'getParams' : function(key){
        var that = this;
        return key ? that.params[key] : that.params;
    },
    'getRawParams' : function(key){
        var that = this;
        return key ? that._raw.params[key] : that._raw.params;
    }
};

/* ******* EVENTS ******* */

Mod['Events'] = {
    '_config' : {
        'extend' : true,
        'predefine' : false,
        'require' : ['Extend']
    },
    '_construct' : function(){
        var that = this;
        that.build['events'] = {};
        cm.forEach(that.build._raw['events'], function(item){
            that.build['events'][item] = [];
        });
        if(!that.build['params']['events']){
            that.build['params']['events'] = {};
        }
        if(that.build._inherit){
            that.build['params']['events'] = cm.extend(that.build._inherit.prototype['params']['events'], that.build['params']['events'], true);
            that.build['events'] = cm.extend(that.build._inherit.prototype['events'], that.build['events'], true);
        }
    },
    '_render' : function(){
        var that = this;
        if(that._inherit){
            that.params['events'] = cm.extend(that._inherit.prototype['params']['events'], that.params['events'], true);
            that.events = cm.extend(that._inherit.prototype['events'], that.events, true);
        }
    },
    'addEvent' : function(event, handler){
        var that = this;
        // ToDo: investigate this clone and remove it
        that.events = cm.clone(that.events);
        if(that.events[event]){
            if(cm.isFunction(handler)){
                that.events[event].push(handler);
            }else{
                cm.errorLog({
                    'name' : that._name['full'],
                    'message' : ['Handler of event', cm.strWrap(event, '"'), 'must be a function.'].join(' ')
                });
            }
        }else{
            cm.errorLog({
                'type' : 'attention',
                'name' : that._name['full'],
                'message' : [cm.strWrap(event, '"'), 'does not exists.'].join(' ')
            });
        }
        return that;
    },
    'addEvents' : function(o){
        var that = this;
        if(o){
            that.convertEvents(o);
        }
        return that;
    },
    'removeEvent' : function(event, handler){
        var that = this;
        // ToDo: investigate this clone and remove it
        that.events = cm.clone(that.events);
        if(that.events[event]){
            if(cm.isFunction(handler)){
                that.events[event] = that.events[event].filter(function(item){
                    return item !== handler;
                });
            }else{
                cm.errorLog({
                    'name' : that._name['full'],
                    'message' : ['Handler of event', cm.strWrap(event, '"'), 'must be a function.'].join(' ')
                });
            }
        }else{
            cm.errorLog({
                'type' : 'attention',
                'name' : that._name['full'],
                'message' : [cm.strWrap(event, '"'), 'does not exists.'].join(' ')
            });
        }
        return that;
    },
    'removeAllEvent' : function(event){
        var that = this;
        // ToDo: investigate this clone and remove it
        that.events = cm.clone(that.events);
        if(that.events[event]){
            that.events = [];
        }else{
            cm.errorLog({
                'type' : 'attention',
                'name' : that._name['full'],
                'message' : [cm.strWrap(event, '"'), 'does not exists.'].join(' ')
            });
        }
        return that;
    },
    'triggerEvent' : function(event, params){
        var that = this,
            data = cm.clone(arguments),
            events;
        // Replace event name parameter with context (legacy) in data
        data[0] = that;
        if(that.events[event]){
            // ToDo: investigate this clone and remove it
            events = cm.clone(that.events[event]);
            cm.forEach(events, function(event){
                event.apply(that, data);
            });
        }else{
            cm.errorLog({
                'type' : 'attention',
                'name' : that._name['full'],
                'message' : [cm.strWrap(event, '"'), 'does not exists.'].join(' ')
            });
        }
        return that;
    },
    'hasEvent' : function(event){
        var that = this;
        return !!that.events[event];
    },
    'convertEvents' : function(o){
        var that = this;
        cm.forEach(o, function(item, key){
            if(cm.isArray(item)){
                cm.forEach(item, function(itemA){
                    that.addEvent(key, itemA);
                });
            }else{
                that.addEvent(key, item);
            }
        });
        return that;
    }
};

/* ******* LANGS ******* */

Mod['Langs'] = {
    '_config' : {
        'extend' : true,
        'predefine' : false,
        'require' : ['Extend']
    },
    '_construct' : function(){
        var that = this;
        if(!that.build['strings']){
            that.build['strings'] = {};
        }
        if(!that.build['params']['langs']){
            that.build['params']['langs'] = {};
        }
    },
    '_render' : function(){
        var that = this;
        that.strings = cm.merge(that.strings, that.params['langs']);
    },
    'lang' : function(str, vars, plural){
        var that = this,
            langStr;
        if(cm.isUndefined(str) || cm.isEmpty(str)){
            return '';
        }
        // Get string
        langStr = that.getLang(str);
        if(cm.isUndefined(langStr)){
            langStr = str;
        }
        // Process variable
        if(cm.isObject(langStr) || cm.isArray(langStr)){
            langStr = cm.objectReplace(langStr, vars);
        }else{
            langStr = cm.strReplace(langStr, vars);
        }
        // Plural
        if(!cm.isUndefined(plural) && cm.isArray(langStr)){
            langStr = cm.plural(plural, langStr);
        }
        return langStr;
    },
    'message' : function(){
        var that = this;
        return that.lang.apply(that, arguments);
    },
    'msg' : function(){
        var that = this;
        return that.lang.apply(that, arguments);
    },
    'getLang' : function(str){
        var that = this,
            objStr,
            langStr;
        if(cm.isUndefined(str) || cm.isEmpty(str)){
            return;
        }
        // Try to get string from current controller params array
        objStr = str === '*' ? undefined : str;
        langStr = cm.reducePath(objStr, that.params.langs);
        // Try to get string from current controller strings array
        if(cm.isUndefined(langStr) || cm.isObject(langStr)){
            var controllerLangStr = cm.reducePath(objStr, that.strings);
            if(cm.isObject(langStr)) {
                langStr = cm.merge(controllerLangStr, langStr);
            }else{
                langStr = controllerLangStr;
            }
        }
        // Try to get string from parent controller
        if(that._inherit && (cm.isUndefined(langStr) || cm.isObject(langStr))){
            var inheritLangStr = that._inherit.prototype.getLang(str);
            if(cm.isObject(langStr)){
                langStr = cm.merge(inheritLangStr, langStr);
            }else{
                langStr = inheritLangStr;
            }
        }
        return langStr;
    },
    'getMessage' : function(){
        var that = this;
        return that.getLang.apply(that, arguments);
    },
    'getMsg' : function(){
        var that = this;
        return that.getLang.apply(that, arguments);
    },
    'langObject' : function(str){
        var that = this,
            o = that.lang(str);
        if (cm.isFunction(o)) {
            return o(str);
        } else {
            return cm.isObject(o) || cm.isArray(o) ? o : {};
        }
    },
    'messageObject' : function(){
        var that = this;
        return that.langObject.apply(that, arguments);
    },
    'msgObject' : function(){
        var that = this;
        return that.langObject.apply(that, arguments);
    },
    'setLangs' : function(o){
        var that = this;
        if(cm.isObject(o)){
            if(cm.isFunction(that)){
                that.prototype.strings = cm.merge(that.prototype.strings, o);
            }else{
                that.strings = cm.merge(that.strings, o);
            }
        }
        return that;
    },
    'setMessages' : function(){
        var that = this;
        return that.setLangs.apply(that, arguments);
    },
    'setMsgs' : function(){
        var that = this;
        return that.setLangs.apply(that, arguments);
    }
};

/* ******* DATA CONFIG ******* */

Mod['DataConfig'] = {
    '_config' : {
        'extend' : true,
        'predefine' : false,
        'require' : ['Extend']
    },
    '_construct' : function(){
        var that = this;
        if(cm.isUndefined(that.build['params']['configDataMarker'])){
            that.build['params']['configDataMarker'] = 'data-config';
        }
    },
    'getDataConfig' : function(container, dataMarker){
        var that = this,
            sourceConfig;
        if(cm.isNode(container)){
            dataMarker = dataMarker || that.params['configDataMarker'];
            sourceConfig = container.getAttribute(dataMarker);
            if(sourceConfig && (sourceConfig = cm.parseJSON(sourceConfig))){
                that.setParams(sourceConfig);
            }
        }
        return that;
    },
    'getNodeDataConfig' : function(node, dataMarker){
        var that = this,
            sourceConfig;
        if(cm.isNode(node)){
            dataMarker = dataMarker || that.params['configDataMarker'];
            sourceConfig = node.getAttribute(dataMarker);
            if(sourceConfig && (sourceConfig = cm.parseJSON(sourceConfig))){
                return sourceConfig;
            }
        }
        return {};
    }
};

/* ******* DATA NODES ******* */

Mod['DataNodes'] = {
    '_config' : {
        'extend' : true,
        'predefine' : false,
        'require' : ['Extend']
    },
    '_construct' : function(){
        var that = this;
        if(!that.build['params']['nodes']){
            that.build['params']['nodes'] = {};
        }
        that.build['params']['nodesDataMarker'] = 'data-node';
        that.build['params']['nodesMarker'] = that.build._name['short'];
        if(!that.build['nodes']){
            that.build['nodes'] = {};
        }
        if(that.build._inherit){
            that.build['params']['nodes'] = cm.merge(that.build._inherit.prototype['params']['nodes'], that.build['params']['nodes']);
            that.build['nodes'] = cm.merge(that.build._inherit.prototype['nodes'], that.build['nodes']);
        }
    },
    'getDataNodes' : function(container, dataMarker, className){
        var that = this,
            sourceNodes = {};
        container = cm.isUndefined(container) ? document.body : container;
        if(container){
            dataMarker = cm.isUndefined(dataMarker) ? that.params['nodesDataMarker'] : dataMarker;
            className = cm.isUndefined(className) ? that.params['nodesMarker'] : className;
            if(className){
                sourceNodes = cm.getNodes(container, dataMarker)[className] || {};
            }else{
                sourceNodes = cm.getNodes(container, dataMarker);
            }
            that.nodes = cm.merge(that.nodes, sourceNodes);
        }
        that.nodes = cm.merge(that.nodes, that.params['nodes']);
        return that;
    },
    'getDataNodesObject' : function(container, dataMarker, className){
        var that = this,
            sourceNodes;
        container = typeof container === 'undefined'? document.body : container;
        dataMarker = typeof dataMarker === 'undefined'? that.params['nodesDataMarker'] : dataMarker;
        className = typeof className === 'undefined'? that.params['nodesMarker'] : className;
        if(className){
            sourceNodes = cm.getNodes(container, dataMarker)[className] || {};
        }else{
            sourceNodes = cm.getNodes(container, dataMarker);
        }
        return sourceNodes;
    }
};

/* ******* LOCAL STORAGE ******* */

Mod['Storage'] = {
    '_config' : {
        'extend' : true,
        'predefine' : false,
        'require' : ['Extend']
    },
    '_construct' : function(){
        var that = this;
        if(!that.build['params']['name']){
            that.build['params']['name'] = '';
        }
    },
    'storageGet' : function(key, session){
        var that = this,
            method = session ? 'sessionStorageGet' : 'storageGet',
            storage = cm.parseJSON(cm[method](that._className)) || {};
        if(cm.isEmpty(that.params['name'])){
            cm.errorLog({
                'type' : 'error',
                'name' : that._className,
                'message' : 'Storage cannot be read because "name" parameter not provided.'
            });
            return null;
        }
        if(!storage[that.params['name']] || cm.isUndefined(storage[that.params['name']][key])){
            cm.errorLog({
                'type' : 'attention',
                'name' : that._className,
                'message' : ['Parameter', cm.strWrap(key, '"'), 'does not exist or is not set in component with name', cm.strWrap(that.params['name'], '"'), '.'].join(' ')
            });
            return null;
        }
        return storage[that.params['name']][key];
    },
    'storageRead' : function(){
        var that = this;
        return that.storageGet.apply(that, arguments);
    },
    'storageGetAll' : function(session){
        var that = this,
            method = session ? 'sessionStorageGet' : 'storageGet',
            storage = cm.parseJSON(cm[method](that._className)) || {};
        if(cm.isEmpty(that.params['name'])){
            cm.errorLog({
                'type' : 'error',
                'name' : that._className,
                'message' : 'Storage cannot be read because "name" parameter not provided.'
            });
            return {};
        }
        if(!storage[that.params['name']]){
            cm.errorLog({
                'type' : 'attention',
                'name' : that._className,
                'message' : 'Storage is empty.'
            });
            return {};
        }
        return storage[that.params['name']];
    },
    'storageReadAll' : function(){
        var that = this;
        return that.storageGetAll.apply(that, arguments);
    },
    'storageSet' : function(key, value, session){
        var that = this,
            method = session ? 'sessionStorageGet' : 'storageGet',
            storage = cm.parseJSON(cm[method](that._className)) || {};
        if(cm.isEmpty(that.params['name'])){
            cm.errorLog({
                'type' : 'error',
                'name' : that._className,
                'message' : 'Storage cannot be written because "name" parameter not provided.'
            });
            return {};
        }
        if(!storage[that.params['name']]){
            storage[that.params['name']] = {};
        }
        storage[that.params['name']][key] = value;
        method = session ? 'sessionStorageSet' : 'storageSet';
        cm[method](that._className, JSON.stringify(storage));
        return storage[that.params['name']];
    },
    'storageWrite' : function(){
        var that = this;
        return that.storageSet.apply(that, arguments);
    },
    'storageSetAll' : function(data, session){
        var that = this,
            method = session ? 'sessionStorageGet' : 'storageGet',
            storage = cm.parseJSON(cm[method](that._className)) || {};
        if(cm.isEmpty(that.params['name'])){
            cm.errorLog({
                'type' : 'error',
                'name' : that._className,
                'message' : 'Storage cannot be written because "name" parameter not provided.'
            });
            return {};
        }
        storage[that.params['name']] = data;
        method = session ? 'sessionStorageSet' : 'storageSet';
        cm[method](that._className, JSON.stringify(storage));
        return storage[that.params['name']];
    },
    'storageWriteAll' : function(){
        var that = this;
        return that.storageSetAll.apply(that, arguments);
    },
    'storageRemove' : function(key, session){
        var that = this,
            method = session ? 'sessionStorageGet' : 'storageGet',
            storage = cm.parseJSON(cm[method](that._className)) || {};
        if(cm.isEmpty(that.params['name'])){
            cm.errorLog({
                'type' : 'error',
                'name' : that._className,
                'message' : 'Storage cannot be written because "name" parameter not provided.'
            });
            return {};
        }
        if(!storage[that.params['name']]){
            storage[that.params['name']] = {};
        }
        delete storage[that.params['name']][key];
        method = session ? 'sessionStorageSet' : 'storageSet';
        cm[method](that._className, JSON.stringify(storage));
        return storage[that.params['name']];
    },
    'storageClear' : function(){
        var that = this;
        return that.storageRemove.apply(that, arguments);
    }
};

/* ******* CALLBACKS ******* */

Mod['Callbacks'] = {
    '_config' : {
        'extend' : true,
        'predefine' : false,
        'require' : ['Extend']
    },
    '_construct' : function(){
        var that = this;
        if(!that.build['params']['callbacks']){
            that.build['params']['callbacks'] = {};
        }
        that.build['callbacks'] = {};
        that.build['_callbacks'] = {};
        if(that.build._inherit){
            that.build['params']['callbacks'] = cm.extend(that.build._inherit.prototype['params']['callbacks'], that.build['params']['callbacks']);
            that.build['callbacks'] = cm.extend(that.build._inherit.prototype['callbacks'], that.build['callbacks']);
        }
    },
    '_render' : function(){
        var that = this;
        if(that._inherit){
            that.params['callbacks'] = cm.merge(that._inherit.prototype['params']['callbacks'], that.params['callbacks']);
            that.callbacks = cm.extend(that._inherit.prototype['callbacks'], that.callbacks);
        }
    },
    'callbacksProcess' : function(){
        var that = this;
        // ToDo: investigate this clone and remove it
        that.callbacks = cm.clone(that.callbacks);
        // Save default callbacks
        cm.forEach(that.callbacks, function(callback, name){
            that._callbacks[name] = callback;
        });
        // Replace callbacks
        cm.forEach(that.params['callbacks'], function(callback, name){
            that.callbacks[name] = callback;
        });
        return that;
    },
    'callbacksRestore' : function(){
        var that = this;
        // ToDo: investigate this clone and remove it
        that.callbacks = cm.clone(that.callbacks);
        cm.forEach(that._callbacks, function(callback, name){
            that.callbacks[name] = callback;
        });
        return that;
    }
};

/* ******* STACK ******* */

Mod['Stack'] = {
    '_config' : {
        'extend' : true,
        'predefine' : false,
        'require' : ['Extend']
    },
    '_construct' : function(){
        var that = this;
        if(!that.build['params']['name']){
            that.build['params']['name'] = '';
        }
        that.build['_stack'] = [];
    },
    'addToStack' : function(node){
        var that = this,
            name = cm.isNumber(that.params['name']) ? that.params['name'].toString() : that.params['name'];
        if(!that._stackItem){
            that._stackItem = {
                'name' : name,
                'node' : node,
                'class' : that, // ToDo: Deprecated
                'classInstance': that,
                'className' : that._name['full']
            };
            that._stack.push(that._stackItem);
        }else if(cm.isNode(node)){
            that._stackItem['node'] = node;
        }
        return that;
    },
    'removeFromStack' : function(){
        var that = this;
        cm.arrayRemove(that._stack, that._stackItem);
        that._stackItem = null;
        return that;
    },
    'isAppropriateToStack' : function(name, parent, callback){
        var that = this,
            item = that._stackItem;
        name = cm.isNumber(name) ? name.toString() : name;
        callback = cm.isFunction(callback) ? callback : function(){};
        if((cm.isEmpty(name) || item['name'] === name) && (cm.isEmpty(parent) || cm.isParent(parent, item['node'], true))){
            callback(item['classInstance'], item, name);
            return true;
        }
        return false;
    },
    'findInStack' : function(name, parent, callback){
        var that = this,
            items = [];
        name = cm.isNumber(name) ? name.toString() : name;
        callback = cm.isFunction(callback) ? callback : function(){};
        cm.forEach(that._stack, function(item){
            if((cm.isEmpty(name) || item['name'] === name) && (cm.isEmpty(parent) || cm.isParent(parent, item['node'], true))){
                items.push(item);
                callback(item['classInstance'], item, name);
            }
        });
        return items;
    },
    'getStackNode' : function(){
        var that = this;
        return that._stackItem ? that._stackItem['node'] : null;
    }
};

/* ****** STRUCTURE ******* */

Mod['Structure'] = {
    '_config' : {
        'extend' : true,
        'predefine' : false,
        'require' : ['Extend']
    },
    '_construct' : function(){
        var that = this;
        if(cm.isUndefined(that.build['params']['renderStructure'])){
            that.build['params']['renderStructure'] = true;
        }
        if(cm.isUndefined(that.build['params']['embedStructure'])){
            that.build['params']['embedStructure'] = 'append';
        }
    },
    'embedStructure' : function(node, container){
        var that = this;
        switch(that.params['embedStructure']){
            case 'replace':
                that.replaceStructure(node);
                break;
            case 'append':
            case 'last':
                that.appendStructure(node, 'insertLast', container);
                break;
            case 'prepend':
            case 'first':
                that.appendStructure(node, 'insertFirst', container);
                break;
        }
        return that;
    },
    'appendStructure' : function(node, type, container){
        var that = this;
        container = container || that.params['container'] || that.params['node'];
        container && cm[type](node, container);
        return that;
    },
    'replaceStructure' : function(node, container){
        var that = this;
        container = container || that.params['container'];
        if(container){
            if(that.params['container'] === that.params['node']){
                cm.insertBefore(node, that.params['node']);
            }else{
                that.params['container'].appendChild(node);
            }
        }else if(that.params['node']){
            cm.insertBefore(node, that.params['node']);
        }
        cm.remove(that.params['node']);
        return that;
    }
};

Part['Menu'] = (function(){
    var processedNodes = [],
        pageSize;

    var checkPosition = function(item){
        pageSize = cm.getPageSize();
        var dropWidth = item['drop'].offsetWidth,
            parentLeft = cm.getX(item['node']),
            parentWidth = item['node'].parentNode && cm.isClass(item['node'].parentNode, 'pt__menu-dropdown') ? item['node'].parentNode.offsetWidth : 0;
        if(dropWidth + parentWidth + parentLeft >= pageSize['winWidth']){
            cm.replaceClass(item['drop'], 'pull-left', 'pull-right');
        }else{
            cm.replaceClass(item['drop'], 'pull-right', 'pull-left');
        }
    };

    var checkPositionHandler = function(e, item){
        var target = cm.getEventTarget(e);
        if(!cm.isParent(item['drop'], target, true)){
            checkPosition(item);
        }
    };

    var clickHandler = function(e, item){
        if(cm._pageSize['winWidth'] > cm._config.adaptiveFrom && !item['_show']){
            item['_interval'] && clearTimeout(item['_interval']);
            item['_interval'] = setTimeout(function(){
                item['_show'] = false;
            }, 500);
            item['_show'] = true;
            var target = cm.getEventTarget(e);
            if(!cm.isParent(item['drop'], target, true)){
                if(cm.isClass(item['node'], 'is-show')){
                    cm.removeClass(item['node'], 'is-show');
                }else{
                    cm.preventDefault(e);
                    cm.addClass(item['node'], 'is-show');
                }
            }
        }
    };

    var cancelHandler = function(e, item){
        var target = cm.getEventTarget(e);
        if(!cm.isParent(item['node'], target, true)){
            cm.removeClass(item['node'], 'is-show');
        }
    };

    var setEvents = function(item){
        cm.addEvent(item['node'], 'pointerenter', function(e){
            checkPositionHandler(e, item);
        });
        cm.addEvent(item['node'], 'touchenter', function(e){
            checkPositionHandler(e, item);
        });
        cm.addEvent(item['node'], 'mouseover', function(e){
            checkPositionHandler(e, item);
        });
        cm.addEvent(item['node'], 'pointerdown', function(e){
            clickHandler(e, item);
        });
        cm.addEvent(item['node'], 'touchstart', function(e){
            clickHandler(e, item);
        });
        cm.addEvent(item['node'], 'mousedown', function(e){
            clickHandler(e, item);
        });
        cm.addEvent(document.body, 'pointerdown', function(e){
            cancelHandler(e, item);
        });
        cm.addEvent(document.body, 'touchstart', function(e){
            cancelHandler(e, item);
        });
        cm.addEvent(document.body, 'mousedown', function(e){
            cancelHandler(e, item);
        });
        checkPosition(item);
    };

    return function(container){
        container = cm.isUndefined(container)? document.body : container;
        var menus = cm.getByClass('pt__menu', container),
            items = [],
            item;
        cm.forEach(menus, function(node){
            if(!cm.inArray(processedNodes, node) && !cm.hasClass(node, 'is-manual')){
                item = {
                    'node' : node,
                    'drop' : cm.getByClass('pt__menu-dropdown', node)[0]
                };
                if(item['drop']){
                    setEvents(item);
                }
                items.push(item);
                processedNodes.push(node);
            }
        });
        cm.addEvent(window, 'resize', function(){
            cm.forEach(items, function(item){
                checkPosition(item);
            });
        });
    };
})();

Part['Autoresize'] = (function(){
    var processedNodes = [],
        nodes;

    function getOffset(node){
        return node.offsetHeight - node.clientHeight;
    }

    function process(node){
        if(cm.inArray(processedNodes, node)){
            return;
        }
        if(cm.isNode(node) && node.tagName.toLowerCase() === 'textarea'){
            cm.addEvent(node, 'input', handle);
            cm.addEvent(node, 'change', handle);
            cm.addEvent(node, 'focus', handle);
            cm.addEvent(node, 'blur', handle);
            cm.customEvent.add(node, 'redraw', handle);
        }
        processedNodes.push(node);
    }

    function handle(event){
        var node = event.currentTarget || event.target;
        node.style.height = '0px';
        node.style.height = [node.scrollHeight + getOffset(node), 'px'].join('');
    }

    return function(container){
        container = cm.isUndefined(container)? document.body : container;
        nodes = cm.getByClass('cm-autoresize', container);
        cm.forEach(nodes, process);
    };
})();

// Get initial values
cm._breakpoints = cm.getBreakpoints();
cm._breakpoint = cm.getBreakpoint();

cm.init = function(){
    var init = function(){
        cm._isDocumentReady = true;

        // Helpers
        checkBrowser();
        checkPageSize();
        checkBreakpoints();
        checkScrollSize();
        checkType();

        // Events
        cm.addEvent(window, 'mousemove', getClientPosition);
        cm.addEvent(window, 'resize', resizeAction);
        setInterval(checkAction, 50);
    };

    // Actions

    var checkAction = function(){
        animFrame(function(){
            checkPageSize();
            checkScrollSize();
        });
    };

    var resizeAction = function(){
        checkPageSize();
        checkBreakpoints();
        checkScrollSize();
        checkType();
    };

    var checkBrowser = function(){
        if(typeof Com.UA !== 'undefined'){
            Com.UA.setBrowserClass();
        }
    };

    var checkPageSize = (function(){
        var size, sizeNew;
        return function(){
            cm._pageSize = cm.getPageSize();
            sizeNew = JSON.stringify(cm._pageSize);
            if(size !== sizeNew){
                size = sizeNew;
                cm.hook.trigger(window, 'pageSizeChange', {
                    'pageSize' : cm._pageSize
                });
                cm.customEvent.trigger(window, 'pageSizeChange', {
                    'direction' : 'all',
                    'self' : true,
                    'pageSize' : cm._pageSize
                });
            }
        };
    })();

    var checkBreakpoints = function(){
        cm._breakpoints = cm.getBreakpoints();
        cm._breakpoint = cm.getBreakpoint();
    };

    var checkScrollSize = (function(){
        var size;
        return function(){
            cm._scrollSize = cm.getScrollBarSize();
            if(size !== cm._scrollSize){
                size = cm._scrollSize;
                cm.toggleClass(cm.getDocumentHtml(), 'is-scrollbar-visible', (size > 0));
                cm.hook.trigger('scrollSizeChange', {
                    'scrollSize' : cm._scrollSize
                });
                cm.customEvent.trigger(window, 'scrollSizeChange', {
                    'direction' : 'all',
                    'self' : true,
                    'scrollSize' : cm._scrollSize
                });
            }
        };
    })();

    var checkType = (function(){
        var html = cm.getDocumentHtml(),
            width,
            height;

        return function(){
            width = cm._pageSize.winWidth;
            height = cm._pageSize.height;

            cm.removeClass(html, ['is', cm._deviceType].join('-'));
            cm.removeClass(html, ['is', cm._deviceOrientation].join('-'));

            cm._adaptive = width <= cm._config.adaptiveFrom;
            cm._deviceOrientation = width < height? 'portrait' : 'landscape';
            if(width >= cm._breakpoints.desktop){
                cm._deviceType = 'desktop';
            }
            if(width <= cm._breakpoints.desktopDown){
                cm._deviceType = 'tablet';
            }
            if(width <= cm._breakpoints.mobileDown){
                cm._deviceType = 'mobile';
            }

            cm.addClass(html, ['is', cm._deviceType].join('-'));
            cm.addClass(html, ['is', cm._deviceOrientation].join('-'));
        };
    })();

    // Get client cursor position
    var getClientPosition = function(e){
        cm._clientPosition = cm.getEventClientPosition(e);
    };

    init();
};

cm.load = function(){
    cm._isDocumentLoad = true;
    // Redraw components and modules after full page loading
    if(cm._config.redrawOnLoad){
        cm.customEvent.trigger(document.body, 'redraw', {
            'direction' : 'child',
            'self' : false
        });
    }
};

cm.onReady(cm.init, false);
cm.onLoad(cm.load, false);

/**
 * Find the differences between two objects and push to a new object
 * (c) 2019 Chris Ferdinandi & Jascha Brinkmann, MIT License, https://gomakethings.com & https://twitter.com/jaschaio
 * @param  {Object} obj1 The original object
 * @param  {Object} obj2 The object to compare against it
 * @return {Object}      An object of differences between the two
 */

// ToDo: replace with https://github.com/cosmicanant/recursive-diff

cm.diff = function (obj1, obj2) {

    // Make sure an object to compare is provided
    if (!obj2 || Object.prototype.toString.call(obj2) !== '[object Object]') {
        return obj1;
    }

    //
    // Variables
    //

    var diffs = {};
    var key;

    //
    // Compare our objects
    //

    // Loop through the first object
    for (key in obj1) {
        if (obj1.hasOwnProperty(key)) {
            cm.diffCompare(diffs, obj1[key], obj2[key], key);
        }
    }

    // Loop through the second object and find missing items
    for (key in obj2) {
        if (obj2.hasOwnProperty(key)) {
            if (!obj1[key] && obj1[key] !== obj2[key] ) {
                diffs[key] = obj2[key];
            }
        }
    }

    // Return the object of differences
    return diffs;

};

/**
 * Compare two items and push non-matches to object
 * @param  {Object} diffs The diffs object
 * @param  {*}      item1 The first item
 * @param  {*}      item2 The second item
 * @param  {String} key   The key in our object
 */
cm.diffCompare = function (diffs, item1, item2, key) {

    // Get the object type
    var type1 = Object.prototype.toString.call(item1);
    var type2 = Object.prototype.toString.call(item2);

    // If type2 is undefined it has been removed
    if (type2 === '[object Undefined]') {
        diffs[key] = null;
        return;
    }

    // If items are different types
    if (type1 !== type2) {
        diffs[key] = item2;
        return;
    }

    // If an object, compare recursively
    if (type1 === '[object Object]') {
        var objDiff = cm.diff(item1, item2);
        if (Object.keys(objDiff).length > 0) {
            diffs[key] = objDiff;
        }
        return;
    }

    // If an array, compare
    if (type1 === '[object Array]') {
        if (!cm.diffArraysMatch(item1, item2)) {
            diffs[key] = item2;
        }
        return;
    }

    // Else if it's a function, convert to a string and compare
    // Otherwise, just compare
    if (type1 === '[object Function]') {
        if (item1.toString() !== item2.toString()) {
            diffs[key] = item2;
        }
    } else {
        if (item1 !== item2 ) {
            diffs[key] = item2;
        }
    }

};

/**
 * Check if two arrays are equal
 * @param  {Array}   arr1 The first array
 * @param  {Array}   arr2 The second array
 * @return {Boolean}      If true, both arrays are equal
 */
cm.diffArraysMatch = function (arr1, arr2) {

    // Check if the arrays are the same length
    if (arr1.length !== arr2.length) return false;

    // Check if all items exist and are in the same order
    for (var i = 0; i < arr1.length; i++) {
        if (arr1[i] !== arr2[i]) return false;
    }

    // Otherwise, return true
    return true;

};
cm.define('Com.AbstractController', {
    'modules' : [
        'Params',
        'Events',
        'Langs',
        'Structure',
        'DataConfig',
        'DataNodes',
        'Storage',
        'Callbacks',
        'Stack'
    ],
    'events' : [
        'onConstruct',
        'onConstructStart',
        'onConstructProcess',
        'onConstructEnd',
        'onInitComponentsStart',
        'onInitComponentsEnd',
        'onGetLESSVariables',
        'onGetLESSVariablesStart',
        'onGetLESSVariablesProcess',
        'onGetLESSVariablesEnd',
        'onValidateParams',
        'onValidateParamsStart',
        'onValidateParamsProcess',
        'onValidateParamsEnd',
        'onRenderStart',
        'onRender',
        'onRenderEnd',
        'onBeforeRender',
        'onAfterRender',
        'onRenderViewModel',
        'onDestruct',
        'onDestructStart',
        'onDestructProcess',
        'onDestructEnd',
        'onRedraw',
        'onResize',
        'onScroll',
        'onSetEvents',
        'onSetEventsStart',
        'onSetEventsProcess',
        'onSetEventsEnd',
        'onUnsetEvents',
        'onUnsetEventsStart',
        'onUnsetEventsProcess',
        'onUnsetEventsEnd',
        'onSetCustomEvents',
        'onUnsetCustomEvents',
        'onRenderViewStart',
        'onRenderViewProcess',
        'onRenderViewEnd'
    ],
    'params' : {
        'node' : null,
        'container' : null,
        'name' : '',
        'getDataNodes' : true,
        'getDataConfig' : true,
        'embedStructure' : 'append',
        'renderStructure' : true,
        'embedStructureOnRender' : true,
        'redrawOnRender' : 'immediately',
        'redrawOnResize' : 'frame',
        'removeOnDestruct' : false,
        'destructOnRemove' : true,
        'className' : '',
        'controllerEvents' : false,
        'customEvents' : true,
        'resizeEvent' : true,
        'resizeNode' : window,
        'scrollEvent' : false,
        'scrollNode' : window,
        'collector' : null,
        'constructCollector' : false,
        'destructCollector' : false
    }
},
function(params){
    var that = this;
    that.isDestructed = false;
    that.isConstructed = true;
    that.nodes = {};
    that.components = {};
    that.construct(params);
});

cm.getConstructor('Com.AbstractController', function(classConstructor, className, classProto, classInherit){
    classProto.construct = function(params){
        var that = this;
        // Variables
        that.isConstructed = false;
        // Bind context to methods
        that.redrawHandler = that.redraw.bind(that);
        that.resizeHandler = that.resize.bind(that);
        that.scrollHandler = that.scroll.bind(that);
        that.destructHandler = that.destruct.bind(that);
        that.constructCollectorHandler = that.constructCollector.bind(that);
        that.destructCollectorHandler = that.destructCollector.bind(that);
        // Configure class
        that.params['controllerEvents'] && that.bindControllerEvents();
        that.triggerEvent('onConstructStart');
        that.renderComponent();
        that.initComponents();
        that.getLESSVariables();
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.params['getDataNodes'] && that.getDataNodes(that.params['node']);
        that.params['getDataConfig'] && that.getDataConfig(that.params['node']);
        that.callbacksProcess();
        that.validateParams();
        that.addToStack(that.params['node']);
        that.triggerEvent('onConstruct');
        that.triggerEvent('onRenderStart');
        that.triggerEvent('onBeforeRender');
        that.render();
        that.triggerEvent('onAfterRender');
        that.triggerEvent('onConstructProcess');
        that.addToStack(that.nodes['container']);
        that.setEvents();
        that.isConstructed = true;
        that.triggerEvent('onRender');
        that.triggerEvent('onRenderEnd');
        that.triggerEvent('onConstructEnd');
        return that;
    };

    classProto.destruct = function(){
        var that = this;
        if(!that.isDestructed){
            that.isConstructed = false;
            that.isDestructed = true;
            that.triggerEvent('onDestructStart');
            that.triggerEvent('onDestruct');
            that.triggerEvent('onDestructProcess');
            cm.customEvent.trigger(that.nodes['container'], 'destruct', {
                'direction' : 'child',
                'self' : false
            });
            that.unsetEvents();
            that.params['removeOnDestruct'] && cm.remove(that.nodes['container']);
            that.removeFromStack();
            that.triggerEvent('onDestructEnd');
        }
        return that;
    };

    classProto.remove = function() {
        var that = this;
        that.params['destructOnRemove'] && that.destruct();
        cm.remove(that.nodes['container']);
        return that;
    };

    classProto.redraw = function(type, params){
        var that = this;
        params = cm.merge({
            'direction' : 'child',
            'self' : true
        }, params);
        switch(type){
            case 'full':
                cm.customEvent.trigger(that.nodes['container'], 'redraw', params);
                break;
            case 'immediately':
                that.triggerEvent('onRedraw');
                break;
            case 'frame':
            default:
                animFrame(function(){
                    that.triggerEvent('onRedraw');
                });
                break;
        }
        return that;
    };

    classProto.resize = function(type){
        var that = this;
        if (that.params.redrawOnResize) {
            that.redraw(that.params.redrawOnResize);
        }
        if(type === 'immediately'){
            that.triggerEvent('onResize');
        }else{
            animFrame(function(){
                that.triggerEvent('onResize');
            });
        }
        return that;
    };

    classProto.scroll = function(type){
        var that = this;
        if(type === 'immediately'){
            that.triggerEvent('onScroll');
        }else{
            animFrame(function(){
                that.triggerEvent('onScroll');
            });
        }
        return that;
    };

    classProto.bindControllerEvents = function(){
        var that = this;
        cm.forEach(that._raw['events'], function(name){
            if(!that[name]){
                that[name] = function(){};
            }
            if(!that[name + 'Handler']){
                that[name + 'Handler'] = that[name].bind(that);
            }
            that.addEvent(name, that[name + 'Handler']);
        });
        return that;
    };

    classProto.initComponents = function(){
        var that = this;
        that.triggerEvent('onInitComponentsStart');
        that.triggerEvent('onInitComponentsEnd');
        return that;
    };

    classProto.getLESSVariables = function(){
        var that = this;
        that.triggerEvent('onGetLESSVariablesStart');
        that.triggerEvent('onGetLESSVariables');
        that.triggerEvent('onGetLESSVariablesProcess');
        that.triggerEvent('onGetLESSVariablesEnd');
        return that;
    };

    classProto.validateParams = function(){
        var that = this;
        that.triggerEvent('onValidateParamsStart');
        that.validateParamsHandler();
        that.triggerEvent('onValidateParamsEnd');
        return that;
    };

    classProto.validateParamsHandler = function(){
        var that = this;
        that.triggerEvent('onValidateParams');
        that.triggerEvent('onValidateParamsProcess');
    };

    classProto.render = function(){
        var that = this;
        // Structure
        that.params['renderStructure'] && that.renderView();
        that.setAttributes();
        // Render model
        that.renderViewModel();
        // Append
        if(that.params['embedStructureOnRender']){
            that.appendView();
        }
        return that;
    };

    classProto.renderView = function(){
        var that = this;
        that.triggerEvent('onRenderViewStart');
        that.nodes['container'] = cm.node('div', {'class' : 'com__abstract'});
        that.triggerEvent('onRenderViewProcess');
        that.triggerEvent('onRenderViewEnd');
        return that;
    };

    classProto.renderViewModel = function(){
        var that = this;
        that.triggerEvent('onRenderViewModel');
        return that;
    };

    classProto.appendView = function(){
        var that = this;
        that.embedStructure(that.nodes['container']);
        if(that.params['redrawOnRender'] === true){
            that.redraw();
        }else if(cm.isString(that.params['redrawOnRender'])){
            that.redraw(that.params['redrawOnRender']);
        }
    };

    classProto.setAttributes = function(){
        var that = this;
        cm.addClass(that.nodes['container'], that.params['className']);
        return that;
    };

    classProto.setEvents = function(){
        var that = this;
        that.triggerEvent('onSetEventsStart');
        that.setEventsHandler();
        that.triggerEvent('onSetEventsEnd');
        return that;
    };

    classProto.setEventsHandler = function() {
        var that = this;
        // Windows events
        that.params['resizeEvent'] && cm.addEvent(that.params['resizeNode'], 'resize', that.resizeHandler);
        that.params['scrollEvent'] && cm.addEvent(that.params['scrollNode'], 'scroll', that.scrollHandler);
        that.triggerEvent('onSetEvents');
        that.triggerEvent('onSetEventsProcess');
        // Add custom events
        if(that.params['customEvents']){
            cm.customEvent.add(that.getStackNode(), 'redraw', that.redrawHandler);
            cm.customEvent.add(that.getStackNode(), 'destruct', that.destructHandler);
            that.triggerEvent('onSetCustomEvents');
        }
    };

    classProto.unsetEvents = function(){
        var that = this;
        that.triggerEvent('onUnsetEventsStart');
        that.unsetEventsHandler();
        that.triggerEvent('onUnsetEventsEnd');
        return that;
    };

    classProto.unsetEventsHandler = function(){
        var that = this;
        // Windows events
        that.params['resizeEvent'] && cm.removeEvent(that.params['resizeNode'], 'resize', that.resizeHandler);
        that.params['scrollEvent'] && cm.removeEvent(that.params['scrollNode'], 'scroll', that.scrollHandler);
        that.triggerEvent('onUnsetEvents');
        that.triggerEvent('onUnsetEventsProcess');
        // Remove custom events
        if(that.params['customEvents']){
            cm.customEvent.remove(that.getStackNode(), 'redraw', that.redrawHandler);
            cm.customEvent.remove(that.getStackNode(), 'destruct', that.destructHandler);
            that.triggerEvent('onUnsetCustomEvents');
        }
    };

    classProto.constructCollector = function(node){
        var that = this;
        node = cm.isUndefined(node) ? that.getStackNode() : node;
        if(that.params['constructCollector']){
            if(that.params['collector']){
                that.params['collector'].construct(node);
            }else{
                cm.find('Com.Collector', null, null, function(classInstance){
                    classInstance.construct(node);
                });
            }
        }
        return that;
    };

    classProto.destructCollector = function(node){
        var that = this;
        node = cm.isUndefined(node) ? that.getStackNode() : node;
        if(that.params['destructCollector']){
            if(that.params['collector']){
                that.params['collector'].destruct(node);
            }else{
                cm.find('Com.Collector', null, null, function(classInstance){
                    classInstance.destruct(node);
                });
            }
        }
        return that;
    };
});

cm.define('Com.AbstractContainer', {
    extend: 'Com.AbstractController',
    events: [
        'onOpen',
        'onOpenEnd',
        'onCloseStart',
        'onClose',
        'onOpenPlaceholder',
        'onOpenPlaceholderEnd',
        'onClosePlaceholderStart',
        'onClosePlaceholder',
        'onRenderControllerStart',
        'onRenderControllerProcess',
        'onRenderController',
        'onRenderControllerEnd',
        'onRenderPlaceholderStart',
        'onRenderPlaceholderProcess',
        'onRenderPlaceholderEnd',
        'onRenderPlaceholderViewStart',
        'onRenderPlaceholderViewProcess',
        'onRenderPlaceholderViewEnd'
    ],
    params: {
        embedStructure: 'none',
        controllerEvents: true,
        preventDefault: true,
        stopPropagation: false,
        constructor: null,
        constructorParams: {},
        params: {},                      // ToDo: deprecated, use constructorParams
        placeholder: false,
        placeholderConstructor: null,
        placeholderParams: {},
        destructOnClose: true,
        openOnConstruct: false
    },
    strings: {
        title: 'Container',
        close: 'Close',
        save: 'Save',
        help: ''
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractController.apply(that, arguments);
});

cm.getConstructor('Com.AbstractContainer', function(classConstructor, className, classProto, classInherit){
    classProto.construct = function(){
        var that = this;
        // Variables
        that.hasOpen = false;
        that.targetNode = null;
        // Bind context to methods
        that.openHandler = that.open.bind(that);
        that.closeHandler = that.close.bind(that);
        that.afterOpenControllerHandler = that.afterOpenController.bind(that);
        that.afterOpenControllerEndHandler = that.afterOpenControllerEnd.bind(that);
        that.afterCloseControllerStartHandler = that.afterCloseControllerStart.bind(that);
        that.afterCloseControllerHandler = that.afterCloseController.bind(that);
        that.afterOpenPlaceholderHandler = that.afterOpenPlaceholder.bind(that);
        that.afterOpenPlaceholderEndHandler = that.afterOpenPlaceholderEnd.bind(that);
        that.afterClosePlaceholderStartHandler = that.afterClosePlaceholderStart.bind(that);
        that.afterClosePlaceholderHandler = that.afterClosePlaceholder.bind(that);
        // Call parent method
        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.onDestructProcess = function(){
        var that = this;
        that.destructPlaceholder();
        that.destructController();
    };

    classProto.validateParams = function(){
        var that = this;
        that.triggerEvent('onValidateParamsStart');
        that.triggerEvent('onValidateParams');
        that.triggerEvent('onValidateParamsProcess');
        // TODO: replace that.params.params to that.params.constructorParams
        that.params.constructorParams = cm.merge(that.params.constructorParams, that.params.params);
        that.params.constructorParams = cm.merge(that.params.constructorParams, {
            node: that.params.node,
            container: that.params.container,
        });
        that.params.params = that.params.constructorParams;
        that.triggerEvent('onValidateParamsEnd');
    };

    classProto.open = function(event){
        var that = this;
        if(event){
            that.params.preventDefault && cm.preventDefault(event);
            that.params.stopPropagation && cm.stopPropagation(event);
        }
        if(that.params.placeholder){
            that.openPlaceholder();
        }else{
            that.openController();
        }
        return that;
    };

    classProto.close = function(event){
        var that = this;
        if(event) {
            that.params.preventDefault && cm.preventDefault(event);
            that.params.stopPropagation && cm.stopPropagation(event);
        }
        if(that.params.placeholder){
            that.closePlaceholder();
        }else{
            that.closeController();
        }
        return that;
    };

    classProto.isOpen = function() {
        var that = this;
        return that.wasOpen;
    };

    classProto.getController = function(){
        var that = this;
        return that.components.controller;
    };

    classProto.getPlaceholder = function(){
        var that = this;
        return that.components.placeholder;
    };

    classProto.render = function(){
        var that = this;
        // Add Event
        if(that.nodes.button){
            that.setTarget(that.nodes.button);
        }else{
            that.setTarget(that.params.node);
        }
        // Open on construct
        that.params.openOnConstruct && that.open();
    };

    classProto.setTarget = function(node){
        var that = this;
        if(that.targetNode){
            cm.click.remove(that.targetNode, that.openHandler);
            that.targetNode.removeAttribute('aria-haspopup', 'dialog');
            that.targetNode = null;
        }
        if(cm.isNode(node)){
            that.targetNode = node;
            that.targetNode.setAttribute('aria-haspopup', 'dialog');
            cm.click.add(node, that.openHandler);
        }
        return that;
    };

    /* *** CONTROLLER *** */

    classProto.setControllerParams = function(params) {
        var that = this;
        that.params.constructorParams = cm.merge(that.params.constructorParams, params);
        if (that.components.controller) {
            that.components.controller.setParams(params);
        }
        return that;
    };

    classProto.renderController = function(){
        var that = this;
        cm.getConstructor(that.params.constructor, function(classConstructor){
            that.triggerEvent('onRenderControllerStart', arguments);
            // Construct
            that.renderControllerView();
            that.components.controller = that.constructController(classConstructor);
            // Events
            that.triggerEvent('onRenderControllerProcess', that.components.controller);
            that.renderControllerEvents();
            that.triggerEvent('onRenderController', that.components.controller);
            that.triggerEvent('onRenderControllerEnd', that.components.controller);
        });
    };

    classProto.renderControllerView = function(){
        var that = this;
    };

    classProto.constructController = function(classConstructor){
        var that = this;
        return new classConstructor(
            that.constructControllerParams(that.params.constructorParams)
        );
    };

    classProto.constructControllerParams = function(defaultParams) {
        var that = this;
        return cm.merge(defaultParams, {
            opener: that,
            container: that.params.placeholder ? that.nodes.placeholder.content : that.params.container,
            content: that.params.constructorParams.content || that.params.content,
            events: that.constructControllerEvents(),
        });
    };

    classProto.constructControllerEvents = function() {
        var that = this;
        return {};
    };

    classProto.renderControllerEvents = function(){
        var that = this;
        that.components.controller.addEvent('onOpen', that.afterOpenControllerHandler);
        that.components.controller.addEvent('onOpenEnd', that.afterOpenControllerEndHandler);
        that.components.controller.addEvent('onCloseStart', that.afterCloseControllerStartHandler);
        that.components.controller.addEvent('onClose', that.afterCloseControllerHandler);
    };

    classProto.destructController = function(){
        var that = this;
        that.components.controller && that.components.controller.destruct && that.components.controller.destruct();
    };

    classProto.openController = function(){
        var that = this;
        if(!that.components.controller || that.components.controller.isDestructed){
            that.renderController();
        }
        if(that.components.controller && that.components.controller.open){
            that.components.controller.open();
        }else{
            that.afterOpenController();
            that.afterOpenControllerEnd();
        }
    };

    classProto.closeController = function(){
        var that = this;
        if(that.components.controller && that.components.controller.close){
            that.components.controller.close();
        }else{
            that.afterCloseControllerStart();
            that.afterCloseController();
        }
    };

    classProto.afterOpenController = function(){
        var that = this;
        that.wasOpen = true;
        that.triggerEvent('onOpen', that.components.controller);
    };

    classProto.afterOpenControllerEnd = function(){
        var that = this;
        that.triggerEvent('onOpenEnd', that.components.controller);
    };

    classProto.afterCloseControllerStart = function(){
        var that = this;
        that.triggerEvent('onCloseStart', that.components.controller);
    };

    classProto.afterCloseController = function(){
        var that = this;
        that.wasOpen = false;
        if(that.params.destructOnClose){
            that.destructController();
        }
        that.triggerEvent('onClose', that.components.controller);
    };

    /* *** PLACEHOLDER *** */

    classProto.setPlaceholderParams = function(params) {
        var that = this;
        that.params.placeholderParams = cm.merge(that.params.placeholderParams, params);
        if (that.components.placeholder) {
            that.components.placeholder.setParams(params);
        }
        return that;
    };

    classProto.renderPlaceholder = function(){
        var that = this;
        cm.getConstructor(that.params.placeholderConstructor, function(classConstructor){
            that.triggerEvent('onRenderPlaceholderStart', arguments);
            // Construct
            that.renderPlaceholderView();
            that.components.placeholder = that.constructPlaceholder(classConstructor);
            that.renderPlaceholderButtons();
            // Events
            that.triggerEvent('onRenderPlaceholderProcess', that.components.placeholder);
            that.renderPlaceholderEvents();
            that.triggerEvent('onRenderPlaceholderEnd', that.components.placeholder);
        });
    };

    classProto.constructPlaceholder = function(classConstructor){
        var that = this;
        return new classConstructor(
            cm.merge(that.params.placeholderParams, {
                opener: that,
                content: that.nodes.placeholder
            })
        );
    };

    classProto.renderPlaceholderView = function(){
        var that = this;
        that.triggerEvent('onRenderPlaceholderViewStart');
        // Structure
        that.nodes.placeholder = {};
        that.nodes.placeholder.title = that.renderPlaceholderTitle();
        that.nodes.placeholder.content = cm.node('div', {classes: 'com__container__content'});
        that.nodes.placeholder.help = that.lang('help');
        // Events
        that.triggerEvent('onRenderPlaceholderViewProcess');
        that.triggerEvent('onRenderPlaceholderViewEnd');
    };

    classProto.renderPlaceholderTitle = function(){
        var that = this;
        return cm.textNode(that.lang('title'));
    };

    classProto.renderPlaceholderButtons = function(){
        var that = this;
        that.components.placeholder.addButton({
            name: 'close',
            label: that.lang('close'),
            classes: 'button-primary',
            callback: that.closeHandler
        });
    };

    classProto.renderPlaceholderEvents = function(){
        var that = this;
        that.components.placeholder.addEvent('onOpen', that.afterOpenPlaceholderHandler);
        that.components.placeholder.addEvent('onOpenEnd', that.afterOpenPlaceholderEndHandler);
        that.components.placeholder.addEvent('onCloseStart', that.afterClosePlaceholderStartHandler);
        that.components.placeholder.addEvent('onClose', that.afterClosePlaceholderHandler);
    };

    classProto.destructPlaceholder = function(){
        var that = this;
        that.components.placeholder && that.components.placeholder.destruct && that.components.placeholder.destruct();
    };

    classProto.openPlaceholder = function(){
        var that = this;
        if(!that.components.placeholder || that.components.placeholder.isDestructed){
            that.renderPlaceholder();
        }
        if(that.components.placeholder && that.components.placeholder.open){
            that.components.placeholder.open();
        }else{
            that.afterOpenPlaceholder();
            that.afterOpenPlaceholderEnd();
        }
    };

    classProto.closePlaceholder = function(){
        var that = this;
        if(that.components.placeholder && that.components.placeholder.close){
            that.components.placeholder.close();
        }else{
            that.afterClosePlaceholderStart();
            that.afterClosePlaceholder();
        }
    };

    classProto.afterOpenPlaceholder = function(){
        var that = this;
        that.openController();
        that.constructCollector();
        that.triggerEvent('onOpenPlaceholder', that.components.placeholder);
    };

    classProto.afterOpenPlaceholderEnd = function(){
        var that = this;
        that.triggerEvent('onOpenPlaceholderEnd', that.components.placeholder);
    };

    classProto.afterClosePlaceholderStart = function(){
        var that = this;
        that.triggerEvent('onClosePlaceholderStart', that.components.placeholder);
    };

    classProto.afterClosePlaceholder = function(){
        var that = this;
        that.closeController();
        if(that.params.destructOnClose){
            that.destructPlaceholder();
            that.destructCollector();
        }
        that.triggerEvent('onClosePlaceholder', that.components.placeholder);
    };
});

cm.define('Com.AbstractInput', {
    'extend' : 'Com.AbstractController',
    'events' : [
        'onSet',
        'onSelect',
        'onInput',
        'onChange',
        'onClear',
        'onReset',
        'onDisable',
        'onEnable',
        'onRenderContent',
        'onRenderContentStart',
        'onRenderContentProcess',
        'onRenderContentEnd'
    ],
    'params' : {
        'embedStructure' : 'replace',
        'renderStructure' : true,
        'renderHiddenContent' : true,
        'renderStructureContent' : true,
        'hiddenType' : 'hidden',
        'value' : '',
        'defaultValue' : '',
        'isValueOption' : false,
        'isValueObject' : false,
        'id' : '',
        'title' : '',
        'placeholder' : '',
        'autocomplete' : null,
        'ariaLabel' : '',
        'disabled' : false,
        'checked' : null,
        'className' : '',
        'contentClassName' : '',
        'adaptive' : true,
        'ui' : true,
        'size' : 'full',                // default | full
        'justify' : 'left',
        'required' : false,
        'minLength' : 0,
        'maxLength' : 0,                // 0 - infinity
        'limitMaxLength' : true,
        'min' : 0,
        'max' : 0,
        'setHiddenInput' : true,
        'setContentInput' : true
    }
},
function(){
    Com.AbstractController.apply(this, arguments);
});

cm.getConstructor('Com.AbstractInput', function(classConstructor, className, classProto, classInherit){
    classProto.construct = function(params){
        var that = this;
        // Variables
        that.nodes = {};
        that.components = {};
        that.previousValue = null;
        that.value = null;
        that.valueText = null;
        that.valueOption = null;
        that.rawValue = null;
        that.tempRawValue = null;
        that.disabled = false;
        // Bind context to methods
        that.setHandler = that.set.bind(that);
        that.getHandler = that.get.bind(that);
        that.clearHandler = that.clear.bind(that);
        that.enableHandler = that.enable.bind(that);
        that.disableHandler = that.disable.bind(that);
        that.clearEventHandler = that.clearEvent.bind(that);
        that.setActionHandler = that.setAction.bind(that);
        that.selectActionHandler = that.selectAction.bind(that);
        that.afterRenderHandler = that.afterRender.bind(that);
        // Add events
        that.addEvent('onAfterRender', that.afterRenderHandler);
        // Call parent method
        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.set = function(value, triggerEvents){
        var that = this;
        triggerEvents = cm.isUndefined(triggerEvents) ? true : triggerEvents;
        that.selectAction(value, triggerEvents);
        that.setAction(value, triggerEvents);
        that.changeAction(triggerEvents);
        return that;
    };

    classProto.get = function(){
        var that = this;
        return that.value;
    };

    classProto.getText = function(){
        var that = this;
        return that.valueText;
    };

    classProto.getJSON = function(){
        var that = this;
        return cm.stringifyJSON(that.value);
    };

    classProto.getRaw = function(){
        var that = this;
        return that.rawValue;
    };

    classProto.getValueOption = function(){
        var that = this;
        return that.valueOption;
    };

    classProto.getContainer = function(){
        var that = this;
        return that.nodes.container;
    };

    classProto.reset = classProto.clear = function(triggerEvents){
        var that = this;
        if(!that.isDestructed){
            triggerEvents = cm.isUndefined(triggerEvents) ? true : triggerEvents;
            triggerEvents && that.triggerEvent('onClear');
            triggerEvents && that.triggerEvent('onReset');
            that.set(that.params['defaultValue'], triggerEvents);
        }
        return that;
    };

    classProto.enable = function(){
        var that = this;
        if(that.disabled){
            that.disabled = false;
            cm.removeClass(that.nodes['container'], 'disabled');
            cm.removeClass(that.nodes['contentContainer'], 'disabled');
            that.triggerEvent('onEnable');
        }
        return that;
    };

    classProto.disable = function(){
        var that = this;
        if(!that.disabled){
            that.disabled = true;
            cm.addClass(that.nodes['container'], 'disabled');
            cm.addClass(that.nodes['contentContainer'], 'disabled');
            that.triggerEvent('onDisable');
        }
        return that;
    };

    classProto.clearEvent = function(e){
        var that = this;
        cm.preventDefault(e);
        that.clear();
        return that;
    };

    classProto.validateParams = function(){
        var that = this;
        that.triggerEvent('onValidateParamsStart');
        // Get parameters from provided input
        if(cm.isNode(that.params['node'])){
            that.params['id'] = that.params['node'].getAttribute('id') || that.params['id'];
            that.params['title'] = that.params['node'].getAttribute('title') || that.params['title'];
            that.params['name'] = that.params['node'].getAttribute('name') || that.params['name'];
            that.params['disabled'] = that.params['node'].disabled || that.params['node'].readOnly || that.params['disabled'];
            that.params['checked'] = that.params['node'].checked || that.params['checked'];
            that.params['required'] = that.params['node'].required || that.params['required'];
            that.params['minLength'] = that.params['node'].getAttribute('minlength') || that.params['minLength'];
            that.params['maxLength'] = that.params['node'].getAttribute('maxlength') || that.params['maxLength'];
            that.params['min'] = that.params['node'].getAttribute('min') || that.params['min'];
            that.params['max'] = that.params['node'].getAttribute('max') || that.params['max'];
            that.params['placeholder'] = that.params['node'].getAttribute('placeholder') || that.params['placeholder'];
            that.params['autocomplete'] = that.params['node'].getAttribute('autocomplete') || that.params['autocomplete'];
            that.params['ariaLabel'] = that.params['node'].getAttribute('aria-label') || that.params['ariaLabel'];
        }
        that.triggerEvent('onValidateParams');
        that.triggerEvent('onValidateParamsProcess');
        that.validateParamsValue();
        that.triggerEvent('onValidateParamsEnd');
        return that;
    };

    classProto.validateParamsValue = function(){
        var that = this,
            dataValue,
            value;
        if(cm.isNode(that.params['node'])){
            dataValue = that.params['node'].getAttribute('data-value');
            // First try to take original value, then real time js value
            value = that.params['node'].getAttribute('value');
            if(cm.isEmpty(value)){
                value = that.params['node'].value;
            }
            // Parse JSON
            if(
                !cm.isEmpty(dataValue) &&
                 (that.params['isValueOption'] || that.params['isValueObject'])
            ){
                value = cm.parseJSON(dataValue);
            }
            that.params['value'] = !cm.isEmpty(value) ?  value : that.params['value'];
        }
        that.params['value'] = !cm.isEmpty(that.params['value']) ? that.params['value'] : that.params['defaultValue'];
    };

    classProto.afterRender = function(){
        var that = this;
        that.set(that.params['value'], false);
        that.params['disabled'] && that.disable();
        return that;
    };

    /* *** VIEW - VIEW MODEL *** */

    classProto.renderView = function(){
        var that = this;
        that.triggerEvent('onRenderViewStart');
        that.nodes['container'] = cm.node('div', {'class' : 'com__input'});
        // Hidden input holder
        that.nodes['hiddenContainer'] = that.renderHiddenContent();
        that.nodes['hidden'] = that.nodes['hiddenContent']['input'];
        if(that.params['renderHiddenContent']){
            cm.appendChild(that.nodes['hiddenContainer'], that.nodes['container']);
        }
        // Component content
        if(that.params['renderStructureContent']){
            that.nodes['contentContainer'] = that.renderContent();
            cm.appendChild(that.nodes['contentContainer'], that.nodes['container']);
        }else{
            that.nodes['contentContainer'] = that.nodes['container'];
        }
        that.triggerEvent('onRenderViewProcess');
        that.triggerEvent('onRenderViewEnd');
        return that;
    };

    classProto.renderHiddenContent = function(){
        var that = this,
            nodes = {};
        that.nodes['hiddenContent'] = nodes;
        // Structure
        switch(that.params['hiddenType']){
            case 'textarea' :
                nodes['container'] = nodes['input'] = cm.node('textarea', {'class' : 'display-none'});
                break;
            case 'hidden':
            default:
                nodes['container'] = nodes['input'] = cm.node('input', {'type' : 'hidden'});
                break;
        }
        // Export
        return nodes['container'];
    };

    classProto.renderContent = function(){
        var that = this,
            nodes = {};
        that.nodes['content'] = nodes;
        // Structure
        that.triggerEvent('onRenderContentStart');
        nodes['container'] = cm.node('div', {'class' : 'input__content'});
        that.triggerEvent('onRenderContent');
        that.triggerEvent('onRenderContentProcess');
        that.triggerEvent('onRenderContentEnd');
        // Export
        return nodes['container'];
    };

    classProto.setAttributes = function(){
        var that = this;
        // Call parent method
        classInherit.prototype.setAttributes.apply(that, arguments);
        // Hidden
        that.setHiddenAttributes();
        // Data attributes
        if(cm.isNode(that.params['node'])){
            cm.forEach(that.params['node'].attributes, function(item){
                if(/^data-(?!node|element|config)/.test(item.name)){
                    that.nodes['container'].setAttribute(item.name, item.value);
                }
            });
        }
        if(that.params['title']){
            that.nodes['container'].setAttribute('title', that.lang(that.params['title']));
        }
        // Classes
        if(that.params['adaptive']){
            cm.addClass(that.nodes['container'], 'is-adaptive');
        }
        if(!cm.isEmpty(that.params['size'])){
            cm.addClass(that.nodes['container'], ['size', that.params['size']].join('-'));
        }
        if(!cm.isEmpty(that.params['justify'])){
            cm.addClass(that.nodes['container'], ['pull', that.params['justify']].join('-'));
        }
        cm.addClass(that.nodes['contentContainer'], that.params['contentClassName']);
        return that;
    };

    classProto.setHiddenAttributes = function(){
        var that = this;
        that.nodes['hidden'].required = that.params['required'];
        // Min / Max length
        if(!cm.isEmpty(that.params['minLength']) && that.params['minLength'] > 0){
            that.nodes['hidden'].minlength = that.params['minLength']
        }
        if(that.params['limitMaxLength'] && !cm.isEmpty(that.params['maxLength']) && that.params['maxLength'] > 0){
            that.nodes['hidden'].maxlength = that.params['maxLength'];
        }
        if(!cm.isEmpty(that.params['min']) && that.params['min'] > 0){
            that.nodes['hidden'].min = that.params['min'];
        }
        if(!cm.isEmpty(that.params['max']) && that.params['max'] > 0){
            that.nodes['hidden'].max = that.params['max'];
        }
        // Data attributes
        if(cm.isNode(that.params['node'])){
            cm.forEach(that.params['node'].attributes, function(item){
                if(/^data-(?!node|element|config)/.test(item.name)){
                    that.nodes['hidden'].setAttribute(item.name, item.value);
                }
            });
        }
        if(!cm.isEmpty(that.params['name'])){
            that.nodes['hidden'].setAttribute('name', that.params['name']);
        }
    };

    /* *** DATA VALUE *** */

    classProto.validateValue = function(value){
        var that = this;
        value = that.validateValueHelper(value);
        value = !cm.isEmpty(value) ? value : that.validateValueHelper(that.params['defaultValue']);
        return value;
    };

    classProto.validateValueHelper = function(value){
        var that = this;
        if(that.params['isValueOption'] && !cm.isEmpty(value)){
            if(cm.isObject(value)){
                if(cm.isUndefined(value['value'])){
                    value['value'] = value['text'];
                }
                if(cm.isEmpty(value['text'])){
                    value['text'] = value['value'];
                }
            }else{
                value = {
                    'value' : value,
                    'text' : value
                };
            }
        }
        return value;
    };

    classProto.saveValue = function(value){
        var that = this;
        that.rawValue = that.tempRawValue;
        that.previousValue = cm.clone(that.value);
        if(that.params['isValueOption']){
            that.value = !cm.isEmpty(value) ? value['value'] : null;
            that.valueText = !cm.isEmpty(value) ? value['text'] : null;
            that.valueOption = value;
        }else{
            that.value = value;
            that.valueText = value;
        }
        if(that.params['setHiddenInput']){
            that.saveHiddenValue(that.value);
        }
        if(that.params['setContentInput']){
            that.setData(that.valueText);
        }
        return that;
    };

    classProto.saveHiddenValue = function(value){
        var that = this;
        if(!cm.isEmpty(value)){
            if(cm.isObject(value) || cm.isArray(value)){
                that.nodes['hidden'].value = cm.stringifyJSON(value);
            }else{
                that.nodes['hidden'].value = value;
            }
        }else{
            that.nodes['hidden'].value = ''
        }
    };

    classProto.saveRawValue = function(value){
        var that = this;
        that.tempRawValue = value;
    };

    classProto.setData = function(value){
        var that = this;
    };

    classProto.selectData = function(value){
        var that = this;
    };

    /* *** ACTIONS *** */

    classProto.selectAction = function(value, triggerEvents){
        var that = this;
        triggerEvents = cm.isUndefined(triggerEvents) ? true : triggerEvents;
        value = that.validateValue(value);
        that.saveRawValue(value);
        that.selectData(value);
        triggerEvents && that.triggerEvent('onSelect', value);
        triggerEvents && that.triggerEvent('onInput', value);
        return that;
    };

    classProto.setAction = function(value, triggerEvents){
        var that = this;
        triggerEvents = cm.isUndefined(triggerEvents) ? true : triggerEvents;
        value = that.validateValue(value);
        that.saveRawValue(value);
        that.saveValue(value);
        triggerEvents && that.triggerEvent('onSet', that.value);
        return that;
    };

    classProto.changeAction = function(triggerEvents){
        var that = this;
        triggerEvents = cm.isUndefined(triggerEvents) ? true : triggerEvents;
        if(triggerEvents && cm.stringifyJSON(that.value) !== cm.stringifyJSON(that.previousValue)){
            that.triggerEvent('onChange', that.value);
        }
        return that;
    };
});

cm.define('Com.AbstractFileManager', {
    'extend' : 'Com.AbstractController',
    'events' : [
        'onSelect',
        'onComplete',
        'onGet',
        'onRenderHolderStart',
        'onRenderHolderProcess',
        'onRenderHolderEnd',
        'onRenderContentStart',
        'onRenderContentProcess',
        'onRenderContentEnd'
    ],
    'params' : {
        'embedStructure' : 'replace',
        'controllerEvents' : true,
        'max' : 0,                                                        // 0 - infinity
        'lazy' : false,
        'fullSize' : false,
        'showStats' : true,
        'statsConstructor' : 'Com.FileStats',
        'statsParams' : {
            'embedStructure' : 'append',
            'toggleBox' : false,
            'inline' : true
        }
    }
},
function(params){
    var that = this;
    that.nodes = {};
    that.components = {};
    that.items = [];
    that.isMultiple = false;
    // Call parent class construct
    Com.AbstractController.apply(that, arguments);
});

cm.getConstructor('Com.AbstractFileManager', function(classConstructor, className, classProto, classInherit){
    classProto.construct = function(){
        var that = this;
        // Bind context to methods
        that.completeHandler = that.complete.bind(that);
        // Add events
        // Call parent method
        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.validateParams = function(){
        var that = this;
        that.isMultiple = !that.params['max'] || that.params['max'] > 1;
        return that;
    };

    classProto.get = function(){
        var that = this;
        that.triggerEvent('onGet', that.items);
        return that;
    };

    classProto.load = function(){
        var that = this;
        if(!that.isLoaded){
            that.renderController();
        }
        return that;
    };

    classProto.complete = function(){
        var that = this;
        that.triggerEvent('onComplete', that.items);
        return that
    };

    classProto.renderView = function(){
        var that = this;
        that.triggerEvent('onRenderViewStart');
        // Structure
        that.nodes['container'] = cm.node('div', {'class' : 'com__file-manager'},
            that.nodes['inner'] = cm.node('div', {'class' : 'inner'},
                that.renderHolder(),
                that.renderContent()
            )
        );
        // Events
        that.triggerEvent('onRenderViewProcess');
        that.triggerEvent('onRenderViewEnd');
        return that;
    };

    classProto.renderHolder = function(){
        var that = this,
            nodes = {};
        that.triggerEvent('onRenderHolderStart');
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__file-manager__holder'},
            nodes['inner'] = cm.node('div', {'class' : 'inner'})
        );
        // Events
        that.triggerEvent('onRenderHolderProcess');
        that.nodes['holder'] = nodes;
        that.triggerEvent('onRenderHolderEnd');
        return nodes['container'];
    };

    classProto.renderContent = function(){
        var that = this,
            nodes = {};
        that.triggerEvent('onRenderContentStart');
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__file-manager__content'});
        // Events
        that.triggerEvent('onRenderContentProcess');
        that.nodes['content'] = nodes;
        that.triggerEvent('onRenderContentEnd');
        return nodes['container'];
    };

    classProto.renderViewModel = function(){
        var that = this;
        if(that.params['showStats']){
            cm.getConstructor(that.params['statsConstructor'], function(classConstructor){
                that.components['stats'] = new classConstructor(
                    cm.merge(that.params['statsParams'], {
                        'container' : that.nodes['content']['container']
                    })
                );
            });
        }else{
            cm.remove(that.nodes['content']['container']);
        }
        if(!that.params['lazy']){
            that.renderController();
        }
        return that;
    };

    classProto.renderController = function(){
        var that = this;
        return that;
    };

    classProto.setAttributes = function(){
        var that = this;
        // Call parent method
        classInherit.prototype.setAttributes.apply(that, arguments);
        // Attributes
        that.params['fullSize'] && cm.addClass(that.nodes['container'], 'is-fullsize');
        return that;
    };

    /* *** PROCESS FILES *** */

    classProto.processFiles = function(data){
        var that = this,
            files = [],
            max;
        if(cm.isArray(data)){
            files = data.map(function(file){
                return that.convertFile(file);
            });
        }else if(cm.isObject(data)){
            files.push(that.convertFile(data));
        }
        if(!that.params['max']){
            that.items = files;
        }else if(files.length){
            max = Math.min(that.params['max'], files.length);
            that.items = files.slice(0, max);
        }else{
            that.items = [];
        }
        that.triggerEvent('onSelect', that.items);
        return that;
    };

    classProto.convertFile = function(data){
        return data;
    };
});
cm.define('Com.AbstractFileManagerContainer', {
    'extend' : 'Com.AbstractContainer',
    'events' : [
        'onComplete',
        'onGet'
    ],
    'params' : {
        'constructor' : 'Com.AbstractFileManager',
        'constructorParams' : {
            'embedStructure' : 'append'
        },
        'placeholder' : true,
        'placeholderConstructor' : 'Com.DialogContainer',
        'placeholderParams' : {
            'renderButtons' : true,
            'constructorParams' : {
                'width' : 900
            }
        }
    },
    'strings' : {
        'title_single' : 'Please select file',
        'title_multiple' : 'Please select files',
        'close' : 'Cancel',
        'save' : 'Select'
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractContainer.apply(that, arguments);
});

cm.getConstructor('Com.AbstractFileManagerContainer', function(classConstructor, className, classProto){
    var _inherit = classProto._inherit;

    classProto.construct = function(){
        var that = this;
        // Bind context to methods
        that.validateParamsEndHandler = that.validateParamsEnd.bind(that);
        that.renderControllerProcessHandler = that.renderControllerProcess.bind(that);
        that.getHandler = that.get.bind(that);
        that.selectHandler = that.select.bind(that);
        // Add events
        that.addEvent('onValidateParamsEnd', that.validateParamsEndHandler);
        that.addEvent('onRenderControllerProcess', that.renderControllerProcessHandler);
        // Call parent method
        _inherit.prototype.construct.apply(that, arguments);
        return that;
    };

    classProto.get = function(e){
        e && cm.preventDefault(e);
        var that = this;
        that.components['controller'] && that.components['controller'].get && that.components['controller'].get();
        return that;
    };

    classProto.complete = function(e){
        e && cm.preventDefault(e);
        var that = this;
        that.components['controller'] && that.components['controller'].complete && that.components['controller'].complete();
        return that;
    };

    classProto.validateParamsEnd = function(){
        var that = this;
        // Validate Language Strings
        that.setLangs({
            'title' : !that.params['constructorParams']['max'] || that.params['constructorParams']['max'] > 1 ? that.lang('title_multiple') : that.lang('title_single')
        });
    };

    classProto.renderControllerEvents = function(){
        var that = this;
        // Call parent method
        _inherit.prototype.renderControllerEvents.apply(that, arguments);
        // Add specific events
        that.components['controller'].addEvent('onGet', function(my, data){
            that.afterGet(data);
        });
        that.components['controller'].addEvent('onComplete', function(my, data){
            that.afterComplete(data);
        });
        return that;
    };

    classProto.renderPlaceholderButtons = function(){
        var that = this;
        that.components['placeholder'].addButton({
            'name' : 'close',
            'label' : that.lang('close'),
            'classes' : 'button-transparent',
            'callback' : that.closeHandler
        });
        that.components['placeholder'].addButton({
            'name' : 'save',
            'label' : that.lang('save'),
            'classes' : 'button-primary',
            'callback' : that.completeHandler
        });
        return that;
    };

    /* *** AFTER EVENTS *** */

    classProto.afterGet = function(data){
        var that = this;
        that.triggerEvent('onGet', data);
        return that;
    };

    classProto.afterComplete = function(data){
        var that = this;
        that.triggerEvent('onComplete', data);
        that.close();
        return that;
    };
});
cm.define('Com.AbstractFormField', {
    'extend' : 'Com.AbstractController',
    'events' : [
        'onShow',
        'onHide',
        'onFocus',
        'onBlur',
        'onValidate',
        'onChange',
        'onInput',
        'onSelect',
        'onReset',
        'onRequestStart',
        'onRequestEnd',
        'onRequestSuccess',
        'onRequestError',
        'onRequestAbort',
        'onFieldConstructed',
    ],
    'params' : {
        'renderStructure' : true,
        'embedStructureOnRender' : true,
        'removeOnDestruct' : false,
        'controllerEvents' : true,
        'renderStructureField' : true,
        'renderStructureContent' : true,
        'renderError' : true,
        'renderErrorMessage' : true,
        'renderRequiredMessage' : false,
        'form' : false,
        'outputValueType' : 'auto',      // 'auto' | 'raw' | 'text' | 'option'
        'inputValueType' : 'auto',       // 'auto' | 'unset'
        'validateValueType' : 'auto',
        'value' : null,
        'values': null,
        'defaultValue' : null,
        'dataValue' : null,
        'isValueOption' : false,
        'setHiddenValue' : true,
        'minLength' : 0,
        'maxLength' : 0,
        'min' : 0,
        'max' : 0,
        'multiple' : false,
        'type' : false,
        'label' : '',
        'icon' : false,
        'placeholder' : '',
        'placeholderAsterisk' : true,
        'autocomplete' : null,
        'showPlaceholderAbove' : false,
        'title' : '',
        'hint' : '',
        'messagePosition' : 'content', // label | content
        'adaptive' : true,
        'visible' : true,
        'disabled' : false,
        'checked' : null,
        'renderName' : false,
        'inputClasses': [],
        'options' : [],
        'constraints' : [
            /* cm.constraintsPattern(/^\s*$/g, false, message), */
            /* cm.constraintsPattern(10, false, message) */
            /* cm.constraintsPattern(function, true, message) */
        ],
        'required' : false,
        'requiredAsterisk' : true,
        'validate' : false,
        'constructor' : false,
        'constructorParams' : {
            'removeOnDestruct' : false
        },
        'preload' : false,
        'responseKey' : 'data',
        'ajax' : {
            'type' : 'json',
            'method' : 'get'
        },

        'help' : null,
        'helpType' : 'tooltip', // tooltip | container
        'helpAlign' : 'left',
        'helpConstructor' : 'Com.HelpBubble',
        'helpParams' : {
            'renderStructure' : true,
            'embedStructureOnRender' : true
        }
    },
    'strings' : {
        'required' : 'This field is required.',
        'too_short' : 'Value should be at least %count% characters.',
        'too_long' : 'Value should be less than %count% characters.',
        'asterisk' : {
            'char' : '*',
            'title' : 'Required'
        },
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractController.apply(that, arguments);
});

cm.getConstructor('Com.AbstractFormField', function(classConstructor, className, classProto, classInherit){
    /******* SYSTEM *******/

    classProto.onConstructStart = function(){
        var that = this;
        // Variables
        that.fieldName = null;
        that.isVisible = null;
        that.isAjax = false;
        that.isProcess = false;
        that.isPreloaded = false;
        that.isFocus = false;
        that.wasFocus = false;
        that.nodeTagName = null;
        // Bind context
        that.focusHandler = that.focus.bind(that);
        that.blurHandler = that.blur.bind(that);
        that.focusEventHandler = that.focusEvent.bind(that);
        that.blurEventHandler = that.blurEvent.bind(that);
        that.inputEventHandler = that.inputEvent.bind(that);
        that.selectEventHandler = that.selectEvent.bind(that);
        that.changeEventHandler = that.changeEvent.bind(that);
        that.resetEventHandler = that.resetEvent.bind(that);
        that.iconEventHandler = that.iconEvent.bind(that);
    };

    classProto.onAfterRender = function(){
        var that = this;
        that.params.disabled && that.disable();
        return that;
    };

    classProto.onConstructEnd = function(){
        var that = this;
        if(that.isAjax){
            that.ajaxHandler = that.callbacks.request(that, cm.clone(that.params.ajax));
        }
    };

    classProto.onDestruct = function(){
        var that = this;
        if(that.isAjax){
            that.ajaxHandler.abort();
        }
        that.controller && cm.isFunction(that.controller.destruct) && that.controller.destruct();
    };

    classProto.onValidateParams = function(){
        var that = this;
        that.validateParamsValue();

        // Validate
        that.nodeTagName = that.params.node.tagName.toLowerCase();
        that.fieldName = that.params.formName + '[' + that.params.name + ']';
        if(
            that.params.required &&
            that.params.requiredAsterisk &&
            that.params.placeholderAsterisk &&
            !cm.isEmpty(that.params.placeholder)
        ){
            that.params.placeholder = [that.params.placeholder, that.msg('asterisk.char')].join(' ');
        }
        if(that.params.validateValueType === 'auto'){
            that.params.validateValueType = that.params.outputValueType;
        }

        // Validate options
        if(!cm.isEmpty(that.params.options)){
            that.params.options = that.callbacks.convert(that, that.params.options);
        }

        // Validate input constructor params
        that.params.constructorParams = cm.merge(that.validateConstructorParams(), that.params.constructorParams);

        // Validate help params
        that.params.helpParams = cm.merge(that.validateHelpParams(), that.params.helpParams);

        // Components
        that.components.form = that.params.form;

        // Ajax
        if(that.params.preload && !cm.isEmpty(that.params.ajax) && !cm.isEmpty(that.params.ajax.url)){
            that.isAjax = true;
        }
    };

    classProto.validateParamsValue = function(){
        var that = this;
        that.params.value = that.validateParamsValueHelper(that.params.value);
        that.params.defaultValue = that.validateParamsValueHelper(that.params.defaultValue);
        that.params.value = !cm.isEmpty(that.params.value) ? that.params.value : that.params.defaultValue;
        that.params.dataValue = !cm.isEmpty(that.params.dataValue) ? that.params.dataValue : that.params.isValueOption ? that.params.value : null;
    };

    classProto.validateParamsValueHelper = function(value){
        var that = this;
        if(that.params.isValueOption && !cm.isEmpty(value)){
            if(cm.isObject(value)){
                value.value = !cm.isEmpty(value.value) ? value.value : value.text;
                value.text = !cm.isEmpty(value.text) ? value.text : value.value;
            }else{
                value = {
                    'value' : value,
                    'text' : value
                };
            }
        }
        return value;
    };

    classProto.validateConstructorParams = function() {
        var that = this;
        var params = {};
        var options = [
            'id',
            'title',
            'name',
            'visibleName',
            'renderName',
            'defaultValue',
            'values',
            'options',
            'required',
            'renderRequiredMessage',
            'validate',
            'disabled',
            'checked',
            'minLength',
            'maxLength',
            'min',
            'max',
            'multiple',
            'autocomplete',
            'ajax'
        ];
        cm.forEach(options, function(item){
            if(typeof that.params[item] !== 'undefined'){
                params[item] = that.params[item];
            }
        });

        params.field = that;
        params.fieldName = that.fieldName;
        params.value = !cm.isEmpty(that.params.dataValue) ? that.params.dataValue : that.params.value;
        params.placeholder = !that.params.showPlaceholderAbove ? that.params.placeholder : '';

        return params;
    };

    classProto.validateHelpParams = function() {
        var that = this;
        return {
            title: that.params.label,
            content: that.params.help,
            name: that.params.name,
            type: that.params.helpType,
            align: that.params.helpAlign,
        };
    };

    /******* VIEW - MODEL *******/

    classProto.renderView = function(){
        var that = this;
        that.triggerEvent('onRenderViewStart');
        // Render field structure
        if(that.params.renderStructureField){
            that.renderFiled();
        }
        // Render custom structure
        if(that.params.renderStructureContent){
            that.nodes.content = that.renderContent();
            that.nodes.contentContainer = that.nodes.content.container;
            that.nodes.contentInput = that.nodes.content.input;
        }
        // Append
        if(that.params.renderStructureField){
            cm.insertFirst(that.nodes.contentContainer, that.nodes.value);
        }else if(that.params.renderStructureContent){
            that.nodes.container = that.nodes.contentContainer;
        }else{
            that.nodes.contentContainer = that.nodes.container = that.params.node;
            that.nodes.contentInput = that.params.node;
        }
        that.triggerEvent('onRenderViewProcess');
        that.triggerEvent('onRenderViewEnd');
    };

    classProto.renderFiled = function(){
        var that = this;
        // Structure
        that.nodes.container = cm.node('dl', {'class' : 'pt__field'},
            that.nodes.label = cm.node('dt'),
            that.nodes.value = cm.node('dd')
        );
        switch(that.params.messagePosition){
            case 'label':
                that.nodes.messages = that.nodes.label;
                break;
            case 'content':
            case 'value':
                that.nodes.messages = that.nodes.value;
                break;
        }
        // Label
        that.renderFiledLabel();
        // Hints
        if(!cm.isEmpty(that.params.hint)){
            that.renderHint(that.params.hint);
        }
    };

    classProto.renderFiledLabel = function(){
        var that = this;
        // Label
        if(!cm.isEmpty(that.params.label)){
            that.nodes.labelText = cm.node('label');
            if(that.params.renderName){
                that.nodes.labelText.setAttribute('for', that.fieldName)
            }
            if(cm.isNode(that.params.label)){
                cm.appendChild(that.params.label, that.nodes.labelText);
            }else{
                that.nodes.labelText.innerHTML = that.params.label;
            }
            cm.appendChild(that.nodes.labelText, that.nodes.label);
        }
        // Required
        that.nodes.required = cm.node('span', {'class' : 'required', 'title' : that.msg('asterisk.title')}, that.msg('asterisk.char'));
        if(that.params.required && that.params.requiredAsterisk){
            cm.appendChild(that.nodes.required, that.nodes.labelText || that.nodes.label);
        }
    };

    classProto.renderContent = function(){
        var that = this;
        // Structure
        var nodes = {
            input: that.params.node,
        };
        nodes.container = cm.node('div', {'class' : 'pt__field__content'}, nodes.input);

        // Icon
        if(that.params.icon){
            if(cm.isNode(that.params.icon)){
                nodes.icon = that.params.icon;
            }else{
                nodes.icon = cm.node('div', {'class' : that.params.icon});
            }
            cm.addEvent(nodes.icon, 'mousedown', that.iconEventHandler);
            cm.addEvent(nodes.icon, 'click', that.iconEventHandler);
            nodes.field = cm.node('div', {'class' : 'pt__input'}, nodes.input, nodes.icon);
            cm.addClass(nodes.field, that.params.inputClasses)
            cm.appendChild(nodes.field, nodes.container);
        }

        // Placeholder
        if(that.params.showPlaceholderAbove && !cm.isEmpty(that.params.placeholder)){
            nodes.placeholder = cm.node('label', {'class' : 'placeholder', 'for' : that.fieldName},
                nodes.placeholderLabel = cm.node('span', {'innerHTML' : that.params.placeholder})
            );
            cm.appendChild(nodes.placeholder, nodes.container);
            cm.addClass(nodes.container, 'is-placeholder-above');
        }

        // Export
        return nodes;
    };

    classProto.renderOptions = function(options){
        var that = this,
            option;
        switch(that.nodeTagName){
            case 'select' :
                cm.forEach(options, function(item){
                    item.disabled = !cm.isUndefined(item.disabled) ? item.disabled : false;
                    item.hidden = !cm.isUndefined(item.hidden) ? item.hidden : false;
                    option = cm.node('option', {
                        'value' : item.value,
                        'innerHTML' : item.text
                    });
                    option.hidden = item.hidden;
                    option.disabled = item.disabled;
                    cm.appendChild(option, that.nodes.contentInput);
                });
                cm.setSelect(that.nodes.contentInput, that.params.value);
                break;
        }
    };

    classProto.setAttributes = function(){
        var that = this;
        // Call parent method
        classInherit.prototype.setAttributes.apply(that, arguments);
        // Attributes
        if(that.params.renderStructureContent){
            that.setInputAttributes();
        }
        // Classes
        if(that.params.adaptive){
            cm.addClass(that.nodes.container, 'is-adaptive');
        }
        if(!that.params.visible){
            that.hide(false);
        }else{
            that.show(false);
        }
    };

    classProto.setInputAttributes = function() {
        var that = this;
        if(!cm.isEmpty(that.fieldName)){
            that.nodes.contentInput.setAttribute('id', that.fieldName);
        }
        if(!cm.isEmpty(that.params.name)){
            that.nodes.contentInput.setAttribute('name', that.params.name);
        }
        if(!cm.isEmpty(that.params.value) && that.params.inputValueType !== 'unset'){
            var value;
            if(that.params.isValueOption){
                value = that.params.value.value;
            }else if(cm.isObject(that.params.value) || cm.isArray(that.params.value)){
                value = cm.stringifyJSON(that.params.value);
            }else{
                value = that.params.value;
            }
            switch(that.nodeTagName){
                case 'select':
                    cm.setSelect(that.nodes.contentInput, value);
                    break;
                default:
                    that.nodes.contentInput.setAttribute('value', value);
                    break;
            }
        }
        if(!cm.isEmpty(that.params.dataValue) && that.params.inputValueType !== 'unset'){
            var dataValue;
            if(cm.isObject(that.params.dataValue) || cm.isArray(that.params.dataValue)){
                dataValue = cm.stringifyJSON(that.params.dataValue);
            }else{
                dataValue = that.params.dataValue;
            }
            that.nodes.contentInput.setAttribute('data-value', dataValue);
        }
        if(!cm.isEmpty(that.params.placeholder) && !that.params.showPlaceholderAbove){
            that.nodes.contentInput.setAttribute('placeholder', that.params.placeholder);
            if(cm.isEmpty(that.params.label) && cm.isEmpty(that.params.title)){
                that.nodes.contentInput.setAttribute('aria-label', that.params.placeholder);
            }
        }
        if(!cm.isEmpty(that.params.autocomplete)){
            that.nodes.contentInput.setAttribute('autocomplete', that.params.autocomplete);
        }
        if(!cm.isEmpty(that.params.title)){
            that.nodes.contentInput.setAttribute('title', that.params.title);
        }
        if(that.params.disabled){
            that.nodes.contentInput.setAttribute('disabled', 'disabled');
        }
        if(that.params.multiple){
            that.nodes.contentInput.setAttribute('multiple', 'multiple');
        }
    };

    classProto.renderViewModel = function(){
        var that = this;
        // Call parent method - renderViewModel
        classInherit.prototype.renderViewModel.apply(that, arguments);
        // Options
        if(that.params.renderStructureContent && that.params.inputValueType !== 'unset' && !cm.isEmpty(that.params.options)){
            that.renderOptions(that.params.options);
        }
        // Help Bubble
        if(that.params.renderStructureField && !cm.isEmpty(that.params.help)){
            cm.getConstructor(that.params.helpConstructor, function(classConstructor){
                that.components.help = new classConstructor(
                    cm.merge(that.params.helpParams, {
                        'container' : that.nodes.label
                    })
                );
            });
        }
        // Controller component
        if(!that.isAjax || that.isPreloaded){
            that.renderController();
        }
    };

    classProto.renderController = function(){
        var that = this;
        if(that.params.constructor){
            cm.getConstructor(that.params.constructor, function(classConstructor){
                that.components.controller = new classConstructor(
                    cm.merge(that.params.constructorParams, {
                        'node' : that.nodes.contentInput,
                        'form' : that.components.form,
                        'formField' : that
                    })
                );
                that.renderControllerEvents();
                that.togglePlaceholder();
            });
        }
    };

    classProto.renderControllerEvents = function(){
        var that = this;
        that.components.controller.addEvent('onFocus', that.focusEventHandler);
        that.components.controller.addEvent('onBlur', that.blurEventHandler);
        that.components.controller.addEvent('onSelect', that.selectEventHandler);
        that.components.controller.addEvent('onInput', that.inputEventHandler);
        that.components.controller.addEvent('onChange', that.changeEventHandler);
        that.components.controller.addEvent('onReset', that.resetEventHandler);
    };

    classProto.togglePlaceholder = function(){
        var that = this;
        if(that.params.showPlaceholderAbove){
            if(that.params.showPlaceholderAbove === 'always' || that.isFocus || !cm.isEmpty(that.getText())){
                cm.addClass(that.nodes.content.placeholder, 'pull-top');
            }else{
                cm.removeClass(that.nodes.content.placeholder, 'pull-top');
            }
        }
    };

    /******* EVENTS *******/

    classProto.focusEvent = function(controller, data){
        var that = this;
        that.isFocus = true;
        that.togglePlaceholder();
        that.triggerEvent('onFocus', data);
    };

    classProto.blurEvent = function(controller, data){
        var that = this;
        that.isFocus = false;
        that.togglePlaceholder();
        that.triggerEvent('onBlur', data);
    };

    classProto.inputEvent = function(controller, data){
        var that = this;
        that.triggerEvent('onInput', data);
    };

    classProto.selectEvent = function(controller, data){
        var that = this;
        that.triggerEvent('onSelect', data);
    };

    classProto.changeEvent = function(controller, data){
        var that = this;
        that.togglePlaceholder();
        that.triggerEvent('onChange', data);
    };

    classProto.resetEvent = function(controller, data){
        var that = this;
        that.togglePlaceholder();
        that.triggerEvent('onReset', data);
    };

    classProto.iconEvent = function(e){
        var that = this;
        if (e.type === 'mousedown') {
            that.wasFocus = that.isFocus;
        }
        if (e.type === 'click' && !that.wasFocus) {
            that.focus(true);
        }
    };

    /******* DATA *******/

    classProto.set = function(value, triggerEvents){
        var that = this;
        that.components.controller && cm.isFunction(that.components.controller.set) && that.components.controller.set(value, triggerEvents);
        return that;
    };

    classProto.get = function(type){
        var that = this;
        type = !cm.isUndefined(type) ? type : that.params.outputValueType;
        switch(type){
            case 'raw':
                return that.getRaw();
            case 'text':
                return that.getText();
            case 'json':
                return that.getJSON();
            case 'option':
                return that.getValueOption();
            default:
                return that.components.controller && cm.isFunction(that.components.controller.get) ? that.components.controller.get() : null;
        }
    };

    classProto.getRaw = function(){
        var that = this;
        return that.components.controller && cm.isFunction(that.components.controller.getRaw) ? that.components.controller.getRaw() : that.get('auto');
    };

    classProto.getText = function(){
        var that = this;
        return that.components.controller && cm.isFunction(that.components.controller.getText) ? that.components.controller.getText() : that.get('auto');
    };

    classProto.getJSON = function() {
        var that = this;
        return that.components.controller && cm.isFunction(that.components.controller.getJSON) ? that.components.controller.getJSON() : that.get('auto');
    };

    classProto.getValueOption = function(){
        var that = this;
        return that.components.controller && cm.isFunction(that.components.controller.getValueOption) ? that.components.controller.getValueOption() : that.get('auto');
    };

    classProto.reset = function(){
        var that = this;
        that.components.controller && cm.isFunction(that.components.controller.reset) && that.components.controller.reset();
        return that;
    };

    classProto.validateValue = function(data){
        var that = this;

        // Validate data config
        data = cm.merge({
            field: that,
            form: that.components.form,
            valid: true,
            message: null,
            value: that.get(that.params.validateValueType),
            required: false,
            silent: false,
            triggerEvents: true,
        }, data);

        data.required = that.params.required || data.required;

        if(cm.isEmpty(data.value)){
            if(data.required){
                data.valid = false;
                if (that.params.renderRequiredMessage) {
                    data.message = that.msg('required');
                }
                return data;
            }else{
                data.valid = true;
                return data;
            }
        }
        if(that.params.minLength && data.value.length < that.params.minLength){
            data.valid = false;
            data.message = that.msg('too_short', {
                '%count%' : that.params.minLength
            });
            return data;
        }
        if(that.params.maxLength && data.value.length > that.params.maxLength){
            data.valid = false;
            data.message = that.msg('too_long', {
                '%count%' : that.params.maxLength
            });
            return data;
        }
        if(!cm.isEmpty(that.params.constraints)){
            var testData = cm.clone(data);
            var constraintsData = that.validateConstraints(testData);
            if(constraintsData){
                return constraintsData;
            }
        }
        if(that.components.controller && cm.isFunction(that.components.controller.validator)){
            return that.components.controller.validator(data);
        }
        return data;
    };

    classProto.validate = function(data){
        var that = this;

        // Validate data config
        data = cm.merge({
            required: false,
            silent: false,
            triggerEvents: true,
        }, data);

        data.validate = that.params.validate;
        data.required = that.params.required || data.required;

        if(!data.required && !data.validate){
            return true;
        }

        data = that.validateValue(data);
        if(data.valid || data.silent){
            that.clearError();
        }else{
            that.renderError(data.message);
        }

        if(data.triggerEvents && !data.silent){
            that.triggerEvent('onValidate', data);
        }

        return data.valid;
    };

    /*** CONSTRAINTS ***/

    classProto.addConstraint = function(constraint){
        var that = this;
        if(cm.isFunction(constraint)){
            that.params.constraints = cm.arrayAdd(that.params.constraints, constraint);
        }
        return that;
    };

    classProto.removeConstraint = function(constraint){
        var that = this;
        if(cm.isFunction(constraint)){
            that.params.constraints = cm.arrayRemove(that.params.constraints, constraint);
        }
        return that;
    };

    classProto.validateConstraints = function(data){
        var that = this,
            constraintsTest,
            constraintsData;
        constraintsTest = that.params.constraints.some(function(item){
            if(cm.isFunction(item)){
                constraintsData = item(data);
                return !constraintsData.valid;
            }
            return false;
        });
        if(constraintsTest){
            return constraintsData;
        }
        return false;
    };

    /******* MESSAGES *******/

    classProto.renderHint = function(message, params){
        var that = this;
        params = cm.merge({
            'className' : null
        },params);

        that.clearHint();

        // Structure
        that.nodes.hints = cm.node('ul', {'class' : 'pt__field__hint'});
        if(cm.isArray(message)){
            cm.forEach(message, function(messageItem){
                that.renderHintMessage(messageItem, params);
            });
        }else{
            that.renderHintMessage(message, params);
        }

        // Append
        if(that.params.renderError && that.nodes.errors && cm.inDOM(that.nodes.errors)){
            cm.insertBefore(that.nodes.hints, that.nodes.errors);
        }else{
            cm.appendChild(that.nodes.hints, that.nodes.messages);
        }

        return that;
    };

    classProto.renderHintMessage = function(message, params) {
        var that = this;
        var node = cm.node('li', {innerHTML: message, classes: params.className});
        cm.appendChild(node, that.nodes.hints);
    };

    classProto.clearHint = function(){
        var that = this;
        cm.remove(that.nodes.hints);
        return that;
    };

    classProto.renderError = function(message, params){
        var that = this,
            messageNode;
        params = cm.merge({
            'className' : 'error'
        },params);

        that.clearError();
        if(!that.params.renderError){
            return that;
        }

        cm.addClass(that.nodes.container, 'error');
        cm.addClass(that.nodes.contentContainer, 'error');
        if(that.params.renderErrorMessage && !cm.isEmpty(message)){
            that.nodes.errors = cm.node('ul', {'class' : 'pt__field__error pt__field__hint'},
                messageNode = cm.node('li', {'innerHTML' : message})
            );
            if(!cm.isEmpty(params.className)){
                cm.addClass(messageNode, params.className);
            }
            cm.insertLast(that.nodes.errors, that.nodes.messages);
        }

        return that;
    };

    classProto.clearError = function(){
        var that = this;
        cm.removeClass(that.nodes.container, 'error');
        cm.removeClass(that.nodes.contentContainer, 'error');
        cm.remove(that.nodes.errors);
        return that;
    };

    /******* PUBLIC *******/

    classProto.show = function(triggerEvent){
        var that = this;
        triggerEvent = cm.isUndefined(triggerEvent) ? true : triggerEvent;
        if(!cm.isBoolean(that.isVisible) || !that.isVisible){
            that.isVisible = true;
            cm.removeClass(that.nodes.container, 'is-hidden');
            triggerEvent && that.triggerEvent('onShow', that.get());
        }
        return that;
    };

    classProto.hide = function(triggerEvent){
        var that = this;
        triggerEvent = cm.isUndefined(triggerEvent) ? true : triggerEvent;
        if(!cm.isBoolean(that.isVisible) || that.isVisible){
            that.isVisible = false;
            cm.addClass(that.nodes.container, 'is-hidden');
            triggerEvent && that.triggerEvent('onHide', that.get());
        }
        return that;
    };

    classProto.toggleVisibility = function(value, triggerEvent){
        var that = this;
        if(value){
            that.show(triggerEvent);
        }else{
            that.hide(triggerEvent);
        }
        return that;
    };

    classProto.enable = function(){
        var that = this;
        cm.removeClass(that.nodes.container, 'disabled');
        cm.removeClass(that.nodes.contentContainer, 'disabled');
        that.components.controller && cm.isFunction(that.components.controller.enable) && that.components.controller.enable();
        return that;
    };

    classProto.disable = function(){
        var that = this;
        cm.addClass(that.nodes.container, 'disabled');
        cm.addClass(that.nodes.contentContainer, 'disabled');
        that.components.controller && cm.isFunction(that.components.controller.disable) && that.components.controller.disable();
        return that;
    };

    classProto.focus = function(selection){
        var that = this;
        that.components.controller && cm.isFunction(that.components.controller.focus) && that.components.controller.focus(selection);
        return that;
    };

    classProto.blur = function(){
        var that = this;
        that.components.controller && cm.isFunction(that.components.controller.blur) && that.components.controller.blur();
        return that;
    };

    classProto.setRequired = function(){
        var that = this;
        that.params.required = true;
        if(that.params.requiredAsterisk){
            cm.appendChild(that.nodes.required, that.nodes.labelText || that.nodes.label);
        }
        return that;
    };

    classProto.unsetRequired = function(){
        var that = this;
        that.params.required = false;
        cm.remove(that.nodes.required);
        return that;
    };

    classProto.toggleRequired = function(value){
        var that = this;
        if(value){
            that.setRequired();
        }else{
            that.unsetRequired();
        }
        return that;
    };

    classProto.getController = function(){
        var that = this;
        return that.components.controller;
    };

    classProto.getName = function(){
        var that = this;
        return that.params.name;
    };

    classProto.getContainer = function(){
        var that = this;
        return that.nodes.container;
    };

    classProto.getContent = function(){
        var that = this;
        return that.nodes.content;
    };

    /******* CALLBACKS *******/

    classProto.callbacks.prepare = function(that, config){
        // Prepare
        config.url = cm.strReplace(config.url, {
            '%baseUrl%' : cm._baseUrl
        });
        config.params = cm.objectReplace(config.params, {
            '%baseUrl%' : cm._baseUrl
        });
        return config;
    };

    classProto.callbacks.request = function(that, config){
        config = that.callbacks.prepare(that, config);
        // Return ajax handler (XMLHttpRequest) to providing abort method.
        return cm.ajax(
            cm.merge(config, {
                'onStart' : function(){
                    that.callbacks.start(that, config);
                },
                'onSuccess' : function(response){
                    that.callbacks.response(that, config, response);
                },
                'onError' : function(){
                    that.callbacks.error(that, config);
                },
                'onAbort' : function(){
                    that.callbacks.abort(that, config);
                },
                'onEnd' : function(response){
                    that.callbacks.end(that, config, response);
                }
            })
        );
    };

    classProto.callbacks.start = function(that, config){
        that.isProcess = true;
        that.triggerEvent('onRequestStart');
    };

    classProto.callbacks.end = function(that, config){
        that.isProcess = false;
        that.isPreloaded = true;
        that.renderController();
        that.triggerEvent('onRequestEnd');
    };

    classProto.callbacks.response = function(that, config, response){
        if(!cm.isEmpty(response)){
            response = that.callbacks.filter(that, config, response);
        }
        if(!cm.isEmpty(response)){
            that.callbacks.success(that, that.callbacks.convert(that, response));
        }else{
            that.callbacks.error(that, config);
        }
    };

    /*** DATA ***/

    classProto.callbacks.filter = function(that, config, response){
        var data = [],
            dataItem = cm.objectPath(that.params.responseKey, response);
        if(dataItem && !cm.isEmpty(dataItem)){
            data = dataItem;
        }
        return data;
    };

    classProto.callbacks.convert = function(that, data){
        return data.map(function(item){
            return that.callbacks.convertItem(that, item);
        });
    };

    classProto.callbacks.convertItem = function(that, item){
        if(cm.isEmpty(item)){
            return null
        }else if(!cm.isObject(item)){
            return {'text' : item, 'value' : item};
        }else{
            if(cm.isUndefined(item.value)){
                item.value = item.text
            }
            return item;
        }
    };

    /*** EVENTS ***/

    classProto.callbacks.success = function(that, response){
        that.params.options = cm.merge(that.params.options, response);
        that.params.constructorParams.options = !cm.isEmpty(that.params.options) ? that.params.options : that.params.constructorParams.options;
        that.renderOptions(response);
        that.triggerEvent('onRequestSuccess', response);
    };

    classProto.callbacks.error = function(that, config){
        that.triggerEvent('onRequestError');
    };

    classProto.callbacks.abort = function(that, config){
        that.triggerEvent('onRequestAbort');
    };
});

cm.define('Com.AbstractInputContainer', {
    'extend' : 'Com.AbstractController',
    'events' : [
        'onRenderControllerStart',
        'onRenderControllerProcess',
        'onRenderController',
        'onRenderControllerEnd',
        'onSelect',
        'onChange',
        'onReset'
    ],
    'params' : {
        'renderStructure' : false,
        'embedStructureOnRender' : false,
        'controllerEvents' : true,
        'constructor' : 'Com.AbstractInput',
        'constructorParams' : {}
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractController.apply(that, arguments);
});

cm.getConstructor('Com.AbstractInputContainer', function(classConstructor, className, classProto, classInherit){
    classProto.construct = function(){
        var that = this;
        that.resetHandler = that.reset.bind(that);
        that.enableHandler = that.enable.bind(that);
        that.disableHandler = that.disable.bind(that);
        // Call parent method
        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.onValidateParams = function(){
        var that = this;
        that.components['formField'] = that.params['formField'];
        that.components['form'] = that.params['form'];
    };

    classProto.renderViewModel = function(){
        var that = this;
        // Render Select
        that.renderController();
        return that;
    };

    classProto.renderController = function(){
        var that = this,
            params;
        cm.getConstructor(that.params['constructor'], function(classConstructor){
            that.triggerEvent('onRenderControllerStart');
            params = that.validateControllerParams();
            that.components['controller'] = new classConstructor(params);
            that.triggerEvent('onRenderControllerProcess', that.components['controller']);
            that.renderControllerEvents();
            that.triggerEvent('onRenderController', that.components['controller']);
            that.triggerEvent('onRenderControllerEnd', that.components['controller']);
        });
    };

    classProto.validateControllerParams = function(){
        var that = this;
        return cm.merge(that.params['constructorParams'], {
            'node' : that.params['node'],
            'value' : that.params['value'],
            'defaultValue' : that.params['defaultValue']
        });
    };

    classProto.renderControllerEvents = function(){
        var that = this;
        that.components['controller'].addEvent('onSelect', function(controller, data){
            that.triggerEvent('onSelect', data);
        });
        that.components['controller'].addEvent('onChange', function(controller, data){
            that.triggerEvent('onChange', data);
        });
        that.components['controller'].addEvent('onReset', function(controller, data){
            that.triggerEvent('onReset', data);
        });
        return that;
    };

    /******* PUBLIC *******/

    classProto.set = function(value){
        var that = this;
        that.components['controller'] && cm.isFunction(that.components['controller'].set) && that.components['controller'].set(value);
        return that;
    };

    classProto.get = function(){
        var that = this;
        return that.components['controller'] && cm.isFunction(that.components['controller'].get)  && that.components['controller'].get();
    };

    classProto.getRaw = function(){
        var that = this;
        return that.components['controller'] && cm.isFunction(that.components['controller'].getRaw)  && that.components['controller'].getRaw() || that.get();
    };

    classProto.reset = function(){
        var that = this;
        return that.components['controller'] && cm.isFunction(that.components['controller'].reset)  && that.components['controller'].reset();
    };

    classProto.enable = function(){
        var that = this;
        that.components['controller'] && cm.isFunction(that.components['controller'].enable)  && that.components['controller'].enable();
        return that;
    };

    classProto.disable = function(){
        var that = this;
        that.components['controller'] && cm.isFunction(that.components['controller'].disable)  && that.components['controller'].disable();
        return that;
    };
});
cm.define('Com.AbstractRange', {
    'extend' : 'Com.AbstractInput',
    'params' : {
        'renderStructure' : true,
        'embedStructureOnRender' : true,
        'controllerEvents' : true,
        'redrawOnRender' : true,
        'className' : 'com__range',
        'theme' : 'theme--arrows',
        'min' : 0,
        'max' : 100,
        'value' : 0,
        'precision': 0,
        'range' : false,
        'direction' : 'horizontal',
        'showCounter' : true,
        'draggableConstructor' : 'Com.AbstractRangeDrag',
        'draggableParams' : {}
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractInput.apply(that, arguments);
});

cm.getConstructor('Com.AbstractRange', function(classConstructor, className, classProto, classInherit){
    classProto.onConstructStart = function(){
        var that = this;
        // Variables
        that.components['draggable'] = [];
        that.sort = 'asc';
    };

    classProto.onRedraw = function(){
        var that = this;
        that.setData();
    };

    classProto.onValidateParamsEnd = function(){
        var that = this;
        // Sort
        that.sort = (that.params['min'] > that.params['max']) ? 'asc' : 'desc';
        that.targetDraggable = !that.params['range'];
        // Configure draggable
        that.params['draggableParams']['theme'] = that.params['theme'];
        that.params['draggableParams']['direction'] = that.params['direction'];
        that.params['draggableParams']['targetDraggable'] = that.targetDraggable;
        that.params['draggableParams']['min'] = that.params['min'];
        that.params['draggableParams']['max'] = that.params['max'];
        that.params['draggableParams']['precision'] = that.params['precision'];
        that.params['draggableParams']['showCounter'] = that.params['showCounter'];
    };

    /*** VIEW MODEL ***/

    classProto.renderViewModel = function(){
        var that = this;
        // Call parent method - renderViewModel
        classInherit.prototype.renderViewModel.apply(that, arguments);
        // Draggable
        that.renderDraggable();
        if(that.params['range']){
            that.renderDraggable();
        }
    };

    classProto.renderContent = function(){
        var that = this,
            nodes = {};
        that.nodes['content'] = nodes;
        that.triggerEvent('onRenderContentStart');
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__range__content'},
            nodes['range'] = cm.node('div', {'class' : 'pt__range'},
                nodes['inner'] = cm.node('div', {'class' : 'inner'},
                    nodes['range'] = cm.node('div', {'class' : 'range'},
                        nodes['rangeContent'] = that.renderRangeContent()
                    )
                )
            )
        );
        that.triggerEvent('onRenderContentProcess');
        // Classes
        cm.addClass(nodes['rangeContent'], 'range-helper');
        cm.addClass(nodes['container'], that.params['theme']);
        cm.addClass(nodes['range'], that.params['theme']);
        cm.addClass(nodes['rangeContent'], that.params['theme']);
        that.targetDraggable && cm.addClass(nodes['range'], 'is-draggable');
        // Direction classes
        switch(that.params['direction']){
            case 'horizontal':
                cm.addClass(nodes['container'], 'is-horizontal');
                cm.addClass(nodes['range'], 'is-horizontal');
                cm.addClass(nodes['rangeContent'], 'is-horizontal');
                break;

            case 'vertical':
                cm.addClass(nodes['container'], 'is-vertical');
                cm.addClass(nodes['range'], 'is-vertical');
                cm.addClass(nodes['rangeContent'], 'is-vertical');
                break;
        }
        // Events
        that.triggerEvent('onRenderContentEnd');
        // Export
        return nodes['container'];
    };

    /*** RANGE ***/

    classProto.renderRangeContent = function(){
        var that = this,
            nodes = {};
        that.nodes['rangeContent'] = nodes;
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'range__content'});
        // Export
        return nodes['container'];
    };

    /*** DRAGGABLE ***/

    classProto.renderDraggable = function(){
        var that = this;
        cm.getConstructor(that.params['draggableConstructor'], function(classConstructor){
            that.components['draggable'].push(
                new classConstructor(
                    cm.merge(that.params['draggableParams'], {
                        'node' : that.nodes['content']['inner'],
                        'events' : {
                            'onStart' : function(){
                                that.setEditing();
                            },
                            'onStop' : function(){
                                that.unsetEditing();
                            },
                            'onSelect' : function(my, value){
                                that.setValues();
                                that.selectAction(that.tempRawValue.join('-'), true);
                            },
                            'onSet' : function(my, value){
                                that.setValues();
                                that.set(that.tempRawValue.join('-'), true);
                            }
                        }
                    })
                )
            );
        });
    };

    /*** DATA ***/

    classProto.setValues = function(){
        var that = this;
        that.tempRawValue = [];
        cm.forEach(that.components['draggable'], function(item){
            that.tempRawValue.push(item.get());
        });
        that.tempRawValue = cm.arraySort(that.tempRawValue, false, that.sort);
    };

    classProto.validateValue = function(value){
        var that = this,
            values = value.toString().split('-');
        cm.forEach(values, function(item, i){
            if(that.params['max'] > that.params['min']){
                values[i] = Math.min(Math.max(parseFloat(item), that.params['min']), that.params['max']);
            }else{
                values[i] = Math.max(Math.min(parseFloat(item), that.params['min']), that.params['max']);
            }
        });
        that.values = cm.arraySort(values, false, that.sort);
        return values.join('-');
    };

    classProto.saveRawValue = function(value){
        var that = this;
        that.tempRawValue = value.toString().split('-');
        that.tempRawValue = cm.arrayParseFloat(that.tempRawValue);
        that.tempRawValue = cm.arraySort(that.tempRawValue, false, that.sort);
    };

    classProto.setData = function(){
        var that = this;
        if(!cm.isEmpty(that.tempRawValue)){
            cm.forEach(that.components['draggable'], function(item, i){
                item.set(that.tempRawValue[i], false);
            });
        }
    };

    /*** PUBLIC ***/

    classProto.setEditing = function(){
        var that = this;
        cm.addClass(that.nodes['content']['container'], 'is-editing');
        cm.addClass(that.nodes['content']['range'], 'is-editing');
        cm.addClass(that.nodes['content']['rangeContent'], 'is-editing');
        return that;
    };

    classProto.unsetEditing = function(){
        var that = this;
        cm.removeClass(that.nodes['content']['container'], 'is-editing');
        cm.removeClass(that.nodes['content']['range'], 'is-editing');
        cm.removeClass(that.nodes['content']['rangeContent'], 'is-editing');
        return that;
    };
});
cm.define('Com.AbstractRangeDrag', {
    'extend' : 'Com.AbstractController',
    'events' : [
        'onStart',
        'onStop',
        'onSet',
        'onSelect'
    ],
    'params' : {
        'renderStructure' : true,
        'embedStructureOnRender' : true,
        'embedStructure' : 'append',
        'controllerEvents' : true,
        'direction' : 'horizontal',
        'showCounter' : true,
        'targetDraggable' : true,
        'draggableConstructor' : 'Com.Draggable',
        'draggableParams' : {}
    }
},
function(params){
    var that = this;
    // Call parent class construct in current context
    Com.AbstractController.apply(that, arguments);
});

cm.getConstructor('Com.AbstractRangeDrag', function(classConstructor, className, classProto, classInherit){
    classProto.onValidateParams = function(){
        var that = this;
        that.params['draggableParams']['direction'] = that.params['direction'];
    };

    classProto.renderView = function(){
        var that = this;
        // Structure
        that.nodes['container'] = cm.node('div', {'class' : 'drag'},
            that.nodes['content'] = that.renderDragContent(name)
        );
        // Classes
        cm.addClass(that.nodes['content'], that.params['theme']);
        switch(that.params['direction']){
            case 'horizontal':
                cm.addClass(that.nodes['content'], 'is-horizontal');
                break;
            case 'vertical':
                cm.addClass(that.nodes['content'], 'is-vertical');
                break;
        }
    };

    classProto.renderViewModel = function(){
        var that = this;
        // Call parent method - renderViewModel
        classInherit.prototype.renderViewModel.apply(that, arguments);
        // Constructor
        cm.getConstructor(that.params['draggableConstructor'], function(classConstructor){
            that.components['draggable'] = new classConstructor(
                cm.merge(that.params['draggableParams'], {
                    'target' : that.params['targetDraggable'] ?  that.params['node'] : null,
                    'node' : that.nodes['container'],
                    'limiter' : that.params['node'],
                    'events' : {
                        'onStart' : function(){
                            switch(that.params['direction']){
                                case 'horizontal':
                                    cm.addClass(document.body, 'cm__cursor--col-resize');
                                    break;

                                case 'vertical':
                                    cm.addClass(document.body, 'cm__cursor--row-resize');
                                    break;
                            }
                            that.showCounter();
                            that.triggerEvent('onStart');
                        },
                        'onStop' : function(){
                            switch(that.params['direction']){
                                case 'horizontal':
                                    cm.removeClass(document.body, 'cm__cursor--col-resize');
                                    break;

                                case 'vertical':
                                    cm.removeClass(document.body, 'cm__cursor--row-resize');
                                    break;
                            }
                            that.hideCounter();
                            that.triggerEvent('onStop');
                        },
                        'onSelect' : function(my, data){
                            var value = that.getDraggable(data);
                            that.selectAction(value, true);
                        },
                        'onSet' : function(my, data){
                            var value = that.getDraggable(data);
                            that.set(value, true);
                        }
                    }
                })
            );
        });
    };

    /*** DRAGGABLE ***/

    classProto.renderDragContent = function(){
        var that = this,
            nodes = {};
        that.nodes['dragContent'] = nodes;
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'drag__content'});
        // Counter
        that.nodes['counter'] = that.renderCounter(name);
        if(that.params['showCounter']){
            cm.appendChild(that.nodes['counter'], nodes['container']);
        }
        // Export
        return nodes['container'];
    };

    classProto.getDraggable = function(data){
        var that = this,
            dimensions = that.components['draggable'].getDimensions(),
            xn = that.params['max'] - that.params['min'],
            yn,
            zn,
            value;
        switch(that.params['direction']){
            case 'horizontal':
                yn = dimensions['limiter']['absoluteWidth'];
                zn = (xn / yn) * data['left'];
                value = cm.toFixed(zn + that.params['min'], that.params['precision'], true);
                break;
            case 'vertical':
                yn = dimensions['limiter']['absoluteHeight'];
                zn = (xn / yn) * data['top'];
                value = cm.toFixed(zn + that.params['min'], that.params['precision'], true);
                break;
        }
        return value;
    };

    classProto.setDraggable = function(value){
        var that = this,
            position = {
                'top' : 0,
                'left' : 0
            },
            dimensions = that.components['draggable'].getDimensions(),
            dv = value - that.params['min'],
            xn = that.params['max'] - that.params['min'],
            yn,
            zn;
        switch(that.params['direction']){
            case 'horizontal':
                yn = dimensions['limiter']['absoluteWidth'];
                zn = (yn / xn) * dv;
                position['left'] = cm.toFixed(zn, that.params['precision'], true);
                break;
            case 'vertical':
                yn = dimensions['limiter']['absoluteHeight'];
                zn = (yn / xn) * dv;
                position['top'] = cm.toFixed(zn, that.params['precision'], true);
                break;
        }
        that.components['draggable'].setPosition(position, false);
    };

    /*** COUNTER ***/

    classProto.renderCounter = function(){
        var that = this,
            nodes = {};
        that.nodes['counterContent'] = nodes;
        // Structure
        nodes['container'] = nodes['inner'] = cm.node('div', {'class' : 'counter'});
        // Export
        return nodes['container'];
    };

    classProto.showCounter = function(){
        var that = this;
        cm.addClass(that.nodes['counter'], 'is-show');
        return that;
    };

    classProto.hideCounter = function(){
        var that = this;
        cm.removeClass(that.nodes['counter'], 'is-show');
        return that;
    };

    classProto.setCounter = function(value){
        var that = this;
        that.nodes['counterContent']['inner'].innerHTML = value;
    };

    /*** VALUE ***/

    classProto.get = function(){
        var that = this,
            data = that.components['draggable'].get(),
            value = that.getDraggable(data);
        return value;
    };

    classProto.selectAction = function(value, triggerEvents){
        var that = this;
        triggerEvents = cm.isUndefined(triggerEvents) ? true : triggerEvents;
        that.setCounter(value);
        triggerEvents && that.triggerEvent('onSelect', value);
        return that;
    };

    classProto.set = function(value, triggerEvents){
        var that = this;
        triggerEvents = cm.isUndefined(triggerEvents) ? true : triggerEvents;
        that.setDraggable(value);
        that.setCounter(value);
        triggerEvents && that.triggerEvent('onSet', value);
        return that;
    };
});
cm.define('Com.Form', {
    'modules' : [
        'Params',
        'Events',
        'Langs',
        'DataConfig',
        'DataNodes',
        'Storage',
        'Callbacks',
        'Stack',
        'Structure'
    ],
    'events' : [
        'onRenderStart',
        'onRender',
        'onValidate',
        'onRequestError',
        'onRequestSuccess',
        'onProgress',
        'onError',
        'onAbort',
        'onSuccess',
        'onSendStart',
        'onSend',
        'onSendEnd',
        'onSet',
        'onChange',
        'onInput',
        'onClear',
        'onReset',
        'onEnable',
        'onDisable'
    ],
    'params' : {
        'node' : cm.node('div'),
        'container' : null,
        'name' : '',
        'renderStructure' : true,
        'embedStructure' : 'append',
        'removeOnDestruct' : true,

        'renderButtons' : true,
        'renderButtonsSeparator' : true,
        'buttonsClasses' : [],
        'buttonsAlign' : 'right',
        'buttonsAdaptive' : true,
        'renderNames' : false,                                      // Render visual input name attribute

        'validate' : false,
        'validateOnChange' : false,
        'validateOnInput' : false,
        'showNotifications' : true,
        'showNotificationsMessages' : true,
        'showSuccessNotification' : false,
        'showValidationNotification' : false,
        'showValidationMessages' : true,
        'notificationsClosable' : true,
        'Com.Notifications' : {},

        'data' : {},
        'mergeData': false,
        'sendable': true,
        'autoSend' : false,
        'sendOnChange' : false,
        'sendEmptyForm' : true,
        'sendEmptyFields' : false,
        'sendOnlyChangedFields' : false,
        'abortPreviousRequest': false,
        'responseKey': 'data',
        'responseErrorsKey': 'errors',
        'responseMessageKey' : 'message',
        'responseCodeKey' : 'code',
        'ajax' : {
            'type' : 'json',
            'method' : 'post',
            'paramsType' : 'json',
            'url' : '',                                             // Request URL. Variables: %baseUrl%, %callback% for JSONP.
            'params' : ''                                           // Params object. %baseUrl%, %callback% for JSONP.
        },

        'showLoader' : true,
        'loaderCoverage' : 'fields',                                // fields, all
        'overlayConstructor' : 'Com.Overlay',
        'overlayParams' : {
            'position' : 'absolute',
            'autoOpen' : false,
            'removeOnClose' : true,
            'lazy' : true
        }
    },
    'strings' : {
        'form_error' : 'Form is not filled correctly.',
        'server_error' : 'An unexpected error has occurred. Please try again later.',
        'success_message' : 'Form successfully sent'
    }
},
function(params){
    var that = this;

    that.nodes = {};
    that.components = {};
    that.fields = {};
    that.buttons = {};
    that.constraints = [];
    that.ajaxHandler = null;

    that.isAjax = false;
    that.isProcess = false;
    that.isEnabled = true;

    var init = function(){
        that.renderComponent();
        that.setParams(params);
        that.convertEvents(that.params.events);
        that.getDataNodes(that.params.node);
        that.getDataConfig(that.params.node);
        that.callbacksProcess();
        that.addToStack(that.params.node);
        that.triggerEvent('onRenderStart');
        validateParams();
        render();
        that.addToStack(that.nodes.container);
        that.triggerEvent('onRender');
    };

    var validateParams = function(){
        that.params.buttonsAlign = cm.inArray(['left', 'center', 'right', 'justify'], that.params.buttonsAlign) ? that.params.buttonsAlign : 'right';
        that.params.loaderCoverage = cm.inArray(['fields', 'all'], that.params.loaderCoverage) ? that.params.loaderCoverage : 'all';
        // Ajax
        that.isAjax = that.params.ajax && !cm.isEmpty(that.params.ajax.url) && that.params.sendable;
    };

    var render = function(){
        // Structure
        if(that.params.renderStructure){
            that.nodes.container = cm.node('div', {'class' : 'com__form'},
                that.nodes.fieldsContainer = cm.node('div', {'class' : 'com__form__fields'},
                    that.nodes.fields = cm.node('div', {'class' : 'inner'})
                )
            );
            // Notifications
            that.nodes.notifications = cm.node('div', {'class' : 'com__form__notifications'});
            // Buttons
            that.nodes.buttonsSeparator = cm.node('hr');
            that.nodes.buttonsContainer = cm.node('div', {'class' : 'com__form__buttons'},
                that.nodes.buttons = cm.node('div', {'class' : 'pt__buttons'},
                    that.nodes.buttonsHolder = cm.node('div', {'class' : 'inner'})
                )
            );
            cm.addClass(that.nodes.buttons, ['pull', that.params.buttonsAlign].join('-'));
            cm.addClass(that.nodes.buttons, that.params.buttonsClasses);
            that.params.buttonsAdaptive && cm.addClass(that.nodes.buttons, 'is-adaptive');
            // Embed
            that.params.renderButtonsSeparator && cm.insertFirst(that.nodes.buttonsSeparator, that.nodes.buttonsContainer);
            that.params.renderButtons && cm.appendChild(that.nodes.buttonsContainer, that.nodes.container);
            cm.insertFirst(that.nodes.notifications, that.nodes.container);
            that.embedStructure(that.nodes.container);
        }
        // Notifications
        cm.getConstructor('Com.Notifications', function(classConstructor, className){
            that.components.notifications = new classConstructor(
                cm.merge(that.params[className], {
                    'closable' : that.params.notificationsClosable,
                    'container' : that.nodes.notifications
                })
            );
            that.components.notifications.addEvent('onAdd', function(){
                cm.addClass(that.nodes.notifications, 'is-show', true);
            });
            that.components.notifications.addEvent('onRemove', function(){
                if(that.components.notifications.getLength() === 0){
                    cm.removeClass(that.nodes.notifications, 'is-show', true);
                }
            });
        });
        // Overlay Loader
        var overlayContainer;
        if(that.params.showLoader){
            cm.getConstructor(that.params.overlayConstructor, function(classConstructor){
                switch(that.params.loaderCoverage){
                    case 'fields':
                        overlayContainer = that.nodes.fieldsContainer;
                        break;
                    case 'all':
                    default:
                        overlayContainer = that.nodes.container;
                        break;
                }
                that.components.loader = new classConstructor(
                    cm.merge({'container': overlayContainer}, that.params.overlayParams)
                );
            });
        }
        // Auto Send
        that.params.autoSend && that.send();
    };

    var renderField = function(type, params){
        var field = Com.FormFields.get(type);
        // Merge params
        params = cm.merge({
            'form' : that,
            'formName' : that.params.name,
            'system' : false,
            'name' : '',
            'dataName' : null,
            'dataPath' : null,
            'label' : '',
            'originValue' : null,
            'required' : false,
            'validate' : false,
            'send' : true,
            'sendEmpty' : true,
            'sendAlways' : false,
            'sendPath' : null,
            'sendCallback' : null,
            'preventReset' : false,
            'options' : [],
            'container' : that.nodes.fields,
            'render' : true,
            'renderName' : null,
            'renderEvents' : true,
            'renderErrorMessage' : that.params.showValidationMessages
        }, params);
        params = cm.merge(cm.clone(field, true), params);
        // Validate
        params.fieldConstructor = !cm.isEmpty(params.fieldConstructor) ? params.fieldConstructor : 'Com.FormField';
        params.renderName = cm.isBoolean(params.renderName) ? params.renderName : that.params.renderNames;
        // Value
        if(params.dataPath){
            var value = cm.reducePath(params.dataPath, that.params.data);
            params.value = !cm.isEmpty(value) ? value : params.value;
        }else{
            params.value = !cm.isEmpty(that.params.data[params.name]) ? that.params.data[params.name] : params.value;
        }
        params.dataValue = !cm.isEmpty(that.params.data[params.dataName]) ? that.params.data[params.dataName] : params.dataValue;
        // Render controller
        if(params.render && field && !that.fields[params.name]){
            renderFieldController(params);
        }
    };

    var renderFieldController = function(params){
        cm.getConstructor(params.fieldConstructor, function(classConstructor){
            params.fieldController = params.controller = new classConstructor(params);
            params.inputController = params.constructorController = cm.isFunction(params.fieldController.getController) && params.fieldController.getController();

            // Events
            if (params.renderEvents) {
                params.fieldController.addEvent('onBlur', function(field){
                    fieldBlurEvent(field, params);
                });
                params.fieldController.addEvent('onChange', function(field){
                    fieldChangeEvent(field, params);
                });
                params.fieldController.addEvent('onInput', function(field){
                    fieldInputEvent(field, params);
                });
            }

            // Save processed origin data to compare before send
            // Use clone to prevent linking
            params.originValue = cm.clone(params.fieldController.get());

            // Save
            that.fields[params.name] = params;
            params.fieldController.triggerEvent('onFieldConstructed');
        });
    };

    var fieldBlurEvent = function(field, params){
        if(
            that.isEnabled && that.params.validate && that.params.validateOnChange &&
            (field.params.required || field.params.validate)
        ){
            params.fieldController.validate();
        }
    };

    var fieldChangeEvent = function(field, params){
        if(
            that.isEnabled && that.params.validate && that.params.validateOnChange &&
            (field.params.required || field.params.validate)
        ){
            params.fieldController.validate();
        }
        if(that.params.sendOnChange && !field.params.system){
            that.send();
        }
        that.triggerEvent('onChange');
    };

    var fieldInputEvent = function(field, params){
        if(
            that.isEnabled && that.params.validate && that.params.validateOnInput &&
            (field.params.required || field.params.validate)
        ){
            params.fieldController.validate();
        }
        that.triggerEvent('onInput');
    };

    var renderButton = function(params){
        params = cm.merge({
            'node': null,
            'name': '',
            'label': '',
            'class': '',                // ToDo: deprecated
            'classes': [],
            'spinner': false,
            'spinnerClass': '',         // ToDo: deprecated
            'spinnerClasses': [],
            'action': 'submit',         // submit | reset | clear | custom
            'container': that.nodes.buttonsHolder,
            'handler': null,
        }, params);

        if(that.buttons[params.name]){
            return;
        }

        // Structure
        if(!cm.isNode(params.node)){
            params.classes = cm.merge(['button', params.class], params.classes);
            params.node = cm.node('button', {name: params.name, classes: params.classes},
                params.labelNode = cm.node('div', {classes: 'label is-show'}, params.label)
            );
        }

        // Spinner
        if(params.spinner){
            params.spinnerClasses = cm.merge(['icon', params.spinnerClass], params.spinnerClasses);
            params.spinnerNode = cm.node('div', {classes: params.spinnerClasses});
            cm.appendChild(params.spinnerNode, params.node);
            cm.addClass(params.node, 'button-spinner');
        }

        // Actions
        switch(params.action){
            case 'submit':
                params.node.type = 'submit';
                cm.addClass(params.node, 'button-primary');
                cm.click.add(params.node, function(event){
                    cm.preventDefault(event);
                    if(cm.isFunction(params.handler)){
                        params.handler(that, params, event);
                        return;
                    }
                    if(that.isProcess){
                        that.abort();
                    }else{
                        that.send();
                    }
                });
                break;

            case 'reset':
                params.node.type = 'reset';
                cm.addClass(params.node, 'button-transparent');
                cm.click.add(params.node, function(event){
                    cm.preventDefault(event);
                    if(cm.isFunction(params.handler)){
                        params.handler(that, params, event);
                        return;
                    }
                    if(!that.isProcess){
                        that.reset();
                    }
                });
                break;

            case 'clear':
                cm.addClass(params.node, 'button-transparent');
                cm.click.add(params.node, function(event){
                    cm.preventDefault(event);
                    if(cm.isFunction(params.handler)){
                        params.handler(that, params, event);
                        return;
                    }
                    if(!that.isProcess){
                        that.clear();
                    }
                });
                break;

            case 'custom':
            default:
                cm.click.add(params.node, function(event){
                    cm.preventDefault(event);
                    if(cm.isFunction(params.handler)){
                        params.handler(that, params, event);
                    }
                });
                break;
        }

        // Append
        that.buttons[params.name] = params;
        cm.appendChild(params.node, params.container);
    };

    var toggleButtons = function(value){
        cm.forEach(that.buttons, function(item){
            if(item.spinner){
                if(value){
                    cm.replaceClass(item.labelNode, 'is-show', 'is-hide');
                    cm.replaceClass(item.spinnerNode, 'is-hide', 'is-show');
                }else{
                    cm.replaceClass(item.labelNode, 'is-hide', 'is-show');
                    cm.replaceClass(item.spinnerNode, 'is-show', 'is-hide');
                }
            }
        });
    };

    var renderSeparator = function(params){
        params = cm.merge({
            'node' : cm.node('hr'),
            'container' : that.nodes.fields,
            'classes': []
        }, params);
        cm.addClass(params.node, params.classes);
        cm.appendChild(params.node, params.container);
    };

    var removeField = function(name){
        var item = that.getField(name);
        if(item){
            item.fieldController && cm.isFunction(item.fieldController.remove) && item.fieldController.remove();
            delete that.fields[name];
        }
    };

    /* *** VALIDATE *** */

    var validateHelper = function(options){
        var fieldParams,
            isFieldValidatable,
            constraintsData,
            testData,
            data = {
                'form' : that,
                'valid' : true,
                'message' : null
            };
        // Fields
        cm.forEach(that.fields, function(field, name){
            fieldParams = field.controller.getParams();
            isFieldValidatable = field.field && !field.system
                && (fieldParams.required || fieldParams.validate)
                && cm.isFunction(field.controller.validate);
            if(isFieldValidatable && !field.controller.validate(options)){
                data.message = that.lang('form_error');
                data.valid = false;
            }
        });
        // Constraints
        if(!cm.isEmpty(that.constraints)){
            testData = cm.clone(data);
            constraintsData = validateConstraints(testData);
            if(constraintsData){
                data = cm.merge(data, constraintsData);
            }
        }
        return data;
    };

    var validateConstraints = function(data){
        var constraintsTest,
            constraintsData;
        constraintsTest = that.constraints.some(function(item){
            if(cm.isFunction(item)){
                constraintsData = item(data);
                return !constraintsData.valid;
            }
            return false;
        });
        if(constraintsTest){
            return constraintsData;
        }
        return false;
    };

    /* ******* HELPERS ******* */

    var getHelper = function(type, o, field, name){
        var value = field.controller.get();

        // Process send callback function if specified
        if(cm.isFunction(field.sendCallback)){
            value = field.sendCallback(field, value);
        }

        // To send only changed values we need to make diff between original and current values
        if(
            cm.inArray(['send', 'sendPath'], type) &&
            that.params.sendOnlyChangedFields &&
            !field.sendAlways
        ){
            value = cm.getDiffCompare(field.originValue, value);
        }
        if(
            !cm.isUndefined(value) &&
            (that.params.sendEmptyFields || !that.params.sendEmptyFields && !cm.isEmpty(value)) &&
            (field.sendEmpty || !field.sendEmpty && !cm.isEmpty(value))
        ){
            if(type === 'sendPath' && !cm.isEmpty(field.sendPath)){
                var path = cm.objectFormPath(field.sendPath, value, '');
                // Use extend instead of merge, because merge will make deep copy of objects without custom properties
                o = cm.extend(o, path, true, false);
            }else{
                o[name] = value;
            }
        }

        return o;
    };

    var sendPlaceholderHelper = function(){
        var data = that.get('sendPath');
        sendCompleteHelper(data);
        that.clearError(that);
        that.triggerEvent('onSendStart', data);
        that.triggerEvent('onSend', data);
        that.triggerEvent('onSuccess', data);
        that.triggerEvent('onSendEnd', data);
    };

    var sendCompleteHelper = function(data){
        data = !cm.isEmpty(data) ? data : that.get('sendPath');
        that.set(data, {
            triggerEvents: false,
            setFields: false,
            setOrigin: true
        });
    };

    /* ******* CALLBACKS ******* */

    that.callbacks.prepare = function(that, config){
        config = that.callbacks.beforePrepare(that, config);
        config.url = cm.strReplace(config.url, {
            '%baseUrl%' : cm._baseUrl
        });
        config.params = cm.objectReplace(config.params, {
            '%baseUrl%' : cm._baseUrl
        });
        config.params = cm.merge(config.params, that.get('sendPath', that.params.mergeData));
        config = that.callbacks.afterPrepare(that, config);
        return config;
    };

    that.callbacks.filterData = function(that, data){
        return data;
    };

    that.callbacks.beforePrepare = function(that, config){
        return config;
    };

    that.callbacks.afterPrepare = function(that, config){
        return config;
    };

    that.callbacks.request = function(that, config){
        config = that.callbacks.prepare(that, config);
        that.callbacks.clearError(that);

        if(!that.params.sendEmptyForm && cm.isEmpty(config.params)){
            sendPlaceholderHelper();
            return;
        }

        // Return ajax handler (XMLHttpRequest) to providing abort method.
        return cm.ajax(
            cm.merge(config, {
                'onStart' : function(){
                    that.callbacks.start(that, config);
                },
                'onProgress' : function(event){
                    that.callbacks.progress(that, config, event);
                },
                'onSuccess' : function(response, event){
                    event = response instanceof ProgressEvent ? response : event;
                    that.callbacks.response(that, config, response, event);
                },
                'onError' : function(response, event){
                    event = response instanceof ProgressEvent ? response : event;
                    that.callbacks.error(that, config, response, event);
                },
                'onAbort' : function(){
                    that.callbacks.abort(that, config);
                },
                'onEnd' : function(response){
                    that.callbacks.end(that, config, response);
                }
            })
        );
    };

    that.callbacks.start = function(that, config){
        that.isProcess = true;
        that.sendStart();
        that.triggerEvent('onSendStart');
    };

    that.callbacks.end = function(that, config){
        that.isProcess = false;
        that.sendEnd();
        that.triggerEvent('onSendEnd');
    };

    that.callbacks.progress = function(that, config, event){
        that.sendProgress(event);
        that.triggerEvent('onProgress', event);
    };

    that.callbacks.response = function(that, config, response, event){
        var errors,
            data;
        if(!cm.isEmpty(response)){
            errors = cm.reducePath(that.params.responseErrorsKey, response);
            data = cm.reducePath(that.params.responseKey, response);
            if(!cm.isEmpty(errors)){
                that.callbacks.error(that, config, response, event);
            }else{
                that.callbacks.success(that, data, response, event);
            }
        }else{
            that.callbacks.error(that, config, response, event);
        }
    };

    that.callbacks.error = function(that, config, response, event){
        var errors,
            message,
            code;
        if(!cm.isEmpty(response)){
            errors = cm.reducePath(that.params.responseErrorsKey, response);
            message = cm.reducePath(that.params.responseMessageKey, response);
            code = cm.reducePath(that.params.responseCodeKey, response);
        }
        that.callbacks.renderError(that, errors, message);

        var responseData = {
            'response' : response,
            'errors' : errors,
            'message' : message,
            'code' : code,
            'target': event instanceof ProgressEvent ? event.target : null,
        };
        that.triggerEvent('onError', responseData);
        that.triggerEvent('onRequestError', responseData);
    };

    that.callbacks.success = function(that, data, response, event){
        var message,
            code;
        if(!cm.isEmpty(response)){
            message = cm.reducePath(that.params.responseMessageKey, response);
            code = cm.reducePath(that.params.responseCodeKey, response);
        }
        if(that.params.showNotifications && that.params.showSuccessNotification){
            that.callbacks.renderNotification(that, {
                'label' : that.lang('success_message'),
                'type' : 'success'
            });
        }
        sendCompleteHelper(data);
        that.triggerEvent('onSuccess', data);
        that.triggerEvent('onRequestSuccess', {
            'response' : response,
            'data' : data,
            'message' : message,
            'code' : code,
            'target': event instanceof ProgressEvent ? event.target : null,
        });
    };

    that.callbacks.abort = function(that, config){
        that.triggerEvent('onAbort');
    };

    /* *** RENDER *** */

    that.callbacks.clearError = function(that){
        // Clear notification
        that.clearNotification();
        // Clear field errors
        cm.forEach(that.fields, function(field){
            field.controller.clearError();
        });
    };

    that.callbacks.renderError = function(that, errors, message){
        var hasMessage = !cm.isEmpty(message) && cm.isString(message),
            label = hasMessage ? message : that.lang('form_error'),
            messages;
        // Clear old errors messages
        that.callbacks.clearError(that);
        // Render new errors messages
        var data = {
            'type' : 'danger'
        };
        if(cm.isArray(errors) || cm.isObject(errors)){
            messages = that.callbacks.renderErrorMessages(that, errors);
            data.label = label;
            if(that.params.showNotificationsMessages) {
                data.messages = messages;
                data.collapsed = true;
            }
        }else if(hasMessage){
            data.label = label;
        }else{
            data.label = that.lang('server_error');
        }
        if(that.params.showNotifications){
            that.callbacks.renderNotification(that, data);
        }
    };

    that.callbacks.renderErrorMessages = function(that, errors){
        var field,
            fieldName,
            fieldMessage,
            fieldLabel,
            messages = [];

        // Filter errors data
        errors = that.callbacks.filterErrors(that, errors);

        // Render error messages
        cm.forEach(errors, function(item, key){
            // Get field
            fieldName = item && item.field ? item.field : key;
            field = that.getField(fieldName);
            fieldLabel = that.getFieldLabel(fieldName) || fieldName;
            // Render field messages
            if(cm.isObject(item)){
                if(cm.isArray(item.message)){
                    cm.forEach(item.message, function(messageItem){
                        fieldMessage = that.callbacks.renderErrorMessage(that, field, messageItem, fieldLabel);
                        messages.push(fieldMessage);
                    })
                }else if(!cm.isEmpty(item.message)){
                    fieldMessage = that.callbacks.renderErrorMessage(that, field, item.message, fieldLabel);
                    messages.push(fieldMessage);
                }
            }else if(cm.isArray(item)){
                cm.forEach(item, function(messageItem){
                    fieldMessage = that.callbacks.renderErrorMessage(that, field, messageItem, fieldLabel);
                    messages.push(fieldMessage);
                });
            }else if(!cm.isEmpty(item)){
                fieldMessage = that.callbacks.renderErrorMessage(that, field, item, fieldLabel);
                messages.push(fieldMessage);
            }
        });
        return messages;
    };

    that.callbacks.filterErrors = function(that, errors){
        return errors;
    };

    that.callbacks.renderErrorMessage = function(that, field, message, label){
        var messagePath = ['errors', message].join('.'),
            messageString = that.getMsg(messagePath);
        message = !cm.isEmpty(messageString) ? that.msg(messagePath) : message;
        if(field){
            field.controller.renderError(message);
        }
        if(!cm.isEmpty(label)){
            message = [label, message].join(': ');
        }
        return message
    };

    that.callbacks.renderNotification = function(that, o){
        cm.addClass(that.nodes.notifications, 'is-show', true);
        that.components.notifications.add(o);
    };

    /* ******* PUBLIC ******* */

    that.destruct = function(){
        if(!that._isDestructed){
            that._isDestructed = true;
            cm.forEach(that.fields, function(field){
                field.controller.destruct();
            });
            that.removeFromStack();
            that.params.removeOnDestruct && cm.remove(that.nodes.container);
        }
        return that;
    };

    that.add = function(type, params){
        renderField(type, params);
        return that;
    };

    that.addButton = function(o){
        renderButton(o);
        return that;
    };

    that.addButtons = function(o){
        if(cm.isArray(o)){
            cm.forEach(o, function(item){
                renderButton(item);
            });
        }
        return that;
    };

    that.toggleButtons = function(value){
        toggleButtons(value);
        return that;
    };

    that.addSeparator = function(params){
        renderSeparator(params);
        return that;
    };

    that.addConstraint = function(constraint){
        if(cm.isFunction(constraint)){
            cm.arrayAdd(that.constraints, constraint);
        }
        return that;
    };

    that.removeConstraint = function(constraint){
        if(cm.isFunction(constraint)){
            cm.arrayRemove(that.constraints, constraint);
        }
        return that;
    };

    that.appendChild = function(node, insertMethod){
        insertMethod = cm.isUndefined(insertMethod) ? 'appendChild' : insertMethod;
        cm[insertMethod](node, that.nodes.fields);
        return that;
    };

    that.getField = function(name){
        return that.fields[name];
    };

    that.getFields = function(names){
        var fields = {};
        cm.forEach(names, function(name){
            fields[name] = that.getField(name);
        });
        return fields;
    };

    that.getFieldLabel = function(name){
        var field = that.getField(name);
        if(!field){
            return;
        }
        if(!cm.isEmpty(field.label)){
            return field.label;
        }
        if(!cm.isEmpty(field.placeholder)){
            return field.placeholder;
        }
    };

    that.setFieldParams = function(name, params){
        var field = that.getField(name);
        if(field){
            field = cm.merge(field, params);
            // Save
            that.fields[name] = field;
        }
        return field;
    };

    that.removeField = function(name){
        removeField(name);
        return that;
    };

    that.get = function(type, mergeData){
        var data = {};
        // Validate
        type = cm.inArray(['all', 'fields', 'send', 'sendPath', 'system'], type) ? type : 'fields';
        mergeData = cm.isUndefined(mergeData) ? that.params.mergeData : mergeData;
        // Get
        cm.forEach(that.fields, function(field, name){
            switch(type){
                case 'all':
                    data = getHelper('all', data, field, name);
                    break;
                case 'fields':
                    if(!field.system){
                        data = getHelper('fields', data, field, name);
                    }
                    break;
                case 'send':
                    if(field.send && !field.system){
                        data = getHelper('send', data, field, name);
                    }
                    break;
                case 'sendPath':
                    if(field.send && !field.system){
                        data = getHelper('sendPath', data, field, name);
                    }
                    break;
                case 'system':
                    if(field.system){
                        data = getHelper('system', data, field, name);
                    }
                    break;
            }
        });
        // Merge data with origin
        if(mergeData){
            data = cm.merge(that.params.data, data);
        }
        // Filter data
        data = that.callbacks.filterData(that, data);
        return data;
    };

    that.getAll = function(){
        return that.get('all');
    };

    that.set = function(data, params){
        // Validate params
        params = cm.merge({
            triggerEvents: true,
            setFields: true,
            setOrigin: false,
            setData: false,
        }, params);
        // Set data
        if(params.setData){
            that.params.data = data;
        }
        // Set values
        var value;
        cm.forEach(that.fields, function(field, name){
            if(field.dataPath){
                value = cm.reducePath(field.dataPath, data);
            }else{
                value = !cm.isUndefined(data[field.dataName]) ? data[field.dataName] : data[name];
            }
            if(!cm.isUndefined(value)){
                if(params.setOrigin){
                    that.setFieldParams(name, {originValue: value});
                }
                if(params.setFields) {
                    field.controller.set(value, params.triggerEvents);
                }
            }
        });
        if(params.triggerEvents){
            that.triggerEvent('onSet');
        }
        return that;
    };

    that.clear = function(){
        cm.forEach(that.fields, function(field){
            field.controller.destruct();
        });
        that.fields = {};
        cm.clearNode(that.nodes.fields);
        cm.forEach(that.buttons, function(button){
            cm.remove(button.node);
        });
        that.buttons = {};
        cm.clearNode(that.nodes.buttonsHolder);
        that.clearError();
        that.triggerEvent('onClear');
        return that;
    };

    that.reset = function(){
        cm.forEach(that.fields, function(field){
            if(!field.preventReset){
                field.controller.reset();
            }
        });
        that.clearError();
        that.triggerEvent('onReset');
        return that;
    };

    that.enable = function(){
        if(!that.isEnabled){
            that.isEnabled = true;
            cm.forEach(that.fields, function(field){
                field.controller.enable();
            });
            cm.forEach(that.buttons, function(button){
                cm.removeClass(button.node, 'button-disabled');
            });
            that.triggerEvent('onEnable');
        }
        return that;
    };

    that.disable = function(){
        if(that.isEnabled){
            that.isEnabled = false;
            cm.forEach(that.fields, function(field){
                field.controller.disable();
            });
            cm.forEach(that.buttons, function(button){
                cm.addClass(button.node, 'button-disabled');
            });
            that.triggerEvent('onDisable');
        }
        return that;
    };

    that.validate = function(options){
        options = cm.merge({
            'silent' : false,
            'triggerEvents' : true
        }, options);
        // Clear previous notifications
        that.clearNotification();
        // Show new notifications if exists
        var data = validateHelper(options);
        if(!data.valid && !options.silent){
            if(that.params.showNotifications && that.params.showValidationNotification){
                that.renderNotification({
                    'label' : data.message,
                    'type' : 'danger'
                });
            }
        }
        // Trigger events
        if(options.triggerEvents && !options.silent){
            that.triggerEvent('onValidate', data);
        }
        return data;
    };

    that.send = function(){
        if(!that.isEnabled){
            return that;
        }
        if(that.isProcess && that.params.abortPreviousRequest){
            that.abort();
        }

        var data = {
            'valid' : true
        };
        // Validate
        if(that.params.validate){
            data = that.validate();
        }
        // Send
        if(data.valid){
            if(that.isAjax){
                that.ajaxHandler = that.callbacks.request(that, cm.clone(that.params.ajax));
            }else{
                sendPlaceholderHelper();
            }
        }
        return that;
    };

    that.sendStart = function() {
        cm.addClass(that.nodes.container, 'is-submitting');
        // Toggle buttons
        toggleButtons(true);
        // Show Loader
        if(that.params.showLoader){
            that.showLoader();
        }
        return that;
    };

    that.sendProgress = function(event) {
        // Hide Loader
        if(that.params.showLoader){
            if (event.lengthComputable) {
                that.setLoaderProgress(event.total, event.loaded);
            } else {
                that.hideLoaderProgress();
            }
        }
        return that;
    };

    that.sendEnd = function() {
        cm.removeClass(that.nodes.container, 'is-submitting');
        // Toggle buttons
        toggleButtons(false);
        // Hide Loader
        if(that.params.showLoader){
            that.hideLoader();
        }
        return that;
    };

    that.sendPlaceholder = function(){
        sendPlaceholderHelper();
        return that;
    };

    that.abort = function(){
        if(that.ajaxHandler && that.ajaxHandler.abort){
            that.ajaxHandler.abort();
        }
        return that;
    };

    that.setAction = function(o, mode, update){
        mode = cm.inArray(['raw', 'update', 'current'], mode)? mode : 'current';
        switch(mode){
            case 'raw':
                that.params.ajax = cm.merge(that._raw.params.ajax, o);
                break;
            case 'current':
                that.params.ajax = cm.merge(that.params.ajax, o);
                break;
            case 'update':
                that.params.ajax = cm.merge(that._update.params.ajax, o);
                break;
        }
        if(update){
            that._update.params.ajax = cm.clone(that.params.ajax);
        }
        that.isAjax = that.params.ajax && !cm.isEmpty(that.params.ajax.url);
        return that;
    };

    that.renderNotification = function(o){
        that.callbacks.renderNotification(that, o);
        return that;
    };

    that.clearNotification = function(){
        cm.removeClass(that.nodes.notifications, 'is-show', true);
        that.components.notifications.clear();
        return that;
    };

    that.renderError = function(errors, message){
        that.callbacks.renderError(that, errors, message);
        return that;
    };

    that.clearError = function(){
        that.callbacks.clearError(that);
        return that;
    };

    that.getLoader = function(){
        return that.components.loader;
    };

    that.showLoader = function(isImmediately){
        that.components.loader && that.components.loader.open(isImmediately);
        return that;
    };

    that.hideLoader = function(isImmediately){
        that.components.loader && that.components.loader.close(isImmediately);
        return that;
    };

    that.setLoaderProgress = function(total, value){
        that.components.loader && that.components.loader.setProgress(total, value);
        return that;
    };

    that.hideLoaderProgress = function(){
        that.components.loader && that.components.loader.hideProgress();
        return that;
    };

    that.getName = function(){
        return that.params.name;
    };

    that.getContainer = function(){
        return that.nodes.container;
    };

    that.getButtonsContainer = function(){
        return that.nodes.buttonsContainer;
    };

    that.getNodes = function(key){
        return that.nodes[key] || that.nodes;
    };

    init();
});

cm.define('Com.TabsetHelper', {
    extend: 'Com.AbstractController',
    events: [
        'onTabChangeStart',
        'onTabChange',
        'onTabChangeEnd',
        'onTabShowStart',
        'onTabShow',
        'onTabShowProcess',
        'onTabShowEnd',
        'onTabHideStart',
        'onTabHide',
        'onTabHideProcess',
        'onTabHideEnd',
        'onTabRemoveStart',
        'onTabRemove',
        'onTabRemoveEnd',
        'onLabelTarget',
        'onUnsetStart',
        'onUnset',
        'onRequestStart',
        'onRequestEnd',
        'onRequestError',
        'onRequestSuccess',
        'onRequestAbort',
        'onContentRenderStart',
        'onContentRender',
        'onContentRenderEnd'
    ],
    params: {
        renderStructure: false,
        embedStructureOnRender: false,
        controllerEvents: true,
        renderTabView: false,
        setInitialTab: false,                                    // Set possible initial tab even if "active" is not defined
        setInitialTabImmediately: true,                          // Set initial tab without animation
        active: null,
        items: [],
        processTabs: true,
        targetEvent: 'click',                                    // click | hover | none
        toggleOnHashChange: false,                               // URL hash change handler
        showLoader: true,
        responseKey: 'data',                                     // Instead of using filter callback, you can provide response array key
        responseHTML: true,                                      // If true, html will append automatically
        cache: false,                                            // Cache ajax tab content
        ajax: {
            type: 'json',
            method: 'get',
            url: '',                                             // Request URL. Variables: %baseUrl%, %tab%, %callback% for JSONP.
            params: ''                                           // Params object. %tab%, %baseUrl%, %callback% for JSONP.
        },
        overlayConstructor: 'Com.Overlay',
        overlayParams: {
            position: 'absolute',
            lazy: true,
            autoOpen: false,
            removeOnClose: true
        }
    },
    strings: {
        'server_error': 'An unexpected error has occurred. Please try again later.'
    }
},
function() {
    Com.AbstractController.apply(this, arguments);
});

cm.getConstructor('Com.TabsetHelper', function(classConstructor, className, classProto, classInherit) {
    /*** SYSTEM ***/

    classProto.construct = function() {
        var that = this;
        // Variables
        that.nodes = {
            container: cm.node('div'),
            labels: [],
            tabs: [],
            select: cm.node('select')
        };
        that.ajaxHandler = null;
        that.isAjax = false;
        that.isProcess = false;
        that.targetEvent = null;
        that.current = false;
        that.previous = false;
        that.items = {};
        that.itemsList = [];
        // Binds
        that.hashChangeHandler = that.hashChange.bind(that);
        // Call parent method
        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.validateParams = function() {
        var that = this;
        that.triggerEvent('onValidateParamsStart');
        // Ajax
        if (!cm.isEmpty(that.params.ajax.url)) {
            that.isAjax = true;
        }
        // Target Event
        switch (that.params.targetEvent) {
            case 'hover':
                that.targetEvent = 'mouseover';
                break;
            case 'click':
            default:
                that.targetEvent = 'click';
                break;
        }
        that.triggerEvent('onValidateParams');
        that.triggerEvent('onValidateParamsProcess');
        that.triggerEvent('onValidateParamsEnd');
    };

    classProto.onSetEvents = function() {
        var that = this;
        that.params.toggleOnHashChange && cm.addEvent(window, 'hashchange', that.hashChangeHandler);
    };

    classProto.onUnsetEvents = function() {
        var that = this;
        that.params.toggleOnHashChange && cm.removeEvent(window, 'hashchange', that.hashChangeHandler);
    };

    classProto.onConstructEnd = function() {
        var that = this;
        that.setInitialTab();
    };

    /******* VIEW MODEL *******/

    classProto.renderViewModel = function() {
        var that = this;
        // Call parent method
        classInherit.prototype.renderViewModel.apply(that, arguments);
        // Process tabs
        if (that.params.processTabs) {
            that.processTabs(that.nodes.tabs, that.nodes.labels);
        }
        // Process tabs in parameters
        cm.forEach(that.params.items, function(item) {
            that.renderTab(item);
        });
        // Process select
        that.processSelect(that.nodes.select);
        // Overlay
        cm.getConstructor(that.params.overlayConstructor, function(classConstructor) {
            that.components.loader = new classConstructor(that.params.overlayParams);
        });
        return that;
    };

    /******* TABS *******/

    classProto.processTab = function(tab, label) {
        var that = this,
            config = cm.merge(that.getNodeDataConfig(tab.container), that.getNodeDataConfig(label.container)),
            item = cm.merge(config, {
                tab: tab,
                label: label
            });
        that.addTab(item);
    };

    classProto.processTabs = function(tabs, labels) {
        var that = this,
            itemsToProcess = tabs.length ? tabs : labels,
            items = [],
            label,
            config,
            item;
        cm.forEach(itemsToProcess, function(tab, key) {
            label = labels[key];
            config = cm.merge(that.getNodeDataConfig(tab.container), that.getNodeDataConfig(label.container));
            item = cm.merge(config, {
                tab: tab,
                label: label
            });
            items.push(item);
        });
        that.addTabs(items);
        return that;
    };

    classProto.renderTab = function(item) {
        var that = this;
        // Merge tab configuration
        item = cm.merge({
            index: that.itemsList.length,
            id: '',
            title: '',
            titleContent: null,
            content: null,
            tab: {
                container: cm.node('li'),
                inner: cm.node('div'),
            },
            label: {
                container: cm.node('li'),
                link: cm.node('a'),
            },
            menu: {
                container: cm.node('li'),
                link: cm.node('a'),
            },
            callback: null,
            constructor: null,
            constructorParams: {},
            constructorEventName: 'onLoadEnd',
            className: '',
            cache: null,
            ajax: {},
            isHidden: false,
            isShow: false,
            isAjax: false,
            isCached: false
        }, item);
        // Set names
        item.tabName = ['tabset', that.params.name, 'tab', (!cm.isEmpty(item.id) ? item.id : item.index)].join('--');
        item.labelName = ['tabset', that.params.name, 'label', (!cm.isEmpty(item.id) ? item.id : item.index)].join('--');
        // Cache
        if (!cm.isBoolean(item.cache)) {
            item.cache = that.params.cache;
        }
        // Render tab view
        if (that.params.renderTabView) {
            that.renderTabView(item);
        }
        // Check for ajax
        if (!cm.isEmpty(item.ajax.url)) {
            item.isAjax = true;
        }
        // Class name
        if (!cm.isEmpty(item.className)) {
            cm.addClass(item.label.container, item.className);
            cm.addClass(item.menu.container, item.className);
            cm.addClass(item.tab.container, item.className);
        }
        // Push
        if (!cm.isEmpty(item.id) && !that.items[item.id]) {
            // Hide nodes
            if (item.isHidden) {
                cm.addClass(item.label.container, 'hidden');
                cm.addClass(item.menu.container, 'hidden');
                cm.addClass(item.tab.container, 'hidden');
            }
            // Target events
            that.renderTabTarget(item, item.label.container);
            that.renderTabTarget(item, item.menu.container);
            // Export
            that.itemsList.push(item);
            that.items[item.id] = item;
        }
        return that;
    };

    classProto.renderTabTarget = function(item, node) {
        var that = this;
        if (!that.targetEvent) {
            return;
        }
        if (that.targetEvent === 'click') {
            cm.click.add(node, function(event) {
                cm.preventDefault(event);
                cm.stopPropagation(event);
                that.tabTarget(item);
            });
        } else {
            cm.addEvent(node, that.targetEvent, function(event) {
                cm.preventDefault(event);
                cm.stopPropagation(event);
                that.tabTarget(item);
            });
        }
    };

    classProto.tabTarget = function(item) {
        var that = this;
        that.triggerEvent('onLabelTarget', item);
        // Set
        if (that.params.toggleOnHashChange) {
            window.location.hash = item.id;
        } else {
            that.setTab(item.id);
        }
    };

    classProto.renderTabView = function(item) {
        var that = this;
    };

    classProto.removeTab = function(id) {
        var that = this,
            item = that.items[id];
        if (item) {
            that.triggerEvent('onTabRemove', item);
            // Set new active tab, if current active is nominated for remove
            if (item.id === that.current) {
                that.setByIndex(0);
            }
            // Remove tab from list and array
            cm.remove(item.tab.container);
            cm.remove(item.label.container);
            that.itemsList = cm.arrayRemove(that.itemsList, item);
            delete that.items[item.id];
            that.triggerEvent('onTabRemove', item);
            that.triggerEvent('onTabRemoveEnd', item);
        }
        return that;
    };

    /*** SET / UNSET ***/

    classProto.setTab = function(id, params) {
        var that = this;

        // Deprecated argument isInitial
        if (cm.isBoolean(params)) {
            params = {isInitial: params};
        }

        // Validate params
        params = cm.merge({
            isInitial: false,
        }, params);

        var item = that.items[id];
        if (item && that.current !== id) {
            that.isInitial = params.isInitial;
            that.tabChangeStart(item);
            // Unset and hide previous tab
            that.unsetTab(that.current, {action: 'onSetTab'});
            // Set and show new tab
            that.triggerEvent('onTabShowStart', item);
            that.previous = that.current;
            that.current = id;
            item.isShow = true;
            that.triggerEvent('onTabShowProcess', item);
            if (!that.previous && that.params.setInitialTabImmediately) {
                cm.addClass(item.tab.container, 'is-immediately');
                cm.addClass(item.label.container, 'is-immediately');
                setTimeout(function() {
                    cm.removeClass(item.tab.container, 'is-immediately');
                    cm.removeClass(item.label.container, 'is-immediately');
                }, 5);
            }
            cm.addClass(item.label.container, 'active', true);
            cm.addClass(item.tab.container, 'active', true);
            // Set select menu
            cm.setSelect(that.nodes.select, that.current);
            // Trigger events
            that.refreshTab(that.current);
        }
        return that;
    };

    classProto.unsetTab = function(id, params) {
        var that = this;

        // Validate params
        params = cm.merge({
            action: null,
        }, params);

        var item = that.items[id];
        if (item) {
            if (that.isProcess) {
                that.abort();
            }
            that.triggerEvent('onTabHideStart', item);
            item.isShow = false;
            that.triggerEvent('onTabHideProcess', item);
            cm.removeClass(item.label.container, 'active');
            cm.removeClass(item.tab.container, 'active');
            that.tabHideEnd(item, params);
        }
        return that;
    };

    classProto.refreshTab = function(id) {
        var that = this,
            item = that.items[id],
            controllerEvents = {};
        if (item.constructor) {
            // Controller
            if (item.controller) {
                item.controller.refresh && item.controller.refresh();
            } else {
                cm.getConstructor(item.constructor, function(classConstructor) {
                    controllerEvents[item.constructorEventName] = function() {
                        that.tabShowEnd(item, {});
                    };
                    item.controller = new classConstructor(
                        cm.merge(item.constructorParams, {
                            container: item.tab.inner,
                            events: controllerEvents
                        })
                    );
                });
            }
        } else if (cm.isFunction(item.callback)) {
            item.callback(item);
            that.tabShowEnd(item, {});
        } else if (
            item.isAjax &&
            (!item.cache || (item.cache && !item.isCached))
        ) {
            that.ajaxHandler = classProto.callbacks.request(that, {
                config: cm.merge(that.params.ajax, item.ajax)
            }, item);
        } else {
            that.tabShowEnd(item, {});
        }
    };

    classProto.unsetHead = function() {
        var that = this,
            item = that.items[that.current];
        if (item) {
            cm.removeClass(item.label.container, 'active');
        }
        return that;
    };

    classProto.getInitialTab = function() {
        var that = this;
        var id;
        if (cm.isEmpty(that.itemsList) || cm.isEmpty(that.items)) {
            return null;
        }
        // Get tab from hash if exists
        if (that.params.toggleOnHashChange) {
            id = window.location.hash.slice(1);
            if (that.isValidTab(id)) {
                return id;
            }
        }
        // Get tab from parameters if exists
        id = that.params.active;
        if (that.isValidTab(id)) {
            return id;
        }
        // Get first tab in the list
        return that.itemsList[0].id;
    };

    classProto.setInitialTab = function() {
        var that = this,
            id;
        // Set default active tab
        if (that.params.setInitialTab) {
            id = that.getInitialTab();
        } else {
            id = that.params.active
        }
        if (that.isValidTab(id)) {
            that.setTab(id, true);
        }
    };

    classProto.isValidTab = function(id) {
        var that = this;
        return !!that.getTab(id);
    };

    /*** SHOW / HIDE ***/

    classProto.tabChangeStart = function(item) {
        var that = this;
        that.triggerEvent('onTabChangeStart', item);
    };

    classProto.tabShowEnd = function(item, params) {
        var that = this;
        if (item.id !== that.current) {
            return;
        }

        // Validate params
        params = cm.merge({
            redrawContent: true,
            triggerEvents: true,
        }, params);

        if (params.redrawContent) {
            that.redrawTabContent(item);
        }

        if (params.triggerEvents) {
            that.triggerEvent('onTabShow', item, params);
            that.triggerEvent('onTabShowEnd', item, params);
            if (that.current !== that.previous) {
                that.triggerEvent('onTabChange', item, params);
                that.triggerEvent('onTabChangeEnd', item, params);
            }
        }
    };

    classProto.tabHideEnd = function(item, params) {
        var that = this;

        // Validate params
        params = cm.merge({
            triggerEvents: true,
        }, params);

        if (params.triggerEvents) {
            that.triggerEvent('onTabHide', item);
            that.triggerEvent('onTabHideEnd', item);
        }
    };

    classProto.redrawTabContent = function(item) {
        var that = this;
        cm.customEvent.trigger(item.tab.container, 'redraw', {
            direction: 'child',
            self: false
        });
    };

    /******* SELECT *******/

    classProto.processSelect = function(container) {
        var that = this;
        cm.addEvent(container, 'change', function() {
            that.setTab(container.value);
        })
    };

    /******* URL HASH HANDLING *******/

    classProto.hashChange = function() {
        var that = this,
            id = decodeURIComponent(window.location.hash.slice(1));
        if (that.isValidTab(id)) {
            that.setTab(id);
        }
    };

    /******* CALLBACKS *******/

    /*** AJAX ***/

    classProto.callbacks.prepare = function(that, params, item) {
        params.config = that.callbacks.beforePrepare(that, params, item);
        params.config.url = cm.strReplace(params.config.url, {
            '%tab%': item.id,
            '%baseUrl%': cm._baseUrl
        });
        params.config.params = cm.objectReplace(params.config.params, {
            '%tab%': item.id,
            '%baseUrl%': cm._baseUrl
        });
        params.config = that.callbacks.afterPrepare(that, params, item);
        return params.config;
    };

    classProto.callbacks.beforePrepare = function(that, params, item) {
        return params.config;
    };

    classProto.callbacks.afterPrepare = function(that, params, item) {
        return params.config;
    };

    classProto.callbacks.request = function(that, params, item) {
        params = cm.merge({
            response: null,
            config: null,
            data: null
        }, params);
        // Validate config
        params.config = that.callbacks.prepare(that, params, item);
        // Return ajax handler (XMLHttpRequest) to providing abort method.
        return cm.ajax(
            cm.merge(params.config, {
                onStart: function() {
                    classProto.callbacks.start(that, params, item);
                },
                onSuccess: function(response) {
                    params.response = response;
                    classProto.callbacks.response(that, params, item);
                },
                onError: function() {
                    classProto.callbacks.error(that, params, item);
                },
                onAbort: function() {
                    classProto.callbacks.abort(that, params, item);
                },
                onEnd: function() {
                    classProto.callbacks.end(that, params, item);
                }
            })
        );
    };

    classProto.callbacks.start = function(that, params, item) {
        that.isProcess = true;
        // Show Loader
        if (that.params.showLoader) {
            that.components.loader
                .embed(item.tab.container)
                .open();
        }
        that.triggerEvent('onRequestStart', item, params);
    };

    classProto.callbacks.end = function(that, params, item) {
        that.isProcess = false;
        // Hide Loader
        if (that.params.showLoader) {
            that.components.loader.close();
        }
        that.triggerEvent('onRequestEnd', item, params);
    };

    classProto.callbacks.filter = function(that, params, item) {
        var data,
            dataItem = cm.objectSelector(that.params.responseKey, params.response);
        if (dataItem && !cm.isEmpty(dataItem)) {
            data = dataItem;
        }
        return data;
    };

    classProto.callbacks.response = function(that, params, item) {
        if (!cm.isEmpty(params.response)) {
            params.data = classProto.callbacks.filter(that, params, item);
        }
        if (!cm.isEmpty(params.data)) {
            classProto.callbacks.success(that, params, item);
        } else {
            classProto.callbacks.error(that, params, item);
        }
    };

    classProto.callbacks.error = function(that, params, item) {
        classProto.callbacks.renderError(that, params, item);
        that.triggerEvent('onRequestError', item, params);
    };

    classProto.callbacks.success = function(that, params, item) {
        classProto.callbacks.render(that, params, item);
        that.triggerEvent('onRequestSuccess', item, params);
    };

    classProto.callbacks.abort = function(that, params, item) {
        that.triggerEvent('onRequestAbort', item, params);
    };

    /*** RENDER ***/

    classProto.callbacks.render = function(that, params, item) {
        item.data = params.data;
        item.isCached = true;
        // Render
        that.triggerEvent('onContentRenderStart', item, params);
        classProto.callbacks.renderContent(that, params, item);
        that.triggerEvent('onContentRender', item, params);
        that.triggerEvent('onContentRenderEnd', item, params);
        // Show tab
        that.tabShowEnd(item, params);
    };

    classProto.callbacks.renderContent = function(that, params, item) {
        var nodes;
        if (that.params.responseHTML) {
            nodes = cm.strToHTML(params.data);
            cm.clearNode(item.tab.inner);
            cm.appendNodes(nodes, item.tab.inner);
        }
    };

    classProto.callbacks.renderError = function(that, params, item) {
        if (that.params.responseHTML) {
            cm.clearNode(item.tab.inner);
            item.tab.inner.appendChild(
                cm.node('div', {classes: 'cm__empty'}, that.lang('server_error'))
            );
        }
    };

    /******* PUBLIC *******/

    classProto.set = function(id, params) {
        var that = this,
            item = that.items[id];
        item && that.setTab(id, params);
        return that;
    };

    classProto.setByIndex = function(index, params) {
        var that = this,
            item = that.itemsList[index];
        item && that.setTab(item.id, params);
        return that;
    };

    classProto.unset = function() {
        var that = this;
        that.triggerEvent('onUnsetStart');
        that.unsetTab(that.current, {action: 'onUnset'});
        // Reset
        if (that.params.toggleOnHashChange) {
            window.location.hash = '';
        }
        that.current = null;
        that.previous = null;
        that.triggerEvent('onUnset');
        return that;
    };

    classProto.get = function() {
        var that = this;
        return that.current;
    };

    classProto.refresh = function() {
        var that = this;
        if (!cm.isUndefined(that.current)) {
            that.refreshTab(that.current);
        }
        return that;
    };

    classProto.addTab = function(item) {
        var that = this;
        that.renderTab(item);
        return that;
    };

    classProto.addTabs = function(items) {
        var that = this;
        cm.forEach(items, function(item) {
            that.renderTab(item);
        });
        return that;
    };

    classProto.getTab = function(id) {
        var that = this;
        if (id && that.items[id]) {
            return that.items[id];
        }
        return null;
    };

    classProto.getTabs = function() {
        var that = this;
        return that.items;
    };

    classProto.getCurrentTab = function() {
        var that = this;
        return that.items[that.current];
    };

    classProto.getTabsCount = function() {
        var that = this;
        return that.itemsList.length;
    };

    classProto.isTabEmpty = function(id) {
        var that = this;
        var item = that.getTab(id);
        return !(item && item.tab.inner.childNodes.length);
    };

    classProto.abort = function() {
        var that = this;
        if (that.ajaxHandler && that.ajaxHandler.abort) {
            that.ajaxHandler.abort();
        }
        return that;
    };
});

cm.define('Com.ScrollPagination', {
    'extend' : 'Com.AbstractController',
    'events' : [
        'onRebuild',
        'onStart',
        'onAbort',
        'onError',
        'onEmpty',
        'onPageRender',
        'onPageRenderEnd',
        'onPageShow',
        'onPageHide',
        'onEnd',
        'onFinalize',
        'onSetCount',
        'onButtonShow',
        'onButtonHide',
        'onLoaderShow',
        'onLoaderHide'
    ],
    'params' : {
        'controllerEvents' : true,
        'renderStructure' : false,                                  // Render wrapper nodes if not exists in html
        'embedStructureOnRender' : false,
        'embedStructure' : 'append',
        'clearOnRebuild' : false,
        'resizeEvent' : true,
        'scrollEvent' : true,
        'scrollNode' : window,
        'scrollIndent' : 'Math.max(%scrollHeight% / 2, 600)',       // Variables: %blockHeight%.
        'disabled' : false,
        'data' : [],                                                // Static data
        'count' : null,
        'perPage' : 0,                                              // 0 - render all data in one page
        'startPage' : 1,                                            // Start page
        'startPageToken' : '',
        'startOffset' : 0,
        'pageCount' : 0,                                            // Render only count of pages. 0 - infinity
        'useToken' : false,
        'autoSend' : true,
        'showButton' : undefined,                                   // deprecated, user button.enable
        'showLoader' : true,
        'loaderDelay' : 'cm._config.loadDelay',
        'setDelay' : 'cm._config.loadDelay',
        'stopOnESC' : true,
        'pageTag' : 'div',
        'pageAttributes' : {
            'class' : 'com__scroll-pagination__page',
        },
        'button' : {
            'enable' : true,                                        // true - always | once - show once after first loaded page | none - don't show and don't scroll
            'classes' : ['button', 'button-primary'],
        },
        'responseCountKey' : 'count',                               // Take items count from response
        'responseTokenKey' : 'token',                               // Token key name
        'responseKey' : 'data',                                     // Instead of using filter callback, you can provide response array key
        'responseErrorsKey': 'errors',
        'responseHTML' : false,                                     // If true, html will append automatically
        'ajax' : {
            'type' : 'json',
            'method' : 'get',
            'url' : '',                                             // Request URL. Variables: %baseUrl%, %page%, %offset%, %token%, %limit%, %perPage%, %callback% for JSONP.
            'params' : ''                                           // Params object. %baseUrl%, %page%, %offset%, %token%, %limit%, %perPage%, %callback% for JSONP.
        }
    },
    'strings' : {
        'load_more' : 'Load More',
        'server_error' : 'An unexpected error has occurred. Please try again later.'
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractController.apply(that, arguments);
});

cm.getConstructor('Com.ScrollPagination', function(classConstructor, className, classProto, classInherit){
    classProto.construct = function(){
        var that = this;
        // variables
        that.nodes = {
            'container' : cm.node('div'),
            'scroll' : null,
            'bar' : cm.node('div'),
            'barHolder' : cm.node('div'),
            'content' : cm.node('div'),
            'pages' : cm.node('div'),
            'button' : cm.node('div'),
            'loader' : cm.node('div')
        };

        that.pages = {};
        that.ajaxHandler = null;
        that.loaderDelay = null;
        that.setDelay = null;
        that.currentAction = null;

        that.isAjax = false;
        that.isProcess = false;
        that.isFinalize = false;
        that.isButton = false;
        that.isDisabled = false;

        that.page = null;
        that.pageToken = null;
        that.currentPage = null;
        that.previousPage = null;
        that.nextPage = null;
        that.itemCount = null;
        that.pageCount = null;
        // Binds
        that.keyDownEventHandler = that.keyDownEvent.bind(that);
        that.setHandler = that.set.bind(that);
        // Call parent method - renderViewModel
        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.onConstructEnd = function(){
        var that = this;
        that.params['autoSend'] && that.set();
    };

    classProto.validateParams = function(){
        var that = this;
        that.triggerEvent('onValidateParamsStart');
        that.triggerEvent('onValidateParams');
        that.triggerEvent('onValidateParamsProcess');
        that.isDisabled = that.params['disabled'];
        // Set Scroll Node
        if(that.nodes['scroll']){
            that.params['scrollNode'] = that.nodes['scroll'];
        }
        // Button
        if (!cm.isUndefined(that.params.showButton)) {
            that.params.button.enable = that.params.showButton;
        }
        // If URL parameter exists, use ajax data
        if(!cm.isEmpty(that.params['ajax']['url'])){
            that.isAjax = true;
        }else{
            that.params['showLoader'] = false;
        }
        that.itemCount = that.params['count'];
        that.setPageCount();
        // Set start page token
        that.setToken(that.params['startPage'], that.params['startPageToken']);
        // Set next page token
        that.nextPage = that.params['startPage'];
        that.triggerEvent('onValidateParamsEnd');
    };

    classProto.onScroll = function(){
        var that = this;
        if(that.checkForRequest()){
            that.set();
        }
        // Show / Hide non visible pages
        cm.forEach(that.pages, function(page){
            that.isPageVisible(page);
        });
    };

    classProto.onRedraw = function(){
        var that = this;
        cm.forEach(that.pages, function(page){
            that.isPageVisible(page);
        });
    };

    /******* VIEW - MODEL *******/

    classProto.renderView = function(){
        var that = this;
        // Render Structure
        that.nodes['container'] = cm.node('div', {'class' : 'com__scroll-pagination'},
            that.nodes['content'] = cm.node('div', {'class' : 'com__scroll-pagination__content'},
                that.nodes['pages'] = cm.node('div', {'class' : 'com__scroll-pagination__pages'})
            ),
            that.nodes['bar'] = cm.node('div', {'class' : 'com__scroll-pagination__bar'},
                that.nodes['button'] = cm.node('button', {'class' : that.params.button.classes}, that.lang('load_more')),
                that.nodes['loader'] = cm.node('div', {'class' : 'button button-clear has-icon has-icon has-icon-small'},
                    cm.node('div', {'class' : 'icon small loader'})
                )
            )
        );
    };

    classProto.renderViewModel = function(){
        var that = this;
        // Call parent method - renderViewModel
        classInherit.prototype.renderViewModel.apply(that, arguments);
        // Reset styles and variables
        that.resetStyles();
        // Events
        cm.click.add(that.nodes['button'], function(e){
            e = cm.getEvent(e);
            cm.preventDefault(e);
            that.set();
        });
        if(that.params['stopOnESC']){
            cm.addEvent(window, 'keydown', that.keyDownEventHandler);
        }
    };

    /******* HELPERS *******/

    classProto.resetStyles = function(){
        var that = this;
        // Load More Button
        if(!that.params.button.enable || that.params.button.enable === 'none'){
            that.callbacks.hideButton(that);
        }else{
            that.callbacks.showButton(that);
        }
        // Hide Loader
        cm.addClass(that.nodes['loader'], 'is-hidden');
    };

    classProto.keyDownEvent = function(e){
        var that = this;
        cm.handleKey(e, 'escape', function(){
            if(!that.isDisabled && !that.isProcess && !that.isFinalize && that.params.button.enable !== 'none'){
                that.callbacks.showButton(that);
            }
        });
    };

    classProto.checkForRequest = function(){
        var that = this,
            scrollRect = cm.getRect(that.params['scrollNode']),
            pagesRect = cm.getRect(that.nodes['pages']),
            scrollIndent;
        if(!that.isDisabled && !cm.isProcess && !that.isFinalize && !that.isButton && !that.checkForButton()){
            scrollIndent = eval(
                cm.strReplace(that.params['scrollIndent'], {
                    '%scrollHeight%' : scrollRect['bottom'] - scrollRect['top']
                })
            );
            if(pagesRect['bottom'] - scrollRect['bottom'] <= scrollIndent){
                return true;
            }
        }
        return false;
    };

    classProto.checkForButton = function(){
        var that = this;
        return (
            that.params.button.enable === true ||
            (that.params.button.enable === 'once' && that.params['startPage'] === that.page)
        );
    };

    /******* CALLBACKS *******/

    /*** AJAX ***/

    classProto.callbacks.prepare = function(that, config){
        config = that.callbacks.beforePrepare(that, config);
        config['url'] = cm.strReplace(config['url'], {
            '%perPage%' : that.params['perPage'],
            '%limit%' : that.params['perPage'],
            '%page%' : that.page,
            '%offset%' : (that.page - 1) * that.params['perPage'] + that.params['startOffset'],
            '%token%' : that.pageToken,
            '%baseUrl%' : cm._baseUrl
        });
        config['params'] = cm.objectReplace(config['params'], {
            '%perPage%' : that.params['perPage'],
            '%limit%' : that.params['perPage'],
            '%page%' : that.page,
            '%offset%' : (that.page - 1) * that.params['perPage'] + that.params['startOffset'],
            '%token%' : that.pageToken,
            '%baseUrl%' : cm._baseUrl
        });
        config = that.callbacks.afterPrepare(that, config);
        return config;
    };

    classProto.callbacks.beforePrepare = function(that, config){
        return config;
    };

    classProto.callbacks.afterPrepare = function(that, config){
        return config;
    };

    classProto.callbacks.request = function(that, config){
        config = that.callbacks.prepare(that, config);
        that.currentAction = config;
        // Return ajax handler (XMLHttpRequest) to providing abort method.
        return cm.ajax(
            cm.merge(config, {
                'onStart' : function(){
                    that.callbacks.start(that);
                },
                'onSuccess' : function(response){
                    that.callbacks.response(that, config, response);
                },
                'onError' : function(){
                    that.callbacks.error(that, config);
                },
                'onAbort' : function(){
                    that.callbacks.abort(that, config);
                },
                'onEnd' : function(){
                    that.callbacks.end(that);
                }
            })
        );
    };

    classProto.callbacks.filter = function(that, config, response){
        var data = [],
            errorsItem = cm.objectPath(that.params['responseErrorsKey'], response),
            dataItem = cm.objectPath(that.params['responseKey'], response),
            countItem = cm.objectPath(that.params['responseCountKey'], response),
            tokenItem = cm.objectPath(that.params['responseTokenKey'], response);
        if(cm.isEmpty(errorsItem)){
            if(!cm.isEmpty(dataItem)){
                if(cm.isArray(dataItem) && that.params['perPage']){
                    data = dataItem.slice(0, that.params['perPage']);
                }else{
                    data = dataItem;
                }
            }
            if(!cm.isEmpty(countItem)){
                that.setCount(countItem);
            }
            if(!cm.isEmpty(tokenItem)){
                that.setToken(that.nextPage, tokenItem);
            }
            if(that.params['useToken'] && cm.isEmpty(tokenItem)){
                that.callbacks.finalize(that);
            }
        }
        return data;
    };

    classProto.callbacks.response = function(that, config, response){
        // Set next page
        that.setPage();
        // Response
        if(response){
            response = that.callbacks.filter(that, config, response);
        }
        if(!cm.isEmpty(response)){
            that.callbacks.render(that, response);
        }else{
            that.triggerEvent('onEmpty');
            that.callbacks.finalize(that);
        }
    };

    classProto.callbacks.error = function(that, config){
        that.callbacks.finalize(that);
        that.triggerEvent('onError');
    };

    classProto.callbacks.abort = function(that, config){
        that.triggerEvent('onAbort');
    };

    /* *** STATIC *** */

    classProto.callbacks.data = function(that, data){
        var length, start, end, pageData;
        that.callbacks.start(that);
        that.setPage();
        if(!cm.isEmpty(data)){
            // Get page data and render
            if(that.params['perPage'] === 0){
                that.callbacks.render(that, data);
                that.callbacks.finalize(that);
            }else if(that.params['perPage'] > 0){
                length = data.length;
                start = (that.page - 1) * that.params['perPage'];
                end = (that.page * that.params['perPage']);
                if(start >= length){
                    that.callbacks.finalize(that);
                }else{
                    pageData = data.slice(start , Math.min(end, length));
                    that.callbacks.render(that, pageData);
                }
                if(end >= length){
                    that.callbacks.finalize(that);
                }
            }
        }else{
            that.callbacks.render(that, data);
        }
        that.callbacks.end(that);
    };

    /* *** RENDER *** */

    classProto.callbacks.renderContainer = function(that, page){
        return cm.node(that.params['pageTag'], that.params['pageAttributes']);
    };

    classProto.callbacks.render = function(that, data){
        var scrollTop = cm.getScrollTop(that.params['scrollNode']),
            page = {
                'page' : that.page,
                'token' : that.pageToken,
                'pages' : that.nodes['pages'],
                'container' : cm.node(that.params['pageTag']),
                'data' : data,
                'isEmpty' : false,
                'isVisible' : false
            };
        // Clear container
        if(that.page === that.params['startPage']){
            that.clear();
        }
        // Render page
        page['container'] = that.callbacks.renderContainer(that, page);
        that.pages[that.page] = page;
        that.triggerEvent('onPageRender', page);
        that.callbacks.renderPage(that, page);
        // Embed
        cm.appendChild(page['container'], that.nodes['pages']);
        cm.addClass(page['container'], 'is-loaded', true);
        // Restore scroll position
        cm.setScrollTop(that.params['scrollNode'], scrollTop);
        that.triggerEvent('onPageRenderEnd', page);
        that.isPageVisible(page);
    };

    classProto.callbacks.renderPage = function(that, page){
        var nodes;
        if(that.params['responseHTML']){
            nodes = cm.strToHTML(page['data']);
            cm.appendNodes(nodes, page['container']);
        }
    };

    /* *** HELPERS *** */

    classProto.callbacks.start = function(that){
        that.isProcess = true;
        // Show Loader
        if(that.params['showLoader']){
            if(that.isButton){
                cm.addClass(that.nodes['button'], 'is-hidden');
                cm.removeClass(that.nodes['loader'], 'is-hidden');
                that.triggerEvent('onLoaderShow');
            }else{
                that.loaderDelay = setTimeout(function(){
                    cm.removeClass(that.nodes['loader'], 'is-hidden');
                    cm.removeClass(that.nodes['bar'], 'is-hidden');
                    that.triggerEvent('onLoaderShow');
                }, that.params['loaderDelay']);
            }
        }
        that.triggerEvent('onStart');
    };

    classProto.callbacks.end = function(that){
        that.isProcess = false;
        // Hide Loader
        that.loaderDelay && clearTimeout(that.loaderDelay);
        cm.addClass(that.nodes['loader'], 'is-hidden');
        that.triggerEvent('onLoaderHide');
        // Check pages count
        if(that.itemCount === 0 || (that.pageCount > 0 && that.pageCount === that.currentPage)){
            that.callbacks.finalize(that);
        }
        // Show / Hide Load More Button
        that.callbacks.toggleButton(that);
        that.triggerEvent('onEnd');
        // Request more pages if has empty space below
        if(that.checkForRequest()){
            that.setDelay = setTimeout(that.setHandler, that.params['setDelay']);
        }
    };

    classProto.callbacks.finalize = function(that){
        if(!that.isFinalize){
            that.isFinalize = true;
            that.callbacks.hideButton(that);
            that.triggerEvent('onFinalize');
        }
    };

    classProto.callbacks.toggleButton = function(that){
        if(!that.isFinalize && that.checkForButton()){
            that.callbacks.showButton(that);
        }else{
            that.callbacks.hideButton(that);
        }
    };

    classProto.callbacks.showButton = function(that){
        that.isButton = true;
        cm.removeClass(that.nodes['button'], 'is-hidden');
        cm.removeClass(that.nodes['bar'], 'is-hidden');
        cm.removeClass(that.nodes['barHolder'], 'is-hidden');
        that.triggerEvent('onButtonShow');
    };

    classProto.callbacks.hideButton = function(that){
        that.isButton = false;
        cm.addClass(that.nodes['button'], 'is-hidden');
        cm.addClass(that.nodes['bar'], 'is-hidden');
        cm.addClass(that.nodes['barHolder'], 'is-hidden');
        that.triggerEvent('onButtonHide');
    };

    /* ******* PUBLIC ******* */

    classProto.rebuild = classProto.request = function(params){
        var that = this;
        // Cleanup
        if(that.isProcess){
            that.abort();
        }
        that.pages = {};
        that.page = null;
        that.pageToken = null;
        that.currentPage = null;
        that.previousPage = null;
        that.nextPage = null;
        that.itemCount = null;
        that.pageCount = null;
        that.isFinalize = false;
        // Set new parameters
        if(!cm.isEmpty(params)){
            that.setParams(params);
        }
        that.validateParams();
        // Reset styles and variables
        that.resetStyles();
        if(that.params['clearOnRebuild']){
            that.clear();
        }
        that.triggerEvent('onRebuild');
        // Render new pge
        that.set();
        return that;
    };

    classProto.clear = function(){
        var that = this;
        cm.clearNode(that.nodes['pages']);
        return that;
    };

    classProto.set = function(){
        var that = this,
            config;
        that.setDelay && clearTimeout(that.setDelay);
        if(!that.isProcess && !that.isFinalize){
            // Preset next page and page token
            that.page = that.nextPage;
            that.pageToken = that.pages[that.page]? that.pages[that.page]['token'] : '';
            // Request
            if(that.isAjax){
                config = cm.clone(that.params['ajax']);
                that.ajaxHandler = that.callbacks.request(that, config);
            }else{
                that.callbacks.data(that, that.params['data']);
            }
        }
        return that;
    };

    classProto.setToken = function(page, token){
        var that = this;
        if(!that.pages[page]){
            that.pages[page] = {};
        }
        that.pages[page]['token'] = token;
        return that;
    };

    classProto.setCount = function(count){
        var that = this;
        if(cm.isString(count)){
            count = parseInt(count);
        }
        if(cm.isNumber(count) && count !== that.itemCount){
            that.itemCount = count;
            that.setPageCount();
            if(that.itemCount === 0 || (that.pageCount > 0 && that.pageCount === that.currentPage)){
                that.callbacks.finalize(that);
            }
            that.triggerEvent('onSetCount', count);
        }
        return that;
    };

    classProto.setPageCount = function(){
        var that = this;
        if(that.params['pageCount'] === 0 && that.itemCount && that.params['perPage']){
            that.pageCount = Math.ceil(that.itemCount / that.params['perPage']);
        }else{
            that.pageCount = that.params['pageCount'];
        }
        return that;
    };

    classProto.setAction = function(o, mode, update, rebuild){
        var that = this;
        mode = cm.inArray(['raw', 'update', 'current'], mode) ? mode : 'current';
        update = cm.isUndefined(update) ? false : update;
        rebuild = cm.isUndefined(rebuild) ? true : rebuild;
        switch(mode){
            case 'raw':
                that.params['ajax'] = cm.merge(that._raw.params['ajax'], o);
                break;
            case 'current':
                that.params['ajax'] = cm.merge(that.params['ajax'], o);
                break;
            case 'update':
                that.params['ajax'] = cm.merge(that._update.params['ajax'], o);
                break;
        }
        if(update){
            that._update.params['ajax'] = cm.clone(that.params['ajax']);
        }
        if(rebuild){
            that.rebuild();
        }
        return that;
    };

    classProto.getAction = function(){
        var that = this;
        return that.params['ajax'];
    };

    classProto.getCurrentAction = function(){
        var that = this;
        return that.currentAction;
    };

    classProto.getPages = function(){
        var that = this;
        return that.pages;
    };

    classProto.setPage = function(){
        var that = this;
        that.previousPage = that.currentPage;
        that.currentPage = that.nextPage;
        that.nextPage++;
        return that;
    };

    classProto.isPageVisible = function(page, scrollRect){
        var that = this;
        if(page['container']){
            scrollRect = cm.isUndefined(scrollRect) ? cm.getRect(that.params['scrollNode']) : scrollRect;
            var pageRect = cm.getRect(page['container']);

            if(cm.inRange(pageRect['top'], pageRect['bottom'], scrollRect['top'], scrollRect['bottom'])){
                if(!page['isVisible']){
                    page['isVisible'] = true;
                    cm.removeClass(page['container'], 'is-hidden');
                    that.triggerEvent('onPageShow', page);
                }
            }else{
                if(page['isVisible']){
                    page['isVisible'] = false;
                    cm.addClass(page['container'], 'is-hidden');
                    that.triggerEvent('onPageHide', page);
                }
            }
            return page['isVisible'];
        }
        return false;
    };

    classProto.isEmpty = function(){
        var that = this,
            isEmpty = true;
        cm.forEach(that.pages, function(page){
            if(page.isEmpty === false){
                isEmpty = false;
            }
        });
        return isEmpty;
    };

    classProto.finalize = function(){
        var that = this;
        that.callbacks.finalize(that);
        return that;
    };

    classProto.abort = function(){
        var that = this;
        if(that.ajaxHandler && that.ajaxHandler.abort){
            that.ajaxHandler.abort();
        }
        return that;
    };

    classProto.disable = function(){
        var that = this;
        that.isDisabled = true;
        return that;
    };

    classProto.enable = function(){
        var that = this;
        that.isDisabled = false;
        return that;
    };

    classProto.embedButton = function(node){
        var that = this;
        that.nodes['barHolder'] = node;
        cm.appendChild(that.nodes['bar'], node);
    };

    classProto.isParent = function(node, flag){
        var that = this;
        return cm.isParent(that.nodes['container'], node, flag);
    };
});

cm.define('Com.Calendar', {
    'modules': [
        'Params',
        'Events',
        'Langs',
        'DataConfig',
        'Stack',
        'Structure'
    ],
    'events': [
        'onRender',
        'onDayOver',
        'onDayOut',
        'onDayClick',
        'onDayRender',
        'onPrevMonthRequest',
        'onNextMonthRequest',
        'onMonthRequest',
        'onMonthRender',
    ],
    'params': {
        'customEvents': true,
        'node': cm.node('div'),
        'name': '',
        'className': '',
        'startYear': 1950,                                                 // number | current
        'endYear': 'current + 10',                                         // number | current
        'startMonth': null,                                                // ToDo: implement
        'endMonth': null,                                                  // ToDo: implement
        'renderMonthOnInit': true,
        'startWeekDay': 0,
        'renderSelects': true,
        'renderArrows': false,
        'renderSelectsInBody': true,
        'changeMonthOnClick': true,
        'renderMonthOnRequest': true,
        'dayClasses': [],
        'dayButtonRole': 'radio',
    },
    'strings': {
        'daysAbbr': cm._strings.daysAbbr,
        'days': cm._strings.days,
        'months': cm._strings.months,
        'month': 'Month',
        'year': 'Year',
        'prev': 'Previous month',
        'next': 'Next month',
    }
},
function(params) {
    var that = this,
        nodes = {
            selects: {}
        },
        selects = {},
        today = new Date(),
        current = {
            year: today.getFullYear(),
            month: today.getMonth()
        },
        previous = {},
        next = {};

    that.isDestructed = null;

    var init = function() {
        that.destructHandler = that.destruct.bind(that);
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataConfig(that.params['node']);
        validateParams();
        render();
        setMiscEvents();
        setEvents();
        that.params['renderMonthOnInit'] && renderView();
        that.addToStack(nodes.container);
        that.triggerEvent('onRender');
    };

    var validateParams = function() {
        if (/current/.test(that.params.startYear)) {
            that.params.startYear = eval(cm.strReplace(that.params.startYear, {current: new Date().getFullYear()}));
        }
        if (/current/.test(that.params.endYear)) {
            that.params.endYear = eval(cm.strReplace(that.params.endYear, {current: new Date().getFullYear()}));
        }
    };

    var render = function() {
        // Structure
        nodes.container = cm.node('div', {classes: 'com__calendar'},
            cm.node('table',
                cm.node('thead',
                    nodes.days = cm.node('tr')
                ),
                nodes.dates = cm.node('tbody')
            )
        );

        // Add css class
        cm.addClass(nodes.container, that.params['className']);

        // Render selects
        nodes.selects = cm.node('div', {classes: 'selects'},
            nodes.months = cm.node('select', {classes: 'select months'}),
            nodes.years = cm.node('select', {classes: 'select years'})
        );
        if(that.params.renderSelects){
            cm.insertFirst(nodes.selects, nodes.container);
        }

        // Render arrows
        if (that.params.renderArrows) {
            nodes.prev = cm.node('button', {classes: ['button-primary', 'arrow'], title: that.msg('prev'), 'aria-label': that.msg('prev')}, '<');
            cm.click.add(nodes.prev, that.prevMonth.bind(that));
            cm.insertFirst(nodes.prev, nodes.selects);
            nodes.next = cm.node('button', {classes: ['button-primary', 'arrow'], title: that.msg('next'), 'aria-label': that.msg('next')}, '>');
            cm.click.add(nodes.next, that.nextMonth.bind(that));
            cm.insertLast(nodes.next, nodes.selects);
        }
        
        // Render days
        var weekday;
        cm.forEach(7, function(i) {
            weekday = i + that.params.startWeekDay;
            weekday = weekday > 6? Math.abs(6 - (weekday - 1)) : weekday;
            nodes.days.appendChild(
                cm.node('th', {title: that.msg('days')[weekday]}, that.msg('daysAbbr')[weekday])
            );
        });

        // Render selects options
        that.msg('months').forEach(function(item, i) {
            nodes.months.appendChild(
                cm.node('option', {value: i}, item)
            );
        });
        for (var i = that.params.endYear; i >= that.params.startYear; i--) {
            nodes.years.appendChild(
                cm.node('option', {value: i}, i)
            );
        }

        // Append
        that.embedStructure(nodes.container);
    };

    var setMiscEvents = function() {
        selects.years = new Com.Select({
                node: nodes.years,
                title: that.msg('year'),
                renderInBody: that.params.renderSelectsInBody
            })
            .set(current.year)
            .addEvent('onChange', renderView);

        selects.months = new Com.Select({
                node: nodes.months,
                title: that.msg('month'),
                renderInBody: that.params.renderSelectsInBody
            })
            .set(current.month)
            .addEvent('onChange', renderView);
    };

    var setEvents = function() {
        // Add custom event
        if (that.params['customEvents']) {
            cm.customEvent.add(nodes.container, 'destruct', that.destructHandler);
        }
    };

    var unsetEvents = function() {
        // Add custom event
        if (that.params['customEvents']) {
            cm.customEvent.remove(nodes.container, 'destruct', that.destructHandler);
        }
    };

    var renderView = function(params){
        params = cm.merge({
            render: that.params.renderMonthOnRequest,
            triggerEvents: true,
            event: null,
        }, params);

        // Get new today date
        var date;
        today = new Date();
        
        // Get current month data
        date = new Date(selects.years.get(), selects.months.get(), 1);
        current = getMonthData(date);
        
        // Get previous month data
        date = new Date(current.year, current.month, 1);
        date.setMonth(current.month - 1);
        previous = getMonthData(date);
        
        // Get next month data
        date = new Date(current.year, current.month, 1);
        date.setMonth(current.month + 1);
        next = getMonthData(date);

        // Trigger request events
        if (params.triggerEvents) {
            that.triggerEvent('onMonthRequest', current);
            params.event && that.triggerEvent(params.event, current);
        }

        // Render view
        if (params.render) {
            // Clear current table
            cm.clearNode(nodes.dates);

            // Render rows
            cm.forEach(6, renderRow);

            // Trigger render events
            if (params.triggerEvents) {
                that.triggerEvent('onMonthRender', current);
            }
        }
    };

    var renderRow = function(i) {
        var startWeekDay = current.startWeekDay - that.params.startWeekDay,
            day = ((i - 1) * 7) + 1 - (startWeekDay > 0? startWeekDay - 7 : startWeekDay),
            tr = nodes.dates.appendChild(
                cm.node('tr')
            );
        cm.forEach(7, function() {
            renderCell(tr, day);
            day++;
        });
    };

    var renderCell = function(row, day){
        var item = {
            row: row,
            day: day,
            month: current.month,
            year: current.year,
            date: new Date(current.year, current.month, day),
            nodes: {},
            isWeekend: false,
            isToday: false
        };

        // Structure
        item.container = item.nodes.container = cm.node('td', {classes: that.params.dayClasses});

        // Render day
        if (day <= 0) {
            cm.addClass(item.container, 'out');
            item.node = item.nodes.holder = renderDay(previous.dayCount + day);
            if (that.params.changeMonthOnClick) {
                item.node.title = that.msg('prev');
                cm.addEvent(item.node, 'click', function() {
                    that.prevMonth();
                });
            }
        } else if(day > current.dayCount) {
            cm.addClass(item.container, 'out');
            item.node = item.nodes.holder = renderDay(day - current.dayCount);
            if (that.params.changeMonthOnClick) {
                item.node.title = that.msg('next');
                cm.addEvent(item.node, 'click', function() {
                    that.nextMonth();
                });
            }
        } else {
            cm.addClass(item.container, 'in');
            item.node = item.nodes.holder = renderDay(day);
            item.node.setAttribute('role', that.params.dayButtonRole);
            item.node.setAttribute('tabindex', 0);
            item.node.setAttribute('aria-checked', false);

            // Today mark
            if (
                today.getFullYear() === current.year &&
                today.getMonth() === current.month &&
                today.getDate() === day
            ) {
                item.isToday = true;
                cm.addClass(item.container, 'today');
            }

            // Add events
            cm.addEvent(item.node, 'mouseover', function() {
                that.triggerEvent('onDayOver', item);
            });
            cm.addEvent(item.node, 'mouseout', function() {
                that.triggerEvent('onDayOut', item);
            });
            cm.addEvent(item.node, 'click', function() {
                that.triggerEvent('onDayClick', item);
            });

            // Add to array
            current.days[day] = item;
            that.triggerEvent('onDayRender', item);
        }

        // Weekend mark
        if (/[06]/.test(item.date.getDay())) {
            item.isWeekend = true;
            cm.addClass(item.container, 'weekend');
        }

        // Append
        item.container.appendChild(item.node);
        item.row.appendChild(item.container);
        return item;
    };

    var renderDay = function(day) {
        return cm.node('div', {classes: 'day'},
            cm.node('div', {classes: 'label'}, day)
        );
    };

    var getMonthData = function(date) {
        var data = {
            date: date,
            year: date.getFullYear(),
            month: date.getMonth(),
            days: {},
            startWeekDay: date.getDay()
        };
        data.dayCount = new Date(data.year, (data.month + 1), 0).getDate();
        return data;
    };

    /* ******* PUBLIC ******* */

    that.set = function(year, month, params) {
        if (
            year >= that.params.startYear && year <= that.params.endYear &&
            month >= 0 && month <= 11
        ) {
            selects.years.set(year, false);
            selects.months.set(month, false);
            renderView(params);
        }
        return that;
    };

    that.clear = function(params) {
        var date = new Date();
        selects.years.set(date.getFullYear(), false);
        selects.months.set(date.getMonth(), false);
        renderView(params);
        return that;
    };

    that.getCurrentMonth = function() {
        return current;
    };

    that.getFullYear = function() {
        return current.year;
    };

    that.getMonth = function() {
        return current.month;
    };

    that.getDays = function() {
        return current.days;
    };

    that.renderMonth = function(params) {
        renderView(params);
        return that;
    };

    that.prevMonth = function(params) {
        params = cm.merge(params, {
            event: 'onPrevMonthRequest',
        });
        if (previous.year >= that.params.startYear) {
            selects.years.set(previous.year, false);
            selects.months.set(previous.month, false);
            renderView(params);
        }
        return that;
    };

    that.nextMonth = function(params) {
        params = cm.merge(params, {
            event: 'onNextMonthRequest',
        });
        if (next.year <= that.params.endYear) {
            selects.years.set(next.year, false);
            selects.months.set(next.month, false);
            renderView(params);
        }
        return that;
    };

    that.selectDay = function(date) {
        if (date && current.year === date.getFullYear() && current.month === date.getMonth()) {
            var day = current.days[date.getDate()];
            day.nodes.holder.setAttribute('aria-checked', true);
            cm.addClass(day.nodes.container, 'selected');
        }
    };

    that.unSelectDay = function(date) {
        if (date && current.year === date.getFullYear() && current.month === date.getMonth()) {
            var day = current.days[date.getDate()];
            day.nodes.holder.setAttribute('aria-checked', false);
            cm.removeClass(day.nodes.container, 'selected');
        }
    };

    that.getNodes = function(key) {
        return nodes[key] || nodes;
    };

    that.destruct = function() {
        var that = this;
        if (!that.isDestructed) {
            that.isDestructed = true;
            selects.years.destruct();
            selects.months.destruct();
            unsetEvents();
            that.removeFromStack();
        }
        return that;
    };

    init();
});

cm.define('Com.CalendarEvents', {
    'modules' : [
        'Params',
        'Structure',
        'Stack',
        'DataConfig',
        'Langs'
    ],
    'params' : {
        'node' : cm.node('div'),
        'container' : null,
        'embedStructure' : 'append',
        'name' : '',
        'data' : {},
        'format' : 'cm._config.displayDateFormat',
        'startYear' : 1950,
        'endYear' : new Date().getFullYear() + 10,
        'startWeekDay' : 0,
        'target' : '_blank',
        'Com.Tooltip' : {
            'className' : 'com__calendar-events__tooltip'
        }
    },
    'strings' : {
        'daysAbbr' : ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
        'days' : ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        'months' : ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    }
},
function(params){
    var that = this;

    that.nodes = {};
    that.components = {};

    var init = function(){
        that.setParams(params);
        that.getDataConfig(that.params['node']);
        // Render
        render();
        setMiscEvents();
        that.addToStack(that.nodes['container']);
    };

    var render = function(){
        // Structure
        that.nodes['container'] = cm.node('div', {'class' : 'com__calendar-events'});
        // Render calendar
        that.components['calendar'] = new Com.Calendar({
            'node' : that.nodes['container'],
            'renderMonthOnInit' : false,
            'startYear' : that.params['startYear'],
            'endYear' : that.params['endYear'],
            'startWeekDay' : that.params['startWeekDay'],
            'langs' : that.params['langs']
        });
        // Render tooltip
        that.components['tooltip'] = new Com.Tooltip(that.params['Com.Tooltip']);
        // Append
        that.embedStructure(that.nodes['container']);
    };

    var setMiscEvents = function(){
        // Add events on calendars day
        that.components['calendar']
            .addEvent('onDayOver', renderTooltip)
            .addEvent('onMonthRender', markMonthDays)
            .renderMonth();
    };

    var markMonthDays = function(calendar, params){
        var data, day;
        if((data = that.params['data'][params['year']]) && (data = data[(params['month'] + 1)])){
            cm.forEach(data, function(value, key){
                if(day = params['days'][key]){
                    cm.addClass(day['container'], 'active');
                }
            });
        }
    };

    var renderTooltip = function(calendar, params){
        var data,
            myNodes = {};

        if((data = that.params['data'][params['year']]) && (data = data[(params['month'] + 1)]) && (data = data[params['day']])){
            // Structure
            myNodes['content'] = cm.node('div', {'class' : 'pt__listing com__calendar-events__listing'},
                myNodes['list'] = cm.node('ul', {'class' : 'list'})
            );
            // Foreach events
            cm.forEach(data, function(value){
                myNodes['list'].appendChild(
                    cm.node('li',
                        cm.node('a', {'href' : value['url'], 'target' : that.params['target']}, value['title'])
                    )
                );
            });
            // Show tooltip
            that.components['tooltip']
                .setTarget(params['node'])
                .setTitle(cm.dateFormat(params['date'], that.params['format'], that.lang()))
                .setContent(myNodes['content'])
                .show();
        }
    };

    /* ******* MAIN ******* */

    that.addData = function(data){
        that.params['data'] = cm.merge(that.params['data'], data);
        that.components['calendar'].renderMonth();
        return that;
    };

    that.replaceData = function(data){
        that.params['data'] = data;
        that.components['calendar'].renderMonth();
        return that;
    };

    init();
});
cm.define('Com.CollapsibleLayout', {
    'modules' : [
        'Params',
        'Events',
        'DataConfig',
        'DataNodes',
        'Storage'
    ],
    'events' : [
        'onRender',
        'onCollapseLeft',
        'onExpandLeft',
        'onCollapseRight',
        'onExpandRight'
    ],
    'params' : {
        'node' : cm.node('div'),
        'remember' : false
    }
},
function(params){
    var that = this;

    that.nodes = {
        'leftButton' : cm.node('div'),
        'leftContainer' : cm.node('div'),
        'rightButton': cm.node('div'),
        'rightContainer' : cm.node('div')
    };

    that.isLeftCollapsed = false;
    that.isRightCollapsed = false;

    /* *** CLASS FUNCTIONS *** */

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataNodes(that.params['node']);
        that.getDataConfig(that.params['node']);
        render();
    };

    var render = function(){
        var storageLeftCollapsed,
            storageRightCollapsed;
        // Left Sidebar
        cm.addEvent(that.nodes['leftButton'], 'click', toggleLeft);
        // Right sidebar
        cm.addEvent(that.nodes['rightButton'], 'click', toggleRight);
        // Check toggle class
        that.isLeftCollapsed = cm.isClass(that.params['node'], 'is-sidebar-left-collapsed');
        that.isRightCollapsed = cm.isClass(that.params['node'], 'is-sidebar-right-collapsed');
        // Check storage
        if(that.params['remember']){
            storageLeftCollapsed = that.storageRead('isLeftCollapsed');
            storageRightCollapsed = that.storageRead('isRightCollapsed');
            that.isLeftCollapsed = storageLeftCollapsed !== null ? storageLeftCollapsed : that.isLeftCollapsed;
            that.isRightCollapsed = storageRightCollapsed !== null ? storageRightCollapsed : that.isRightCollapsed;
        }
        // Check sidebars visibility
        if(!cm.inDOM(that.nodes['leftContainer']) || cm.getStyle(that.nodes['leftContainer'], 'display') == 'none'){
            that.isLeftCollapsed = true;
        }
        if(!cm.inDOM(that.nodes['rightContainer']) || cm.getStyle(that.nodes['rightContainer'], 'display') == 'none'){
            that.isRightCollapsed = true;
        }
        // Trigger events
        if(that.isLeftCollapsed){
            that.collapseLeft(true);
        }else{
            that.expandLeft(true);
        }
        if(that.isRightCollapsed){
            that.collapseRight(true);
        }else{
            that.expandRight(true);
        }
        that.triggerEvent('onRender');
    };

   var toggleRight = function(){
        if(that.isRightCollapsed){
            that.expandRight();
        }else{
            that.collapseRight();
        }
    };

    var toggleLeft = function(){
        if(that.isLeftCollapsed){
            that.expandLeft();
        }else{
            that.collapseLeft();
        }
    };

    /* ******* MAIN ******* */

    that.collapseLeft = function(isImmediately){
        that.isLeftCollapsed = true;
        isImmediately && cm.addClass(that.params['node'], 'is-immediately');
        cm.replaceClass(that.params['node'], 'is-sidebar-left-expanded', 'is-sidebar-left-collapsed', true);
        isImmediately && cm.removeClass(that.params['node'], 'is-immediately');
        // Write storage
        if(that.params['remember']){
            that.storageWrite('isLeftCollapsed', true);
        }
        that.triggerEvent('onCollapseLeft');
        return that;
    };

    that.expandLeft = function(isImmediately){
        that.isLeftCollapsed = false;
        isImmediately && cm.addClass(that.params['node'], 'is-immediately');
        cm.replaceClass(that.params['node'], 'is-sidebar-left-collapsed', 'is-sidebar-left-expanded', true);
        setTimeout(function(){
            isImmediately && cm.removeClass(that.params['node'], 'is-immediately');
        }, 5);
        // Write storage
        if(that.params['remember']){
            that.storageWrite('isLeftCollapsed', false);
        }
        that.triggerEvent('onExpandLeft');
        return that;
    };

    that.collapseRight = function(isImmediately){
        that.isRightCollapsed = true;
        isImmediately && cm.addClass(that.params['node'], 'is-immediately');
        cm.replaceClass(that.params['node'], 'is-sidebar-right-expanded', 'is-sidebar-right-collapsed', true);
        setTimeout(function(){
            isImmediately && cm.removeClass(that.params['node'], 'is-immediately');
        }, 5);
        // Write storage
        if(that.params['remember']){
            that.storageWrite('isRightCollapsed', true);
        }
        that.triggerEvent('onCollapseRight');
        return that;
    };

    that.expandRight = function(isImmediately){
        that.isRightCollapsed = false;
        isImmediately && cm.addClass(that.params['node'], 'is-immediately');
        cm.replaceClass(that.params['node'], 'is-sidebar-right-collapsed', 'is-sidebar-right-expanded', true);
        isImmediately && cm.removeClass(that.params['node'], 'is-immediately');
        // Write storage
        if(that.params['remember']){
            that.storageWrite('isRightCollapsed', false);
        }
        that.triggerEvent('onExpandRight');
        return that;
    };

    init();
});

cm.define('Com.Collector', {
    'modules' : [
        'Params',
        'Events',
        'DataConfig',
        'Stack'
    ],
    'events' : [
        'onRenderStart',
        'onRender',
        'onAdd',
        'onRemove',
        'onConstructStart',
        'onConstruct',
        'onDestructStart',
        'onDestruct'
    ],
    'params' : {
        'node' : 'document.body',
        'name' : '',
        'attribute' : 'data-element',
        'autoInit' : false
    }
},
function(params){
    var that = this;

    that.isChanged = false;
    that.stackList = [];
    that.stackNodes = {};

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataConfig(that.params['node']);
        that.addToStack(that.params['node']);
        that.triggerEvent('onRenderStart');
        render();
        that.addToStack(that.params['node']);
        that.triggerEvent('onRender');
    };

    var render = function(){
        if(that.params['autoInit']){
            cm.forEach(cm._defineStack, function(classConstructor){
                that.add(classConstructor.prototype._name['full'], function(node){
                    new classConstructor({
                        'node' : node
                    });
                }, null, classConstructor.prototype.params['collectorPriority']);
            });
        }
    };

    var findNodes = function(parentNode, name){
        var nodes = [];
        // Find element in specified node
        if(parentNode.getAttribute(that.params['attribute']) === name){
            nodes.push(parentNode);
        }
        // Search for nodes in specified node
        nodes = nodes.concat(
            cm.clone(
                cm.getByAttr(that.params['attribute'], name, parentNode)
            )
        );
        return nodes;
    };

    var addNodes = function(parentNode, name){
        var nodes = findNodes(parentNode, name);
        // Filter off existing nodes
        nodes = nodes.filter(function(node){
            return !cm.inArray(that.stackNodes[name], node);
        });
        // Push new nodes in constructed nodes array
        that.stackNodes[name] = that.stackNodes[name].concat(nodes);
        return nodes;
    };

    var removeNodes = function(parentNode, name){
        var nodes = findNodes(parentNode, name),
            inArray;
        // Filter off not existing nodes and remove existing from global array
        nodes = nodes.filter(function(node){
            if(inArray = cm.inArray(that.stackNodes[name], node)){
                that.stackNodes[name].splice(that.stackNodes[name].indexOf(node), 1);
            }
            return inArray;
        });
        return nodes;
    };

    var sortList = function(){
        if(that.isChanged){
            that.stackList.sort(function(a, b){
                return a['priority'] - b['priority'];
            });
        }
        that.isChanged = false;
    };

    var constructAll = function(parentNode){
        var processNodes = {},
            processArray = that.stackList.slice(0);
        // Find new nodes to process
        cm.forEach(that.stackNodes, function(item, name){
            processNodes[name] = addNodes(parentNode, name);
        });
        // Process nodes
        cm.forEach(processArray, function(item){
            cm.forEach(processNodes[item['name']], function(node){
                item['construct'] && item['construct'](node, item['priority']);
            });
        });
    };

    var constructItem = function(parentNode, name){
        var processNodes = addNodes(parentNode, name),
            processArray = that.stackList.filter(function(item){
                return item['name'] === name;
            });
        cm.forEach(processArray, function(item){
            cm.forEach(processNodes, function(node){
                item['construct'] && item['construct'](node, item['priority']);
            });
        });
    };

    var destructAll = function(parentNode){
        var processNodes = {},
            processArray = that.stackList.slice(0);
        if(cm.isNode(parentNode)){
            cm.forEach(that.stackNodes, function(item, name){
                processNodes[name] = removeNodes(parentNode, name);
            });
            cm.forEach(processArray, function(item){
                cm.forEach(processNodes[item['name']], function(node){
                    item['destruct'] && item['destruct'](node, item['priority']);
                });
            });
        }else if(cm.isWindow(window)){
            cm.forEach(processArray, function(item){
                cm.forEach(that.stackNodes[item['name']], function(node){
                    item['destruct'] && item['destruct'](node, item['priority']);
                });
            });
            cm.forEach(that.stackNodes, function(item, name){
                that.stackNodes[name] = [];
            });
        }
    };

    var destructItem = function(parentNode, name){
        var processNodes = {},
            processArray = that.stackList.filter(function(item){
                return item['name'] === name;
            });
        if(cm.isNode(parentNode)){
            processNodes = removeNodes(parentNode, name);
            cm.forEach(processArray, function(item){
                cm.forEach(processNodes, function(node){
                    item['destruct'] && item['destruct'](node, item['priority']);
                });
            });
        }else if(cm.isWindow(window)){
            cm.forEach(processArray, function(item){
                cm.forEach(that.stackNodes[item['name']], function(node){
                    item['destruct'] && item['destruct'](node, item['priority']);
                });
            });
            that.stackNodes[name] = [];
        }
    };

    /* ******* PUBLIC ******* */

    that.add = function(name, construct, destruct, priority){
        if(name){
            if(!that.stackNodes[name]){
                that.stackNodes[name] = [];
            }
            var item = {
                'name' : name,
                'priority' : priority || 0,
                'construct' : construct,
                'destruct' : destruct
            };
            if(!cm.isUndefined(priority) && cm.isNumber(priority)){
                that.stackList.splice(priority, 0, item);
            }else{
                that.stackList.push(item);
            }
            that.isChanged = true;
            that.triggerEvent('onAdd', item);
        }
        return that;
    };

    that.remove = function(name, construct, destruct){
        if(name){
            if(cm.isUndefined(construct)){
                that.stackList = that.stackList.filter(function(item){
                    return !(item['name'] === name);
                });
            }else{
                that.stackList = that.stackList.filter(function(item){
                    return !(item['name'] === name && item['construct'] === construct && item['destruct'] === destruct);
                });
            }
            that.isChanged = true;
            that.triggerEvent('onRemove', {
                'name' : name
            });
        }
        return that;
    };

    that.construct = function(node, name){
        var timer = Date.now();
        node = node || document.body;
        that.triggerEvent('onConstructStart', {
            'node' : node,
            'name' : name
        });
        sortList();
        if(name){
            constructItem(node, name);
        }else{
            constructAll(node);
        }
        that.triggerEvent('onConstruct', {
            'node' : node,
            'name' : name
        });
        cm.errorLog({
            'type' : 'common',
            'name' : 'Com.Collector',
            'message' : ['Construct time', (Date.now() - timer), 'ms.'].join(' ')
        });
        return that;
    };

    that.destruct = function(node, name){
        var timer = Date.now();
        node = node || null;
        that.triggerEvent('onDestructStart', {
            'node' : node,
            'name' : name
        });
        sortList();
        if(name){
            destructItem(node, name);
        }else{
            destructAll(node);
        }
        that.triggerEvent('onDestruct', {
            'node' : node,
            'name' : name
        });
        cm.errorLog({
            'type' : 'common',
            'name' : 'Com.Collector',
            'message' : ['Destruct time', (Date.now() - timer), 'ms.'].join(' ')
        });
        return that;
    };

    init();
});
Com.Elements['Columns'] = {};

Com['GetColumns'] = function(id){
    return Com.Elements.Columns[id] || null;
};

cm.define('Com.Columns', {
    'modules' : [
        'Params',
        'Events',
        'DataConfig',
        'Stack'
    ],
    'required' : [
        'Com.Draggable'
    ],
    'events' : [
        'onRenderStart',
        'onRender',
        'onAdd',
        'onRemove',
        'onChange',
        'onResize',
        'onEnableEditing',
        'onEnableEditable',
        'onDisableEditing',
        'onDisableEditable',
    ],
    'params' : {
        'columns' : false,                  // Deprecated, use 'node' parameter instead.
        'node' : cm.node('div'),
        'container' : false,
        'name' : '',
        'renderStructure' : false,
        'minColumnWidth' : 48,              // in px
        'data' : [],
        'isEditing' : true,
        'customEvents' : true
    }
},
function(params){
    var that = this,
        nodes = {},
        current;

    that.isEditing = null;
    that.pointerType = null;
    that.items = [];
    that.chassis = [];

    /* *** INIT *** */

    var init = function(){
        that.setParams(params);
        preValidateParams();
        that.convertEvents(that.params['events']);
        that.getDataConfig(that.params['node']);
        that.triggerEvent('onRenderStart');
        render();
        renderChassis();
        that.params['isEditing'] && that.enableEditing();
        that.addToStack(nodes['container']);
        that.triggerEvent('onRender');
    };

    var preValidateParams = function(){
        if(cm.isNode(that.params['columns'])){
            that.params['node'] = that.params['columns'];
        }
    };

    /* *** STRUCTURE *** */

    var render = function(){
        if(that.params['renderStructure']){
            renderStructure();
        }else if(that.params['node']){
            collect();
        }
        // Add custom event
        if(that.params['customEvents']){
            cm.customEvent.add(nodes['container'], 'redraw', function(){
                that.redraw();
            });
            cm.customEvent.add(nodes['container'], 'enableEditable', function(){
                that.enableEditing();
            });
            cm.customEvent.add(nodes['container'], 'disableEditable', function(){
                that.disableEditing();
            });
        }
    };

    var collect = function(){
        var columns;
        // Collect nodes
        nodes['container'] = that.params['node'];
        nodes['inner'] = cm.getByAttr('data-com__columns', 'inner', nodes['container'])[0];
        nodes['holder'] = cm.getByAttr('data-com__columns', 'holder', nodes['container'])[0];
        // Set editable class
        //cm.addClass(nodes['container'], 'is-editable');
        // Collect only first child columns
        columns = cm.clone(cm.getByAttr('data-com__columns', 'column', nodes['holder']) || []);
        columns = columns.filter(function(item){
            var past = true;
            cm.forEach(columns, function(testItem){
                if(cm.isParent(testItem, item)){
                    past = false;
                }
            });
            return past;
        });
        cm.forEach(columns, collectColumn);
    };

    var renderStructure = function(){
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__columns'},
            nodes['inner'] = cm.node('div', {'class' : 'inner'},
                nodes['holder'] = cm.node('div', {'class' : 'container'})
            )
        );
        // Render Columns
        cm.forEach(that.params['data'], renderColumn);
        // Embed
        if(that.params['container']){
            that.params['container'].appendChild(nodes['container']);
        }
    };

    /* *** COLUMNS *** */

    var collectColumn = function(container){
        var item = {
            'container' : container,
            'inner' : cm.getByAttr('data-com__columns', 'column-inner', container)[0] || cm.node('div'),
            'width' : container.style.width
        };
        // Render ruler
        renderRuler(item);
        // Push to items array
        that.items.push(item);
    };

    var renderColumn = function(item, execute){
        item = cm.merge({
            'width' : '0%'
        }, item);
        // Structure
        item['container'] = cm.node('div', {'class' : 'com__column'},
            item['inner'] = cm.node('div', {'class' : 'inner'})
        );
        // Render ruler
        renderRuler(item);
        // Push to items array
        that.items.push(item);
        // Embed
        nodes['holder'].appendChild(item['container']);
        if(execute){
            // API onAdd event
            that.triggerEvent('onAdd', item);
        }
        return item;
    };

    var removeColumn = function(item, execute){
        var index = that.items.indexOf(item);
        cm.remove(item['container']);
        that.items.splice(index, 1);
        if(execute){
            // API onRemove event
            that.triggerEvent('onRemove', item);
        }
        return item;
    };

    var removeLastColumn = function(execute){
        var item = that.items.pop();
        cm.remove(item['container']);
        if(execute){
            // API onRemove event
            that.triggerEvent('onRemove', item);
        }
        return item;
    };

    var setEqualDimensions = function(){
        var itemsLength = that.items.length,
            width = (100 / itemsLength).toFixed(2);

        cm.forEach(that.items, function(item){
            item['width'] = [width, '%'].join('');
            item['container'].style.width = item['width'];
            item['rulerCounter'].innerHTML = item['width'];
        });
        // API onResize event
        that.triggerEvent('onResize', that.items);
        that.triggerEvent('onChange', that.items);
    };

    /* *** RULERS METHODS *** */

    var renderRuler = function(item){
        // Structure
        item['rulerContainer'] = cm.node('div', {'class' : 'com__columns__ruler'},
            item['ruler'] = cm.node('div', {'class' : 'pt__ruler is-horizontal is-small'},
                cm.node('div', {'class' : 'line line-top'}),
                item['rulerCounter'] = cm.node('div', {'class' : 'counter'}, item['width']),
                cm.node('div', {'class' : 'line line-bottom'})
            )
        );
        // Embed
        cm.insertFirst(item['rulerContainer'], item['inner']);
    };

    /* *** CHASSIS METHODS *** */

    var renderChassis = function(){
        that.chassis = [];
        var count = that.items.length - 1;
        cm.forEach(count, renderChassisItem);
    };

    var removeChassis = function(){
        cm.forEach(that.chassis, function(chassis){
            cm.remove(chassis['container']);
        });
        that.chassis = [];
    };

    var updateChassis = function(){
        removeChassis();
        renderChassis();
    };

    var redrawChassis = function(){
        cm.forEach(that.chassis, function(item){
            redrawChassisItem(item);
        });
    };

    var renderChassisItem = function(i){
        var chassis = {
            'index' : i
        };
        // Structure
        chassis['container'] = cm.node('div', {'class' : 'com__columns__chassis'},
            chassis['drag'] = cm.node('div', {'class' : 'pt__drag is-horizontal'},
                cm.node('div', {'class' : 'line'}),
                cm.node('div', {'class' : 'drag'},
                    cm.node('div', {'class' : 'icon draggable'})
                )
            )
        );
        // Styles
        redrawChassisItem(chassis);
        // Push to chassis array
        that.chassis.push(chassis);
        // Add events
        cm.addEvent(chassis['container'], 'touchstart', function(e){
            start(e, chassis);
        });
        cm.addEvent(chassis['container'], 'mousedown', function(e){
            start(e, chassis);
        });
        // Embed
        nodes['inner'].appendChild(chassis['container']);
    };

    var redrawChassisItem = function(chassis){
        var ratio = nodes['holder'].offsetWidth / 100,
            i = chassis['index'],
            left = ((cm.getRealX(that.items[i]['container']) - cm.getRealX(nodes['holder']) + that.items[i]['container'].offsetWidth) / ratio).toFixed(2);
        // Structure
        chassis['container'].style.left = [left, '%'].join('');
    };

    /* *** DRAG FUNCTIONS *** */

    var start = function(e, chassis){
        cm.preventDefault(e);
        if(e.button){
            return;
        }
        if(current){
            return;
        }
        that.pointerType = e.type;
        // Current
        if(e.ctrlKey || e.metaKey){
            blockContextMenu();
            setEqualDimensions();
            redrawChassis();
        }else{
            // Hide IFRAMES and EMBED tags
            cm.hideSpecialTags();
            // Get columns
            var index = that.chassis.indexOf(chassis),
                leftColumn = that.items[index],
                rightColumn = that.items[index + 1];

            current = {
                'index' : index,
                'offset' : cm.getRealX(nodes['holder']),
                'ratio' : nodes['holder'].offsetWidth / 100,
                'chassis' : chassis,
                'left' : {
                    'column' : leftColumn,
                    'offset' : cm.getRealX(leftColumn['container'])
                },
                'right' : {
                    'column' : rightColumn,
                    'offset' : cm.getRealX(rightColumn['container']) + rightColumn['container'].offsetWidth
                }
            };
            // Add move event on document
            cm.addClass(nodes['container'], 'is-active');
            cm.addClass(current['chassis']['drag'], 'is-active');
            cm.addClass(current['left']['column']['ruler'], 'is-active');
            cm.addClass(current['right']['column']['ruler'], 'is-active');
            cm.addClass(document.body, 'pt__drag__body--horizontal');
            // Add events
            switch(that.pointerType){
                case 'mousedown' :
                    cm.addEvent(window, 'mousemove', move);
                    cm.addEvent(window, 'mouseup', stop);
                    break;
                case 'touchstart' :
                    cm.addEvent(window, 'touchmove', move);
                    cm.addEvent(window, 'touchend', stop);
                    break;
            }
        }
    };

    var move = function(e){
        cm.preventDefault(e);
        // Calculate sizes and positions
        var position = cm.getEventClientPosition(e),
            toFixed = e.shiftKey ? 0 : 2,
            leftWidth = position['left'] - current['left']['offset'],
            rightWidth = current['right']['offset'] - position['left'];
        // Apply sizes and positions
        if(leftWidth > that.params['minColumnWidth'] && rightWidth > that.params['minColumnWidth']){
            current['left']['column']['width'] = [(leftWidth / current['ratio']).toFixed(toFixed), '%'].join('');
            current['right']['column']['width'] = [(rightWidth / current['ratio']).toFixed(toFixed), '%'].join('');

            current['left']['column']['container'].style.width = current['left']['column']['width'];
            current['right']['column']['container'].style.width = current['right']['column']['width'];
            current['chassis']['container'].style.left = [((position['left'] - current['offset']) / current['ratio']).toFixed(toFixed), '%'].join('');

            current['left']['column']['rulerCounter'].innerHTML = current['left']['column']['width'];
            current['right']['column']['rulerCounter'].innerHTML = current['right']['column']['width'];
        }
        // API onResize event
        that.triggerEvent('onChange', that.items);
    };

    var stop = function(){
        // Remove move event from document
        cm.removeClass(nodes['container'], 'is-active');
        cm.removeClass(current['chassis']['drag'], 'is-active');
        cm.removeClass(current['left']['column']['ruler'], 'is-active');
        cm.removeClass(current['right']['column']['ruler'], 'is-active');
        cm.removeClass(document.body, 'pt__drag__body--horizontal');
        // Remove events
        switch(that.pointerType){
            case 'mousedown' :
                cm.removeEvent(window, 'mousemove', move);
                cm.removeEvent(window, 'mouseup', stop);
                break;
            case 'touchstart' :
                cm.removeEvent(window, 'touchmove', move);
                cm.removeEvent(window, 'touchend', stop);
                break;
        }
        current = null;
        // Show IFRAMES and EMBED tags
        cm.showSpecialTags();
        // API onResize event
        that.triggerEvent('onResize', that.items);
    };

    /* *** HELPERS *** */

    var blockContextMenu = function(){
        cm.addEvent(window, 'contextmenu', contextMenuHandler);
        cm.addEvent(window, 'mouseup', restoreContextMenu);
    };

    var restoreContextMenu = function(){
        cm.removeEvent(window, 'contextmenu', contextMenuHandler);
        cm.removeEvent(window, 'mouseup', restoreContextMenu);
    };

    var contextMenuHandler = function(e){
        cm.preventDefault(e);
    };

    /* ******* PUBLIC ******* */

    that.enableEditing = function(){
        if(!cm.isBoolean(that.isEditing) || !that.isEditing){
            that.isEditing = true;
            cm.addClass(nodes['container'], 'is-editing is-editable');
            that.redraw();
            that.triggerEvent('onEnableEditing');
            that.triggerEvent('onEnableEditable');
        }
        return that;
    };

    that.disableEditing = function(){
        if(!cm.isBoolean(that.isEditing) || that.isEditing){
            that.isEditing = false;
            cm.removeClass(nodes['container'], 'is-editing is-editable');
            that.triggerEvent('onDisableEditing');
            that.triggerEvent('onDisableEditable');
        }
        return that;
    };

    that.redraw = function(){
        redrawChassis();
        return that;
    };

    that.setColumnsCount = function(count){
        var itemsLength = that.items.length;
        if(!count || itemsLength === count){
            return that;
        }
        if(itemsLength < count){
            // Add new columns
            cm.forEach(count - itemsLength, function(){
                renderColumn({}, true);
            });
        }else{
            // Remove columns from last
            while(that.items.length > count){
                removeLastColumn(true);
            }
        }
        setEqualDimensions();
        updateChassis();
        return that;
    };

    that.get = function(){
        return that.items;
    };

    init();
});

cm.define('Com.ColumnsHelper', {
    'modules' : [
        'Params',
        'Events',
        'Langs',
        'DataConfig',
        'DataNodes',
        'Callbacks',
        'Stack'
    ],
    'events' : [
        'onRender',
        'onChange',
        'onResize',
        'onDragStart',
        'onDragMove',
        'onDragStop',
        'onEnableEditing',
        'onEnableEditable',
        'onDisableEditing',
        'onDisableEditable',
    ],
    'params' : {
        'node' : cm.node('div'),
        'name' : '',
        'items' : [],
        'showDrag' : true,
        'minColumnWidth' : 48,              // in px
        'isEditing' : true,
        'customEvents' : true,
        'ajax' : {
            'type' : 'json',
            'method' : 'post',
            'url' : '',                                             // Request URL. Variables: %items%, %callback% for JSONP.
            'params' : ''                                           // Params object. %items%, %callback% for JSONP.
        }
    }
},
function(params){
    var that = this;

    that.items = [];
    that.chassis = [];
    that.current = null;
    that.pointerType = null;
    that.isEditing = null;
    that.isRendered = false;
    that.isAjax = false;
    that.isProcess = false;
    that.ajaxHandler = null;

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataNodes(that.params['node']);
        that.getDataConfig(that.params['node']);
        that.callbacksProcess();
        validateParams();
        render();
        that.addToStack(that.params['node']);
        that.triggerEvent('onRender');
    };

    var validateParams = function(){
        if(!cm.isEmpty(that.params['ajax']['url'])){
            that.isAjax = true;
        }
    };

    var render = function(){
        renderChassis();
        // Add window event
        cm.addEvent(window, 'resize', function(){
            that.redraw();
        });
        // Add custom event
        if(that.params['customEvents']){
            cm.customEvent.add(that.params['node'], 'redraw', function(){
                that.redraw();
            });
            cm.customEvent.add(that.params['node'], 'enableEditable', function(){
                that.enableEditing();
            });
            cm.customEvent.add(that.params['node'], 'disableEditable', function(){
                that.disableEditing();
            });
        }
        // Editing
        that.params['isEditing'] && that.enableEditing();
    };

    var renderChassis = function(){
        if(that.isEditing && !that.isRendered){
            that.items = [];
            that.chassis = [];
            cm.forEach(that.params['items'], function(item, i){
                that.items.push({
                    'container' : item
                });
                if(i < that.params['items'].length - 1){
                    renderChassisItem(i);
                }
            });
            that.isRendered = true;
        }
    };

    var renderChassisItem = function(i){
        var chassis = {
            'index' : i
        };
        // Structure
        chassis['container'] = cm.node('div', {'class' : 'com__columns__chassis'},
            chassis['inner'] = cm.node('div', {'class' : 'pt__drag is-horizontal'},
                cm.node('div', {'class' : 'line'})
            )
        );
        if(that.params['showDrag']){
            chassis['inner'].appendChild(
                cm.node('div', {'class' : 'drag'},
                    cm.node('div', {'class' : 'icon draggable'})
                )
            );
        }else{
            chassis['inner'].appendChild(
                cm.node('div', {'class' : 'helper'})
            );
        }
        // Styles
        redrawChassisItem(chassis);
        // Push to chassis array
        that.chassis.push(chassis);
        // Add events
        cm.addEvent(chassis['container'], 'touchstart', function(e){
            start(e, chassis);
        });
        cm.addEvent(chassis['container'], 'mousedown', function(e){
            start(e, chassis);
        });
        // Embed
        that.params['node'].appendChild(chassis['container']);
    };

    var redrawChassisItem = function(chassis){
        var ratio = that.params['node'].offsetWidth / 100,
            i = chassis['index'],
            left = ((cm.getRealX(that.items[i]['container']) - cm.getRealX(that.params['node']) + that.items[i]['container'].offsetWidth) / ratio).toFixed(2);
        chassis['container'].style.left = [left, '%'].join('');
    };

    var redrawChassis = function(){
        cm.forEach(that.chassis, function(item){
            redrawChassisItem(item);
        });
    };

    var removeChassis = function(){
        cm.forEach(that.chassis, function(item){
            cm.remove(item['container']);
        });
        that.items = [];
        that.chassis = [];
        that.isRendered = false;
    };

    /* *** DRAG FUNCTIONS *** */

    var start = function(e, chassis){
        cm.preventDefault(e);
        if(e.button){
            return;
        }
        if(that.current){
            return;
        }
        that.pointerType = e.type;
        // Abort ajax handler
        if(that.isProcess){
            that.abort();
        }
        // Hide IFRAMES and EMBED tags
        cm.hideSpecialTags();
        // Current
        var index = that.chassis.indexOf(chassis),
            leftColumn = that.items[index],
            rightColumn = that.items[index + 1];

        that.current = {
            'index' : index,
            'offset' : cm.getRealX(that.params['node']),
            'ratio' : that.params['node'].offsetWidth / 100,
            'chassis' : chassis,
            'left' : {
                'column' : leftColumn,
                'offset' : cm.getRealX(leftColumn['container'])
            },
            'right' : {
                'column' : rightColumn,
                'offset' : cm.getRealX(rightColumn['container']) + rightColumn['container'].offsetWidth
            }
        };
        // Add move event on document
        cm.addClass(that.params['node'], 'is-chassis-active');
        cm.addClass(that.current['chassis']['inner'], 'is-active');
        cm.addClass(document.body, 'pt__drag__body--horizontal');
        // Add events
        switch(that.pointerType){
            case 'mousedown' :
                cm.addEvent(window, 'mousemove', move);
                cm.addEvent(window, 'mouseup', stop);
                break;
            case 'touchstart' :
                cm.addEvent(window, 'touchmove', move);
                cm.addEvent(window, 'touchend', stop);
                break;
        }
        that.triggerEvent('onDragStart', that.current);
        return true;
    };

    var move = function(e){
        cm.preventDefault(e);
        // Calculate sizes and positions
        var position = cm.getEventClientPosition(e),
            leftWidth = position['left'] - that.current['left']['offset'],
            rightWidth = that.current['right']['offset'] - position['left'];
        // Apply sizes and positions
        if(leftWidth > that.params['minColumnWidth'] && rightWidth > that.params['minColumnWidth']){
            that.current['left']['column']['width'] = [(leftWidth / that.current['ratio']).toFixed(2), '%'].join('');
            that.current['right']['column']['width'] = [(rightWidth / that.current['ratio']).toFixed(2), '%'].join('');

            that.current['left']['column']['container'].style.width = that.current['left']['column']['width'];
            that.current['right']['column']['container'].style.width = that.current['right']['column']['width'];
            that.current['chassis']['container'].style.left = [((position['left'] - that.current['offset']) / that.current['ratio']).toFixed(2), '%'].join('');
        }
        // API onResize event
        that.triggerEvent('onChange', that.items);
        that.triggerEvent('onDragMove', that.current);
    };

    var stop = function(){
        var config;
        // Remove move event from document
        cm.removeClass(that.params['node'], 'is-chassis-active');
        cm.removeClass(that.current['chassis']['inner'], 'is-active');
        cm.removeClass(document.body, 'pt__drag__body--horizontal');
        // Remove events
        switch(that.pointerType){
            case 'mousedown' :
                cm.removeEvent(window, 'mousemove', move);
                cm.removeEvent(window, 'mouseup', stop);
                break;
            case 'touchstart' :
                cm.removeEvent(window, 'touchmove', move);
                cm.removeEvent(window, 'touchend', stop);
                break;
        }
        // Show IFRAMES and EMBED tags
        cm.showSpecialTags();
        // API onResize event
        that.triggerEvent('onResize', that.items);
        that.triggerEvent('onDragStop', that.current);
        that.current = null;
        // Ajax
        if(that.isAjax){
            config = cm.clone(that.params['ajax']);
            that.ajaxHandler = that.callbacks.request(that, config);
        }
    };

    /* ******* CALLBACKS ******* */

    that.callbacks.prepare = function(that, config){
        var items = [];
        cm.forEach(that.items, function(item){
            items.push(item['width']);
        });
        // Prepare
        config['url'] = cm.strReplace(config['url'], {
            '%items%' : items
        });
        config['params'] = cm.objectReplace(config['params'], {
            '%items%' : items
        });
        return config;
    };

    that.callbacks.request = function(that, config){
        config = that.callbacks.prepare(that, config);
        // Return ajax handler (XMLHttpRequest) to providing abort method.
        return cm.ajax(
            cm.merge(config, {
                'onStart' : function(){
                    that.callbacks.start(that);
                },
                'onEnd' : function(){
                    that.callbacks.end(that);
                }
            })
        );
    };

    that.callbacks.start = function(that){
        that.isProcess = true;
    };

    that.callbacks.end = function(that){
        that.isProcess = false;
    };

    /* ******* PUBLIC ******* */

    that.enableEditing = function(){
        if(typeof that.isEditing !== 'boolean' || !that.isEditing){
            that.isEditing = true;
            renderChassis();
            that.triggerEvent('onEnableEditing');
            that.triggerEvent('onEnableEditable');
        }
        return that;
    };

    that.disableEditing = function(){
        if(typeof that.isEditing !== 'boolean' || that.isEditing){
            that.isEditing = false;
            removeChassis();
            that.triggerEvent('onDisableEditing');
            that.triggerEvent('onDisableEditable');
        }
        return that;
    };

    that.abort = function(){
        if(that.ajaxHandler && that.ajaxHandler.abort){
            that.ajaxHandler.abort();
        }
        return that;
    };

    that.redraw = function(){
        if(that.isEditing){
            redrawChassis();
        }
        return that;
    };

    init();
});
cm.define('Com.Dialog', {
    'modules' : [
        'Params',
        'Events',
        'Langs',
        'DataConfig',
        'Stack'
    ],
    'events' : [
        'onRenderStart',
        'onRender',
        'onOpenStart',
        'onOpen',
        'onOpenEnd',
        'onCloseStart',
        'onClose',
        'onCloseEnd',
        'onScroll'
    ],
    'params' : {
        'container' : 'document.body',
        'name' : '',
        'size' : 'auto',                // auto | fullscreen
        'width' : 700,                  // number, %, px
        'height' : 'auto',              // number, %, px, auto
        'minHeight' : 0,                // number, %, auto, not applicable when using height
        'maxHeight' : 'auto',           // number, %, auto, not applicable when using height
        'position' : 'fixed',
        'indentY' : 24,
        'indentX' : 24,
        'animate' : false,
        'animateHeight' : false,
        'theme' : 'theme-light',        // theme css class name, default: theme-default | theme-black | theme-light
        'className' : '',               // custom css class name
        'content' : cm.node('div'),
        'contentValign' : 'top',        // top, center, bottom
        'scroll' : true,                // content scroll
        'showTitle' : true,
        'title' : '',
        'titleOverflow' : false,
        'titleReserve': true,
        'titleAlign': 'left',
        'closeButtonOutside' : false,
        'closeButton' : true,
        'closeOnBackground' : true,
        'closeOnDocument': false,
        'closeOnEsc' : true,
        'buttons' : false,
        'openTime' : null,
        'duration' : 'cm._config.animDuration',
        'autoOpen' : true,
        'appendOnRender' : false,
        'removeOnClose' : true,
        'destructOnRemove' : false,
        'documentScroll' : false,
        'icons' : {
            'closeInside' : 'icon default linked',
            'closeOutside' : 'icon default linked',
            'helpInside' : 'icon help linked',
            'helpOutside' : 'icon help linked'
        },

        'showHelp' : false,
        'help' : '',
        'helpConstructor' : 'Com.Tooltip',
        'helpParams' : {
            'hold' : true,
            'targetEvent' : 'click',
            'hideOnReClick' : true,
            'className' : 'com__dialog__tooltip',
            'animate' : 'drop-bottom-left',
            'width' : 'targetWidth -16',
            'top' : 8,
            'left' : 8,
            'position' : 'absolute',
            'duration' : 'cm._config.animDuration'
        },
    },
    'strings' : {
        'label': 'Dialog',
        'closeTitle' : 'Close',
        'close' : '',
        'helpTitle' : 'Help',
        'help' : ''
    }
},
function(params){
    var that = this,
        contentHeight,
        nodes = {};

    that.components = {};
    that.isOpen = false;
    that.isFocus = false;
    that.isRemoved = false;
    that.isDestructed = false;
    that.isMaximize = false;
    that.openInterval = null;
    that.resizeInterval = null;
    that.blinkingInterval = null;
    that.originalSize = {};
    that.maximizeSize = {
        'width' : '100%',
        'height' : '100%',
        'minHeight' : 0,
        'maxHeight' : 'auto',
        'indentX' : 0,
        'indentY' : 0
    };

    var init = function(){
        getLESSVariables();
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataConfig(that.params['content']);
        validateParams();
        that.triggerEvent('onRenderStart');
        render();
        that.addToStack(nodes['container']);
        // Trigger onRender event
        that.triggerEvent('onRender');
        // Open
        that.params['autoOpen'] && open();
    };

    var getLESSVariables = function(){
        that.params['duration'] = cm.getTransitionDurationFromLESS('ComDialog-Duration', that.params['duration']);
    };

    var validateParams = function(){
        if(that.params['openTime'] !== undefined && that.params['openTime'] !== null){
            that.params['duration'] = that.params['openTime'];
        }
        if(!that.params['showTitle']){
            that.params['titleReserve'] = false;
        }
    };

    var render = function(){
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__dialog', 'role' : 'dialog', 'aria-modal': 'true'},
            nodes['bg'] = cm.node('div', {'class' : 'bg'}),
            nodes['window'] = cm.node('div', {'class' : 'com__dialog__window window'},
                nodes['windowInner'] = cm.node('div', {'class' : 'inner'})
            )
        );
        if(that.params['appendOnRender']){
            that.params['container'].appendChild(nodes['container']);
        }
        // Set params styles
        nodes['container'].style.position = that.params['position'];
        nodes['window'].style.width = that.params['width'] + 'px';
        // Add CSS Classes
        cm.addClass(nodes['container'], that.params['theme']);
        cm.addClass(nodes['window'], that.params['theme']);
        cm.addClass(nodes['container'], that.params['className']);
        if(that.params['animate']){
            cm.addClass(nodes['container'], 'is-animate');
            cm.addClass(nodes['window'], 'is-animate');
        }
        if(that.params['size'] === 'full'){
            cm.addClass(nodes['container'], 'is-full');
            cm.addClass(nodes['window'], 'is-full');
        }
        if(that.params['titleReserve']){
            cm.addClass(nodes['container'], 'is-title-reserve');
            cm.addClass(nodes['window'], 'is-title-reserve');
        }
        // Render close button
        if(that.params['closeButtonOutside']){
            nodes['closeOutside'] = cm.node('div', {
                'class' : that.params['icons']['closeOutside'],
                'title' : that.lang('closeTitle'),
                'role' : 'button',
                'tabindex' : 0,
            }, that.lang('close'));
            cm.appendChild(nodes['closeOutside'], nodes['bg']);
            cm.click.add(nodes['closeOutside'], close);
        }
        if(that.params['closeButton']){
            cm.addClass(nodes['container'], 'has-close-inside');
            cm.addClass(nodes['window'], 'has-close-inside');
            nodes['closeInside'] = cm.node('div', {
                'class' : that.params['icons']['closeInside'],
                'title' : that.lang('closeTitle'),
                'role' : 'button',
                'tabindex' : 0,
            }, that.lang('close'));
            cm.insertFirst(nodes['closeInside'], nodes['window']);
            cm.click.add(nodes['closeInside'], close);
        }
        if(that.params['closeOnBackground']){
            cm.addClass(nodes['container'], 'has-close-background');
            cm.addEvent(nodes['bg'], 'click', close);
        }
        // Render help button
        if(that.params['showHelp']){
            nodes['window'].appendChild(
                nodes['helpInside'] = cm.node('div', {'class' : that.params['icons']['helpInside'], 'title' : that.lang('helpTitle')}, that.lang('help'))
            );
        }
        // Set title
        renderTitle(that.params['title']);
        // Embed content
        renderContent(that.params['content']);
        // Embed buttons
        renderButtons(that.params['buttons']);
        // Set title
        renderHelp(that.params['help']);
        // Events
        cm.addEvent(nodes['container'], 'mouseover', function(e){
            var target = cm.getEventTarget(e);
            if(cm.isParent(nodes['container'], target, true)){
                that.isFocus = true;
            }
        });
        cm.addEvent(nodes['container'], 'mouseout', function(e){
            var target = cm.getRelatedTarget(e);
            if(!cm.isParent(nodes['container'], target, true)){
                that.isFocus = false;
            }
        });
        // Resize
        animFrame(resize);
    };

    var renderTitle = function(title){
        // Remove old nodes
        cm.remove(nodes['title']);
        // Set new title
        if(that.params['showTitle']){
            cm.removeClass(nodes['container'], 'has-no-title');
            cm.removeClass(nodes['window'], 'has-no-title');
            // Render new nodes
            nodes['title'] = cm.node('div', {'class' : 'title', 'role' : 'heading'});
            if(!cm.isEmpty(title)){
                if(cm.isNode(title)){
                    cm.appendChild(title, nodes['title']);
                }else{
                    cm.appendChild(cm.textNode(title), nodes['title']);
                }
                if(that.params['titleOverflow']){
                    cm.addClass(nodes['title'], 'cm__text-overflow');
                }
            }
            if(cm.inArray(['left', 'center', 'right'], that.params['titleAlign'])){
                cm.addClass(nodes['title'], ['is-align', that.params['titleAlign']].join('-'));
            }
            cm.insertFirst(nodes['title'], nodes['windowInner']);
        }else{
            var label = cm.isNode(title) ? title.textContent : title;
            if(cm.isEmpty(title)){
                label = that.msg('label');
            }
            nodes['container'].setAttribute('aria-label', label);
            cm.addClass(nodes['container'], 'has-no-title');
            cm.addClass(nodes['window'], 'has-no-title');
        }
    };

    var renderContent = function(node){
        if(!nodes['descr']){
            nodes['descr'] = cm.node('div', {'class' : 'descr'},
                nodes['scroll'] = cm.node('div', {'class' : 'scroll com__dialog__scroll'},
                    nodes['inner'] = cm.node('div', {'class' : 'inner com__dialog__inner'})
                )
            );
            if(!that.params['scroll']){
                cm.addClass(nodes['scroll'], 'is-no-scroll');
            }
            if(cm.inArray(['top', 'center', 'bottom'], that.params['contentValign'])){
                cm.addClass(nodes['scroll'], ['is-valign', that.params['contentValign']].join('-'));
            }
            if(nodes['title']){
                cm.insertAfter(nodes['descr'], nodes['title']);
            }else if(nodes['buttons']){
                cm.insertBefore(nodes['descr'], nodes['buttons']);
            }else{
                cm.insertLast(nodes['descr'], nodes['windowInner']);
            }
            cm.addEvent(nodes['scroll'], 'scroll', function(event){
                that.triggerEvent('onScroll', event);
            });
        }
        if(cm.isNode(node)){
            cm.clearNode(nodes['inner']).appendChild(node);
        }
    };

    var renderButtons = function(node){
        if(cm.isNode(node)){
            // Remove old nodes
            cm.remove(nodes['buttons']);
            // Render new nodes
            nodes['buttons'] = cm.node('div', {'class' : 'buttons'}, node);
            cm.insertLast(nodes['buttons'], nodes['windowInner']);
        }
    };

    var renderHelp = function(node){
        if(that.params['showHelp']){
            if(!nodes['help']){
                nodes['help'] = cm.node('div', {'class' : 'com__dialog__help'});
                // Render tooltip
                cm.getConstructor(that.params['helpConstructor'], function(classConstructor){
                    that.components['help'] = new classConstructor(
                        cm.merge(that.params['helpParams'], {
                            'target' : nodes['helpInside'],
                            'content' : nodes['help'],
                            'positionTarget' : nodes['descr'],
                            'container' : nodes['container'],
                            'holdTarget' : nodes['container']
                        })
                    );
                });
            }
            cm.clearNode(nodes['help']);
            // Append
            if(cm.isNode(node)){
                cm.appendChild(node, nodes['help']);
            }else{
                nodes['help'].innerHTML = node;
            }
        }
    };

    var stateHelper = function(){
        if(
            /full|fullscreen/.test(that.params['size']) ||
            cm.getPageSize('winWidth') <= cm._config.screenTabletPortrait
        ){
            that.maximize();
        }else{
            that.restore();
        }
    };

    var resizeHelper = function(){
        resize();
        clearResizeInterval();
        that.resizeInterval = setTimeout(resizeHelper, that.params['resizeInterval']);
    };

    var resize = function(){
        var winOffset = cm.getNodeOffset(nodes['container']),
            winHeight = winOffset['inner']['height'] - (that.params['indentY'] * 2),
            winWidth = winOffset['inner']['width'] - (that.params['indentX'] * 2),
            windowHeight = nodes['window'].offsetHeight,
            windowWidth = nodes['window'].offsetWidth,
            insetHeight = nodes['inner'].offsetHeight,

            AWidth,
            AHeight,
            NAHeight,

            maxHeight,
            minHeight,
            setHeight,
            setWidth;
        // Calculate available width / height
        AHeight = winHeight
            - (nodes['title'] && nodes['title'].offsetHeight || 0)
            - (nodes['buttons'] && nodes['buttons'].offsetHeight || 0)
            - cm.getIndentY(nodes['windowInner'])
            - cm.getIndentY(nodes['descr']);
        NAHeight = winHeight - AHeight;
        AWidth = winWidth;
        // Calculate min / max height
        if(that.params['maxHeight'] === 'auto'){
            maxHeight = AHeight;
        }else if(/%/.test(that.params['maxHeight'])){
            maxHeight = ((winHeight / 100) * parseFloat(that.params['maxHeight'])) - NAHeight;
        }else{
            if(/px/.test(that.params['maxHeight'])){
                that.params['maxHeight'] = parseFloat(that.params['maxHeight']);
            }
            maxHeight = that.params['maxHeight'] - NAHeight;
        }
        if(that.params['minHeight'] === 'auto'){
            minHeight = 0;
        }else if(/%/.test(that.params['minHeight'])){
            minHeight = ((winHeight / 100) * parseFloat(that.params['minHeight'])) - NAHeight;
        }else{
            if(/px/.test(that.params['minHeight'])){
                that.params['minHeight'] = parseFloat(that.params['minHeight']);
            }
            minHeight = that.params['minHeight'] - NAHeight;
        }
        // Calculate height
        if(that.params['height'] === 'auto'){
            if(insetHeight < minHeight){
                setHeight = minHeight;
            }else if(insetHeight > maxHeight){
                setHeight = maxHeight;
            }else{
                setHeight = insetHeight;
            }
        }else if(/%/.test(that.params['height'])){
            setHeight = ((winHeight / 100) * parseFloat(that.params['height'])) - NAHeight;
        }else{
            if(/px/.test(that.params['height'])){
                that.params['height'] = parseFloat(that.params['height']);
            }
            setHeight = that.params['height'] - NAHeight;
        }
        setHeight = Math.min(
            Math.max(setHeight, minHeight, 0),
            AHeight
        );
        // Calculate width
        if(/%/.test(that.params['width'])){
            setWidth = ((winWidth / 100) * parseFloat(that.params['width']));
        }else{
            if(/px/.test(that.params['width'])){
                that.params['width'] = parseFloat(that.params['width']);
            }
            setWidth = that.params['width'];
        }
        setWidth = Math.min(setWidth, AWidth);
        // Set window height
        if(windowHeight !== setHeight + NAHeight || contentHeight !== insetHeight){
            contentHeight = insetHeight;
            if(insetHeight <= setHeight){
                cm.removeClass(nodes['scroll'], 'is-scroll');
            }else if(that.params['scroll']){
                cm.addClass(nodes['scroll'], 'is-scroll');
            }
            nodes['scroll'].style.height = [setHeight, 'px'].join('');
        }
        // Set window width
        if(windowWidth !== setWidth){
            nodes['window'].style.width = [setWidth, 'px'].join('');
        }
    };

    var open = function(params){
        params = {
            'onEnd' : function(){}
        };
        if(!that.isOpen){
            that.isOpen = true;
            that.isFocus = true;
            that.isRemoved = false;
            if(!cm.inDOM(nodes['container'])){
                that.params['container'].appendChild(nodes['container']);
            }
            nodes['container'].style.display = 'block';
            stateHelper();
            resizeHelper();
            // Show / Hide Document Scroll
            if(!that.params['documentScroll']){
                cm.bodyScroll.add(nodes['container']);
            }
            // Add close event on Esc press
            cm.addEvent(window, 'click', windowClickEvent);
            cm.addEvent(window, 'keydown', windowKeyEvent);
            cm.addEvent(window, 'resize', windowResizeEvent);
            // Animate
            cm.addClass(nodes['container'], 'is-open', true);
            cm.addClass(nodes['window'], 'is-open', true);
            that.openInterval && clearTimeout(that.openInterval);
            that.openInterval = setTimeout(function(){
                params['onEnd']();
                // Start height animation
                if(that.params['animateHeight']){
                    cm.addClass(nodes['scroll'], 'is-animate');
                }
                // Open Event
                that.triggerEvent('onOpen');
                that.triggerEvent('onOpenEnd');
            }, that.params['duration']);
            // Open Event
            that.triggerEvent('onOpenStart');
        }
    };

    var close = function(params){
        params = {
            'onEnd' : function(){}
        };
        if(that.isOpen){
            that.isOpen = false;
            that.isFocus = false;
            // Remove close event on Esc press
            cm.removeEvent(window, 'click', windowClickEvent);
            cm.removeEvent(window, 'keydown', windowKeyEvent);
            cm.removeEvent(window, 'resize', windowResizeEvent);
            // Stop height animation
            if(that.params['animateHeight']){
                cm.removeClass(nodes['scroll'], 'is-animate');
            }
            // Animate
            cm.removeClass(nodes['container'], 'is-open', true);
            cm.removeClass(nodes['window'], 'is-open', true);
            that.openInterval && clearTimeout(that.openInterval);
            that.openInterval = setTimeout(function(){
                clearResizeInterval();
                // Show / Hide Document Scroll
                if(!that.params['documentScroll']){
                    cm.bodyScroll.remove(nodes['container']);
                }
                // Remove Window
                nodes['container'].style.display = 'none';
                that.params['removeOnClose'] && remove();
                params['onEnd']();
                // Close Event
                that.triggerEvent('onClose');
                that.triggerEvent('onCloseEnd');
            }, that.params['duration']);
            // Close Event
            that.triggerEvent('onCloseStart');
        }
    };

    var remove = function(forceRemove){
        if(!that.isRemoved){
            that.isRemoved = true;
            if(forceRemove || that.params['destructOnRemove']){
                that.destruct();
            }
            // Remove dialog container node
            cm.remove(nodes['container']);
        }
    };

    var windowResizeEvent = function(e){
        preventBlinking();
        stateHelper();
    };

    var windowKeyEvent = function(e){
        // Close dialog when ESC key pressed
        cm.handleKey(e, 'escape', function(){
            if(that.params['closeOnEsc'] && that.isFocus){
                close();
            }
        });
    };

    var windowClickEvent = function(e) {
        if(that.params['closeOnDocument']){
            var target = cm.getEventTarget(e);
            if(!cm.isParent(nodes['container'], target, true)){
                close();
            }
        }
    };

    var clearResizeInterval = function(){
        that.resizeInterval && clearTimeout(that.resizeInterval);
    };

    var preventBlinking = function() {
        cm.addClass(nodes['container'], 'cm__transition-disable');
        that.blinkingInterval && clearTimeout(that.blinkingInterval);
        that.blinkingInterval = setTimeout(function() {
            cm.removeClass(nodes['container'], 'cm__transition-disable');
        }, 30);
    };

    /* ******* MAIN ******* */

    that.set = function(title, content, buttons){
        renderTitle(title);
        renderContent(content);
        renderButtons(buttons);
        return that;
    };

    that.setTitle = function(title){
        renderTitle(title);
        return that;
    };

    that.setContent = function(content){
        renderContent(content);
        return that;
    };

    that.setButtons = function(buttons){
        renderButtons(buttons);
        return that;
    };

    that.open = function(){
        open();
        return that;
    };

    that.close = function(){
        close();
        return that;
    };

    that.setSize = function(data){
        var params = ['width', 'height', 'minHeight', 'maxHeight'];
        cm.forEach(params, function(key) {
            if (!cm.isEmpty(data[key])) {
                that.params[key] = data[key];
            }
        });
        return that;
    };

    that.setWidth = function(width){
        that.params['width'] = width;
        return that;
    };

    that.setHeight = function(height){
        that.params['height'] = height;
        return that;
    };

    that.setMinHeight = function(height){
        that.params['minHeight'] = height;
        return that;
    };

    that.setMaxHeight = function(height){
        that.params['maxHeight'] = height;
        return that;
    };

    that.maximize = function(){
        if(!that.isMaximize){
            that.isMaximize = true;
            cm.forEach(that.maximizeSize, function(value, key){
                that.originalSize[key] = that.params[key];
                that.params[key] = value;
            });
            cm.addClass(nodes['container'], 'is-fullscreen');
            cm.addClass(nodes['window'], 'is-fullscreen');
        }
        return that;
    };

    that.restore = function(){
        if(that.isMaximize){
            that.isMaximize = false;
            cm.forEach(that.originalSize, function(value, key){
                that.params[key] = value;
            });
            cm.removeClass(nodes['container'], 'is-fullscreen');
            cm.removeClass(nodes['window'], 'is-fullscreen');
        }
        return that;
    };

    that.remove = function(forceRemove){
        if(that.isOpen){
            close({
                'onEnd' : function(){
                    if(forceRemove || !that.params['removeOnClose']){
                        remove(forceRemove);
                    }
                }
            });
        }else{
            remove(forceRemove);
        }
        return that;
    };

    that.destruct = function(){
        if(!that.isDestructed){
            that.isDestructed = true;
            cm.customEvent.trigger(nodes['container'], 'destruct', {
                'direction' : 'child',
                'self' : false
            });
            that.removeFromStack();
            that.remove(true);
        }
        return that;
    };

    that.isOwnNode = function(node){
        return cm.isParent(nodes['window'], node, true);
    };

    that.getNodes = function(key){
        return nodes[key] || nodes;
    };

    init();
});

cm.define('Com.DialogContainer', {
    'extend' : 'Com.AbstractContainer',
    'events' : [
        'onScroll',
    ],
    'params' : {
        'container' : 'document.body',
        'destructOnClose' : false,
        'renderTitle' : true,
        'titleAlign' : null,
        'renderHelp' : false,
        'renderButtons' : false,
        'renderButtonsPositions' : false,
        'buttonsAdaptive': true,
        'justifyButtons' : 'right',
        'constructor' : 'Com.Dialog',
        'constructorParams' : {
            'destructOnRemove' : false,
            'autoOpen' : false
        }
    },
    'strings' : {
        'close' : 'Close'
    }
},
function(params){
    var that = this;
    that.buttons = {};
    // Call parent class construct
    Com.AbstractContainer.apply(that, arguments);
});

cm.getConstructor('Com.DialogContainer', function(classConstructor, className, classProto, classInherit){
    classProto.onConstructStart = function(){
        var that = this;
        that.buttons = {};
    };

    classProto.onValidateParams = function(){
        var that = this;
        // Set Content
        if(cm.isObject(that.params['content'])){
            that.params['constructorParams']['title'] = that.params['content']['title'] || that.params['constructorParams']['title'];
            that.params['constructorParams']['content'] = that.params['content']['content'] || that.params['constructorParams']['content'];
            that.params['constructorParams']['buttons'] = that.params['content']['buttons'] || that.params['constructorParams']['buttons'];
            that.params['constructorParams']['help'] = that.params['content']['help'] || that.params['constructorParams']['help'];
        }
        that.params['constructorParams']['showTitle'] = that.params['renderTitle'];
        that.params['constructorParams']['showHelp'] = that.params['renderHelp'];
        that.params['constructorParams']['titleAlign'] = that.params['constructorParams']['titleAlign'] || that.params['titleAlign'];
    };

    classProto.constructController = function(classConstructor){
        var that = this;
        return new classConstructor(
            cm.merge(that.params['constructorParams'], {
                'opener' : that,
                'container' : that.params['container'],
                'title' : that.nodes['title'] || that.params['constructorParams']['title'] || that.params['title'],
                'content' : that.nodes['content'] || that.params['constructorParams']['content'] || that.params['content'],
                'buttons' : that.nodes['buttons'] || that.params['constructorParams']['buttons'] || that.params['buttons'],
                'help' : that.nodes['help'] || that.params['constructorParams']['help'] || that.params['help']
            })
        );
    };

    classProto.renderControllerView = function(){
        var that = this;
        that.params['renderButtons'] && that.renderButtonsView();
        return that;
    };

    classProto.renderControllerEvents = function(){
        var that = this;
        that.components['controller'].addEvent('onOpenStart', that.afterOpenControllerHandler);
        that.components['controller'].addEvent('onOpenEnd', that.afterOpenControllerEndHandler);
        that.components['controller'].addEvent('onCloseStart', that.afterCloseControllerStartHandler);
        that.components['controller'].addEvent('onCloseEnd', that.afterCloseControllerHandler);
        that.components['controller'].addEvent('onScroll', that.afterScroll.bind(that));
    };

    /******* CONTENT *******/

    classProto.setTitle = function(title){
        var that = this;
        that.params['constructorParams']['title'] = title;
        that.components['controller'] && cm.isFunction(that.components['controller'].setTitle) && that.components['controller'].setTitle(title);
        return that;
    };

    classProto.setSize = function(data) {
        var that = this;
        var params = ['width', 'height', 'minHeight', 'maxHeight'];
        cm.forEach(params, function(key) {
            if (!cm.isEmpty(data[key])) {
                that.params['constructorParams'][key] = data[key];
            }
        });
        that.components['controller'] && cm.isFunction(that.components['controller'].setSize) && that.components['controller'].setSize(data);
    };

    /******* BUTTONS *******/

    classProto.renderButtonsView = function(){
        var that = this;
        // Structure
        that.nodes['buttons'] = cm.node('div', {'class' : 'pt__buttons'},
            that.nodes['buttonsHolder'] = cm.node('div', {'class' : 'inner'})
        );
        if(that.params['buttonsAdaptive']){
            if(that.params['buttonsAdaptive'] === 'reverse'){
                cm.addClass(that.nodes['buttons'], 'is-adaptive-reverse');
            }else{
                cm.addClass(that.nodes['buttons'], 'is-adaptive');
            }
        }
        if(that.params['renderButtonsPositions']){
            that.nodes['buttonsHolderLeft'] = cm.node('div', {'class' : 'left'});
            that.nodes['buttonsHolderRight'] = cm.node('div', {'class' : 'right'});
            cm.appendChild(that.nodes['buttonsHolderLeft'], that.nodes['buttonsHolder']);
            cm.appendChild(that.nodes['buttonsHolderRight'], that.nodes['buttonsHolder']);
        }
        that.setButtonsJustify(that.params['justifyButtons']);
        // Render buttons
        cm.forEach(that.buttons, function(item){
            that.renderButton(item);
        });
        return that;
    };

    classProto.addButton = function(item){
        var that = this;

        // Config
        item = cm.merge({
            'name' : '',
            'label' : '',
            'classes': ['button-primary'],
            'justify' : 'auto',
            'visible' : true,
            'focus': false,
            'embed' : false,
            'callback' : function(){}
        }, item);

        // Validate
        item['justify'] = that.params['renderButtonsPositions'] ? item['justify'] : 'auto';
        if(!cm.isArray(item['classes'])){
            item['classes'] = [item['classes']];
        }
        if(!item['visible']){
            item['classes'].push('is-hidden');
        }
        item['classes'].unshift('button');

        // Structure
        if (!item['node']) {
            item['node'] = cm.node('button', {'class' : item['classes']}, item['label']);
        }
        if (cm.isFunction(item['callback'])) {
            cm.click.add(item['node'], item['callback']);
        }

        // Append
        that.buttons[item['name']] = item;
        that.embedButton(item);

        // Set focus
        if(item['focus']){
            item['node'].focus();
        }
        return item;
    };

    classProto.embedButton = function(item){
        var that = this;
        switch(item['justify']){
            case 'right':
                if(that.nodes['buttonsHolderRight']){
                    item['embed'] = true;
                    cm.appendChild(item['node'], that.nodes['buttonsHolderRight']);
                }
                break;

            case 'left':
                if(that.nodes['buttonsHolderLeft']){
                    item['embed'] = true;
                    cm.appendChild(item['node'], that.nodes['buttonsHolderLeft']);
                }
                break;

            case 'auto':
            default:
                if(that.nodes['buttonsHolder']){
                    item['embed'] = true;
                    cm.appendChild(item['node'], that.nodes['buttonsHolder']);
                }
                break;
        }
        return that;
    };

    classProto.renderButton = function(item){
        var that = this;
        // Configure
        if(that.getButton(item['name'])){
            item = that.getButton(item['name']);
        }else{
            item = that.addButton(item);
        }
        // TODO: Check this moment
        // Embed
        if(!item['embed']){
            that.embedButton(item);
        }
        return that;
    };

    classProto.getButton = function(name){
        var that = this;
        return that.buttons[name];
    };

    classProto.removeButton = function(name) {
        var that = this;
        var item = that.getButton(name);
        if (item) {
            cm.remove(item['node']);
            delete that.buttons[item['name']];
        }
        return that;
    };

    classProto.removeButtons = function() {
        var that = this;
        cm.forEach(that.buttons, (item, name) => that.removeButton(name));
        return that;
    };

    classProto.toggleButtonVisibility = function(name, value){
        var that = this;
        var item = that.getButton(name);
        if (item) {
            item['visible'] = value;
            cm.toggleClass(item['node'], 'is-hidden', !value);
        }
        return that;
    };

    classProto.setButtonsJustify = function(value) {
        var that = this;
        cm.removeClass(that.nodes['buttons'], ['pull', that.params['justifyButtons']].join('-'));
        cm.addClass(that.nodes['buttons'], ['pull', value].join('-'));
        that.params['justifyButtons'] = value;
        return that;
    };

    /****** AFTER EVENTS *******/

    classProto.afterScroll = function(controller, event){
        var that = this;
        that.triggerEvent('onScroll', event);
    };
});

cm.define('Com.Draganddrop', {
    'modules' : [
        'Params',
        'Events'
    ],
    'events' : [
        'onRender',
        'onInit',
        'onDragStart',
        'onDrop',
        'onRemove',
        'onReplace'
    ],
    'params' : {
        'container' : cm.node('div'),
        'chassisTag' : 'div',
        'draggableContainer' : 'document.body',      // HTML node | selfParent
        'scroll' : true,
        'scrollNode' : window,
        'scrollSpeed' : 1,                           // ms per 1px
        'renderTemporaryAria' : false,
        'useCSSAnimation' : true,
        'useGracefulDegradation' : true,
        'dropDuration' : 400,
        'moveDuration' : 200,
        'direction' : 'both',                        // both | vertical | horizontal
        'limit' : false,
        'highlightAreas' : true,                     // highlight areas on drag start
        'highlightChassis' : false,
        'animateRemove' : true,
        'removeNode' : true,
        'classes' : {
            'area' : null
        }
    }
},
function(params){
    var that = this,
        nodes = {},
        anims = {},
        areas = [],
        areasList = [],
        draggableList = [],
        filteredAvailableAreas = [],
        checkInt,
        chassisInt,
        pageSize,
        isScrollProccess = false,
        isGracefulDegradation = false,
        isHighlightedAreas = false,

        current,
        currentAboveItem,
        currentPosition,
        currentArea,
        currentChassis,
        previousArea;

    that.pointerType = null;

    /* *** INIT *** */

    var init = function(){
        var areasNodes;

        getLESSVariables();
        that.setParams(params);
        that.convertEvents(that.params['events']);

        if(that.params['container']){
            // Check Graceful Degradation, and enable it on the mobile
            if(that.params['useGracefulDegradation'] && cm.isMobile()){
                isGracefulDegradation = true;
            }
            // Init misc
            anims['scroll'] = new cm.Animation(that.params['scrollNode']);
            // Render temporary area
            if(that.params['renderTemporaryAria']){
                nodes['temporaryArea'] = cm.node('div');
                initArea(nodes['temporaryArea'], {
                    'isTemporary' : true
                });
            }
            // Find drop areas
            areasNodes = cm.getByAttr('data-com-draganddrop', 'area', that.params['container']);
            // Init areas
            cm.forEach(areasNodes, function(area){
                initArea(area, {});
            });
            /* *** EXECUTE API EVENTS *** */
            that.triggerEvent('onInit', {});
            that.triggerEvent('onRender', {});
        }
    };

    var getLESSVariables = function(){
        that.params['dropDuration'] = cm.getTransitionDurationFromLESS('PtDnD-DropDuration', that.params['dropDuration']);
        that.params['moveDuration'] = cm.getTransitionDurationFromLESS('PtDnD-MoveDuration', that.params['moveDuration']);
    };

    var initArea = function(node, params){
        // Check, if area already exists
        if(cm.inArray(areasList, node)){
            return;
        }
        // Config
        var area = cm.merge({
            'node' : node,
            'styleObject' : cm.getStyleObject(node),
            'type' : false,                             // content, form
            'isLocked' : false,
            'isTemporary' : false,
            'isSystem' : false,
            'isRemoveZone' : false,
            'draggableInChildNodes' : true,
            'cloneDraggable' : false,
            'items' : [],
            'chassis' : [],
            'dimensions' : {}
        }, params);
        // Get type
        area['type'] = area['node'].getAttribute('data-block-type');
        // Add mark classes
        cm.addClass(area['node'], 'pt__dnd-area');
        cm.addClass(area['node'], that.params['classes']['area']);
        if(area['isLocked']){
            cm.addClass(area['node'], 'is-locked');
        }else{
            cm.addClass(area['node'], 'is-available');
        }
        // Find draggable elements
        initAreaWidgets(area);
        // Push to areas array
        areasList.push(area['node']);
        areas.push(area);
    };

    var initAreaWidgets = function(area){
        var childNodes;
        area['items'] = [];
        // Find draggable elements
        if(area['draggableInChildNodes']){
            childNodes = area['node'].childNodes;
            cm.forEach(childNodes, function(node){
                if(node.tagName && node.getAttribute('data-com-draganddrop') == 'draggable'){
                    area['items'].push(
                        initDraggable(node, area, {})
                    );
                }
            });
        }else{
            childNodes = cm.getByAttr('data-com-draganddrop', 'draggable', area['node']);
            cm.forEach(childNodes, function(node){
                area['items'].push(
                    initDraggable(node, area, {})
                );
            });
        }
    };

    var initDraggable = function(node, area, params){
        // Config
        var draggable = cm.merge({
            'node' : node,
            'styleObject' : cm.getStyleObject(node),
            'type' : false,                             // content, form
            'chassis' : {
                'top' : null,
                'bottom' : null
            },
            'dimensions' : {
                'offsetX' : 0,
                'offsetY' : 0
            }
        }, params);
        draggable['area'] = area;
        draggable['anim'] = new cm.Animation(draggable['node']);
        // Get type
        draggable['type'] = draggable['node'].getAttribute('data-block-type');
        // Set draggable event on element
        initDraggableDrag(draggable);
        // Return item to push in area array
        draggableList.push(draggable);
        return draggable;
    };

    var initDraggableDrag = function(draggable){
        var dragNode;
        draggable['drag'] = cm.getByAttr('data-com-draganddrop', 'drag', draggable['node'])[0];
        draggable['drag-bottom'] = cm.getByAttr('data-com-draganddrop', 'drag-bottom', draggable['node'])[0];
        // Set draggable event on element
        dragNode = draggable['drag'] || draggable['node'];
        // Add events
        cm.addEvent(dragNode, 'touchstart', function(e){
            start(e, draggable);
        });
        cm.addEvent(dragNode, 'mousedown', function(e){
            start(e, draggable);
        });
        if(draggable['drag-bottom']){
            cm.addEvent(draggable['drag-bottom'], 'mousedown', function(e){
                start(e, draggable);
            });
        }
    };

    /* *** DRAG AND DROP PROCESS ** */

    var start = function(e, draggable){
        cm.preventDefault(e);
        // If not left mouse button, don't duplicate drag event
        if(e.button){
            return;
        }
        // If current exists, we don't need to start another drag event until previous will not stop
        if(current){
            return;
        }
        that.pointerType = e.type;
        // Hide IFRAMES and EMBED tags
        cm.hideSpecialTags();
        // Check event type and get cursor / finger position
        var position = cm.getEventClientPosition(e),
            x = position['left'],
            y = position['top'],
            tempCurrentAboveItem,
            tempCurrentPosition;
        pageSize = cm.getPageSize();
        // API onDragStart Event
        that.triggerEvent('onDragStart', {
            'item' : draggable,
            'node' : draggable['node'],
            'from' : draggable['area']
        });
        // Filter areas
        filteredAvailableAreas = areas.filter(function(area){
            // Filter out locked areas and inner areas
            if(
                (draggable['type'] != area['type'] && !area['isRemoveZone'])
                || cm.isParent(draggable['node'], area['node'])
                || area['isLocked']
            ){
                return false;
            }
            // True - pass area
            return true;
        });
        // Highlight Areas
        if(that.params['highlightAreas']){
            toggleHighlightAreas();
        }
        // Get position and dimension of current draggable item
        getPosition(draggable);
        // Get offset position relative to touch point (cursor or finger position)
        draggable['dimensions']['offsetX'] = x - draggable['dimensions']['absoluteX1'];
        draggable['dimensions']['offsetY'] = y - draggable['dimensions']['absoluteY1'];
        // Set draggable item to current
        if(draggable['area']['cloneDraggable']){
            current = cloneDraggable(draggable);
        }else{
            current = draggable;
        }
        // Set position and dimension to current draggable node, before we insert it to draggableContainer
        current['node'].style.top = 0;
        current['node'].style.left = 0;
        current['node'].style.width = [current['dimensions']['width'], 'px'].join('');
        cm.setCSSTranslate(current['node'], [current['dimensions']['absoluteX1'], 'px'].join(''), [current['dimensions']['absoluteY1'], 'px'].join(''));
        // Unset area from draggable item
        unsetDraggableFromArea(current);
        // Insert draggable element to body
        if(that.params['draggableContainer'] && that.params['draggableContainer'] !== 'selfParent'){
            that.params['draggableContainer'].appendChild(current['node']);
        }
        cm.addClass(current['node'], 'pt__dnd-helper');
        cm.addClass(current['node'], 'is-active', true);
        // Calculate elements position and dimension
        getPositionsAll();
        // Render Chassis Blocks
        renderChassisBlocks();
        // Find above draggable item
        cm.forEach(current['area']['items'], function(draggable){
            if(x >= draggable['dimensions']['absoluteX1'] && x < draggable['dimensions']['absoluteX2'] && y >= draggable['dimensions']['absoluteY1'] && y <= draggable['dimensions']['absoluteY2']){
                tempCurrentAboveItem = draggable;
                // Check above block position
                if((y - tempCurrentAboveItem['dimensions']['absoluteY1']) < (tempCurrentAboveItem['dimensions']['absoluteHeight'] / 2)){
                    tempCurrentPosition = 'top';
                }else{
                    tempCurrentPosition = 'bottom';
                }
            }
        });
        // If current current draggable not above other draggable items
        if(!tempCurrentAboveItem && current['area']['items'].length){
            if(y < current['area']['dimensions']['y1']){
                tempCurrentAboveItem = current['area']['items'][0];
                tempCurrentPosition = 'top';
            }else{
                tempCurrentAboveItem = current['area']['items'][current['area']['items'].length - 1];
                tempCurrentPosition = 'bottom';
            }
        }
        // Set chassis
        if(tempCurrentAboveItem){
            currentChassis = tempCurrentAboveItem['chassis'][tempCurrentPosition];
        }else{
            currentChassis = current['area']['chassis'][0];
        }
        if(currentChassis){
            cm.addClass(currentChassis['node'], 'is-active');
            if(that.params['highlightChassis']){
                cm.addClass(currentChassis['node'], 'is-highlight');
            }
            currentChassis['node'].style.height = [current['dimensions']['absoluteHeight'], 'px'].join('');
        }
        // Set current area and above
        currentArea = current['area'];
        currentAboveItem = tempCurrentAboveItem;
        currentPosition = tempCurrentPosition;
        if(that.params['limit']){
            getPosition(currentArea);
            currentArea['node'].style.minHeight = currentArea['dimensions']['height']  + 'px';
        }
        cm.addClass(currentArea['node'], 'is-active');
        // Set check position event
        //checkInt = setInterval(checkPosition, 5);
        // Add move event on document
        cm.addClass(document.body, 'pt__dnd-body');
        // Add events
        switch(that.pointerType){
            case 'mousedown' :
                cm.addEvent(window, 'mousemove', move);
                cm.addEvent(window, 'mouseup', stop);
                break;
            case 'touchstart' :
                cm.addEvent(window, 'touchmove', move);
                cm.addEvent(window, 'touchend', stop);
                break;
        }
    };

    var move = function(e){
        cm.preventDefault(e);
        // Check event type and get cursor / finger position
        var position = cm.getEventClientPosition(e),
            x = position['left'],
            y = position['top'],
            posY = y - current['dimensions']['offsetY'],
            posX = x - current['dimensions']['offsetX'],
            styleX,
            styleY,
            tempCurrentArea,
            tempCurrentAboveItem,
            tempCurrentPosition;
        // Calculate drag direction and set new position
        switch(that.params['direction']){
            case 'both':
                styleX = [posX, 'px'].join('');
                styleY = [posY, 'px'].join('');
                break;
            case 'vertical':
                styleX = [current['dimensions']['absoluteX1'], 'px'].join('');
                if(that.params['limit']){
                    if(posY < current['area']['dimensions']['y1']){
                        styleY = [current['area']['dimensions']['y1'], 'px'].join('');
                    }else if(posY + current['dimensions']['absoluteHeight'] > current['area']['dimensions']['y2']){
                        styleY = [current['area']['dimensions']['y2'] - current['dimensions']['absoluteHeight'], 'px'].join('');
                    }else{
                        styleY = [posY, 'px'].join('');
                    }
                }else{
                    styleY = [posY, 'px'].join('');
                }
                break;
            case 'horizontal':
                styleX = [posX, 'px'].join('');
                styleY = [current['dimensions']['absoluteY1'], 'px'].join('');
                break;
        }
        cm.setCSSTranslate(current['node'], styleX, styleY);
        // Scroll node
        if(that.params['scroll']){
        //if(false){
            if(y + 48 > pageSize['winHeight']){
                toggleScroll(1);
            }else if(y - 48 < 0){
                toggleScroll(-1);
            }else{
                toggleScroll(0);
            }
        }
        // Check and recalculate position
        checkPosition();
        // Find above area
        cm.forEach(filteredAvailableAreas, function(area){
            if(x >= area['dimensions']['x1'] && x < area['dimensions']['x2'] && y >= area['dimensions']['y1'] && y <= area['dimensions']['y2']){
                if(!tempCurrentArea){
                    tempCurrentArea = area;
                }else if(area['dimensions']['width'] < tempCurrentArea['dimensions']['width'] || area['dimensions']['height'] < tempCurrentArea['dimensions']['height']){
                    tempCurrentArea = area;
                }
            }
        });
        // Find above draggable item
        if(tempCurrentArea){
            cm.forEach(tempCurrentArea['items'], function(draggable){
                if(x >= draggable['dimensions']['absoluteX1'] && x < draggable['dimensions']['absoluteX2'] && y >= draggable['dimensions']['absoluteY1'] && y <= draggable['dimensions']['absoluteY2']){
                    tempCurrentAboveItem = draggable;
                    // Check above block position
                    if((y - tempCurrentAboveItem['dimensions']['absoluteY1']) < (tempCurrentAboveItem['dimensions']['absoluteHeight'] / 2)){
                        tempCurrentPosition = 'top';
                    }else{
                        tempCurrentPosition = 'bottom';
                    }
                }
            });
        }else{
            tempCurrentArea = currentArea;
        }
        // If current current draggable not above other draggable items
        if(!tempCurrentAboveItem && tempCurrentArea['items'].length){
            if(y < tempCurrentArea['dimensions']['innerY1']){
                tempCurrentAboveItem = tempCurrentArea['items'][0];
                tempCurrentPosition = 'top';
            }else{
                tempCurrentAboveItem = tempCurrentArea['items'][tempCurrentArea['items'].length - 1];
                tempCurrentPosition = 'bottom';
            }
        }
        // Animate previous chassis and get current
        if(currentChassis){
            cm.removeClass(currentChassis['node'], 'is-active is-highlight');
        }
        if(currentAboveItem && tempCurrentAboveItem && currentAboveItem['chassis'][currentPosition] != tempCurrentAboveItem['chassis'][tempCurrentPosition]){
            animateChassis(currentAboveItem['chassis'][currentPosition], 0, that.params['moveDuration']);
            currentChassis = tempCurrentAboveItem['chassis'][tempCurrentPosition];
        }else if(!currentAboveItem && tempCurrentAboveItem){
            animateChassis(currentArea['chassis'][0], 0, that.params['moveDuration']);
            currentChassis = tempCurrentAboveItem['chassis'][tempCurrentPosition];
        }else if(currentAboveItem && !tempCurrentAboveItem){
            animateChassis(currentAboveItem['chassis'][currentPosition], 0, that.params['moveDuration']);
            currentChassis = tempCurrentArea['chassis'][0];
        }else if(!currentAboveItem && !tempCurrentAboveItem && currentArea != tempCurrentArea){
            animateChassis(currentArea['chassis'][0], 0, that.params['moveDuration']);
            currentChassis = tempCurrentArea['chassis'][0];
        }
        // Animate current chassis
        if(currentChassis){
            cm.addClass(currentChassis['node'], 'is-active');
            if(that.params['highlightChassis']){
                cm.addClass(currentChassis['node'], 'is-highlight');
            }
            animateChassis(currentChassis, current['dimensions']['absoluteHeight'], that.params['moveDuration']);
        }
        // Unset classname from previous active area
        if(currentArea && currentArea != tempCurrentArea){
            cm.removeClass(currentArea['node'], 'is-active');
            previousArea = currentArea;
        }
        // Set current to global
        currentArea = tempCurrentArea;
        currentAboveItem = tempCurrentAboveItem;
        currentPosition = tempCurrentPosition;
        // Set active area class name
        if(!(previousArea && previousArea['isTemporary'] && currentArea['isRemoveZone'])){
            cm.addClass(currentArea['node'], 'is-active');
        }
    };

    var stop = function(e){
        var currentHeight;
        // Remove check position event
        //checkInt && clearInterval(checkInt);
        // Remove move events attached on document
        cm.removeClass(document.body, 'pt__dnd-body');
        // Remove events
        switch(that.pointerType){
            case 'mousedown' :
                cm.removeEvent(window, 'mousemove', move);
                cm.removeEvent(window, 'mouseup', stop);
                break;
            case 'touchstart' :
                cm.removeEvent(window, 'touchmove', move);
                cm.removeEvent(window, 'touchend', stop);
                break;
        }
        // Calculate height of draggable block, like he already dropped in area, to animate height of fake empty space
        getPosition(current);
        current['node'].style.width = [(currentArea['dimensions']['innerWidth'] - current['dimensions']['margin']['left'] - current['dimensions']['margin']['right']), 'px'].join('');
        currentHeight = current['node'].offsetHeight + current['dimensions']['margin']['top'] + current['dimensions']['margin']['bottom'];
        current['node'].style.width = [current['dimensions']['width'], 'px'].join('');
        // If current draggable located above another draggable item, drops after/before it, or drops in area
        if(currentAboveItem){
            // Animate chassis blocks
            if(currentHeight != currentAboveItem['chassis'][currentPosition]['node'].offsetHeight){
                animateChassis(currentAboveItem['chassis'][currentPosition], currentHeight, that.params['dropDuration']);
            }
            // Drop Item to Area
            dropDraggableToArea(current, currentArea, {
                'target' : currentAboveItem['node'],
                'append' : currentPosition == 'top' ? 'before' : 'after',
                'index' : currentArea['items'].indexOf(currentAboveItem) + (currentPosition == 'top' ? 0 : 1),
                'top' : [currentPosition == 'top'? currentAboveItem['dimensions']['absoluteY1'] : currentAboveItem['dimensions']['absoluteY2'], 'px'].join(''),
                'onStop' : unsetCurrentDraggable
            });
        }else if(currentArea['isRemoveZone'] || currentArea['isTemporary']){
            removeDraggable(current, {
                'onStop' : unsetCurrentDraggable
            });
        }else{
            // Animate chassis blocks
            animateChassis(currentArea['chassis'][0], currentHeight, that.params['dropDuration']);
            // Drop Item to Area
            dropDraggableToArea(current, currentArea, {
                'onStop' : unsetCurrentDraggable
            });
        }
        // Unset chassis
        if(currentChassis){
            cm.removeClass(currentChassis['node'], 'is-active is-highlight');
        }
        // Unset active area classname
        if(currentArea){
            if(that.params['limit']){
                currentArea['node'].style.minHeight = '';
            }
            cm.removeClass(currentArea['node'], 'is-active');
        }
        // Un Highlight Areas
        if(that.params['highlightAreas']){
            toggleHighlightAreas();
        }
        // Show IFRAMES and EMBED tags
        cm.showSpecialTags();
    };

    /* *** DRAGGABLE MANIPULATION FUNCTIONS *** */

    var cloneDraggable = function(draggable){
        var clonedNode = draggable['node'].cloneNode(true),
            area = that.params['renderTemporaryAria']? areas[0] : draggable['area'],
            clonedDraggable = initDraggable(clonedNode, area, {});

        clonedDraggable['dimensions'] = cm.clone(draggable['dimensions']);
        area['items'].push(clonedDraggable);
        return clonedDraggable;
    };

    var dropDraggableToArea = function(draggable, area, params){
        params = cm.merge({
            'target' : area['node'],
            'append' : 'child',
            'index' : 0,
            'width' : [area['dimensions']['innerWidth'], 'px'].join(''),
            'top' : [area['dimensions']['innerY1'] - draggable['dimensions']['margin']['top'], 'px'].join(''),
            'left' : [area['dimensions']['innerX1'] - draggable['dimensions']['margin']['left'], 'px'].join(''),
            'onStart' : function(){},
            'onStop' : function(){}
        }, params);
        // System onStart event
        params['onStart']();
        // Animate draggable item, like it drops in area
        cm.addClass(draggable['node'], 'is-drop', true);
        draggable['node'].style.width = params['width'];
        cm.setCSSTranslate(draggable['node'], params['left'], params['top']);
        // On Dnimate Stop
        setTimeout(function(){
            // Append element in new position
            switch(params['append']){
                case 'child' :
                    cm.appendChild(draggable['node'], params['target']);
                    break;
                case 'before' :
                    cm.insertBefore(draggable['node'], params['target']);
                    break;
                case 'after' :
                    cm.insertAfter(draggable['node'], params['target']);
                    break;
                case 'first' :
                    cm.insertFirst(draggable['node'], params['target']);
                    break;
            }
            // Remove draggable helper classname
            cm.removeClass(draggable['node'], 'pt__dnd-helper is-drop is-active', true);
            // Reset styles
            draggable['node'].style.left = 'auto';
            draggable['node'].style.top = 'auto';
            draggable['node'].style.width = 'auto';
            cm.setCSSTranslate(current['node'], 'auto', 'auto');
            // Set index of draggable item in new area
            area['items'].splice(params['index'], 0, draggable);
            // API onDrop Event
            that.triggerEvent('onDrop', {
                'item' : draggable,
                'node' : draggable['node'],
                'to' : area,
                'from' : draggable['area'],
                'index' : params['index']
            });
            // Set draggable new area
            draggable['area'] = area;
            // System onStop event
            params['onStop']();
        }, that.params['dropDuration']);
    };

    var removeDraggable = function(draggable, params){
        var style, anim, node;
        // Remove handler
        var handler = function(){
            if(that.params['removeNode']){
                cm.remove(node);
            }
            // Remove from draggable list
            draggableList = draggableList.filter(function(item){
                return item != draggable;
            });
            unsetDraggableFromArea(draggable);
            // API onRemove Event
            if(!params['noEvent']){
                that.triggerEvent('onRemove', {
                    'item' : draggable,
                    'node' : draggable['node'],
                    'from' : draggable['area']
                });
            }
            // System onStop event
            params['onStop']();
        };
        // Config
        params = cm.merge({
            'isCurrent' : draggable === current,
            'isInDOM' : cm.inDOM(draggable['node']),
            'onStart' : function(){},
            'onStop' : function(){}
        }, params);
        // System onStart event
        params['onStart']();
        // If draggable not in DOM, we don't need to wrap and animate it
        if(params['isInDOM'] && that.params['animateRemove']){
            // If draggable is current - just animate pull out left, else - wrap to removable node
            if(params['isCurrent']){
                node = draggable['node'];
                anim = draggable['anim'];
                style = {
                    'left' : [-(draggable['dimensions']['absoluteWidth'] + 50), 'px'].join(''),
                    'opacity' : 0
                };
            }else{
                node = cm.wrap(cm.node('div', {'class' : 'pt__dnd-removable'}), draggable['node']);
                anim = new cm.Animation(node);
                style = {
                    'height' : '0px',
                    'opacity' : 0
                };
            }
            // Animate draggable, like it disappear
            anim.go({
                'duration' : that.params['dropDuration'],
                'anim' : 'smooth',
                'style' : style,
                'onStop' : handler
            });
        }else{
            node = draggable['node'];
            handler();
        }
    };

    var unsetDraggableFromArea = function(draggable){
        draggable['area']['items'] = draggable['area']['items'].filter(function(item){
            return item != draggable;
        });
    };

    var unsetCurrentDraggable = function(){
        // Remove chassis blocks
        removeChassisBlocks();
        // Reset other
        current = false;
        currentAboveItem = false;
        currentArea = false;
        previousArea = false;
    };

    /* *** CHASSIS FUNCTIONS *** */

    var renderChassisBlocks = function(){
        var chassis;
        cm.forEach(areas, function(area){
            if(area['isLocked']){
                return;
            }

            if(!area['items'].length){
                chassis = renderChassis();
                cm.appendChild(chassis['node'], area['node']);
                area['chassis'].push(chassis);
            }
            cm.forEach(area['items'], function(draggable, i){
                if(i === 0){
                    chassis = renderChassis();
                    cm.insertBefore(chassis['node'], draggable['node']);
                    area['chassis'].push(chassis);
                }
                chassis = renderChassis();
                cm.insertAfter(chassis['node'], draggable['node']);
                area['chassis'].push(chassis);
                // Associate with draggable
                draggable['chassis']['top'] = area['chassis'][i];
                draggable['chassis']['bottom'] = area['chassis'][i + 1];
            });
        });
    };

    var renderChassis = function(){
        var node = cm.node(that.params['chassisTag'], {'class' : 'pt__dnd-chassis'});
        return {
            'node' : node,
            'anim' : new cm.Animation(node),
            'isShow' : false
        };
    };

    var removeChassisBlocks = function(){
        cm.forEach(areas, function(area){
            cm.forEach(area['chassis'], function(chassis){
                cm.remove(chassis['node']);
            });
            area['chassis'] = [];
        });
    };

    var animateChassis = function(chassis, height, duration) {
        var style;
        height = [height, 'px'].join('');
        if(that.params['useCSSAnimation'] || isGracefulDegradation){
            if(!isGracefulDegradation && (style = cm.getSupportedStyle('transition-duration'))){
                chassis['node'].style[style] = [duration, 'ms'].join('');
            }
            chassis['node'].style.height = height;
        }else{
            chassis['anim'].go({'style' : {'height' : height}, 'anim' : 'smooth', 'duration' : duration});
        }
    };

    /* *** POSITION CALCULATION FUNCTIONS *** */

    var getPosition = function(item){
        item['dimensions'] = cm.extend(item['dimensions'], cm.getFullRect(item['node'], item['styleObject']));
    };

    var getPositions = function(arr){
        cm.forEach(arr, getPosition);
    };

    var getPositionsAll = function(){
        getPositions(areas);
        cm.forEach(areas, function(area){
            getPositions(area['items']);
        });
    };

    var recalculatePosition = function(item){
        //item['dimensions']['x1'] = cm.getRealX(item['node']);
        item['dimensions']['y1'] = cm.getRealY(item['node']);
        //item['dimensions']['x2'] = item['dimensions']['x1'] + item['dimensions']['width'];
        item['dimensions']['y2'] = item['dimensions']['y1'] + item['dimensions']['height'];

        //item['dimensions']['innerX1'] = item['dimensions']['x1'] + item['dimensions']['padding']['left'];
        item['dimensions']['innerY1'] = item['dimensions']['y1'] + item['dimensions']['padding']['top'];
        //item['dimensions']['innerX2'] = item['dimensions']['innerX1'] + item['dimensions']['innerWidth'];
        item['dimensions']['innerY2'] = item['dimensions']['innerY1'] + item['dimensions']['innerHeight'];

        //item['dimensions']['absoluteX1'] = item['dimensions']['x1'] - item['dimensions']['margin']['left'];
        item['dimensions']['absoluteY1'] = item['dimensions']['y1'] - item['dimensions']['margin']['top'];
        //item['dimensions']['absoluteX2'] = item['dimensions']['x2'] + item['dimensions']['margin']['right'];
        item['dimensions']['absoluteY2'] = item['dimensions']['y2'] + item['dimensions']['margin']['bottom'];
    };

    var recalculatePositions = function(arr){
        cm.forEach(arr, recalculatePosition);
    };

    var recalculatePositionsAll = function(){
        var chassisHeight = 0;
        // Reset current active chassis height, cause we need to calculate clear positions
        if(currentChassis){
            cm.addClass(currentChassis['node'], 'is-immediately');
            chassisHeight = currentChassis['node'].offsetHeight;
            currentChassis['node'].style.height = 0;
        }
        recalculatePositions(areas);
        cm.forEach(areas, function(area){
            recalculatePositions(area['items']);
        });
        // Restoring chassis height after calculation
        if(currentChassis && chassisHeight){
            currentChassis['node'].style.height = [chassisHeight, 'px'].join('');
            (function(currentChassis){
                setTimeout(function(){
                    cm.removeClass(currentChassis['node'], 'is-immediately');
                }, 5);
            })(currentChassis);
        }
    };

    var checkPosition = function(){
        var filteredAreas = getFilteredAreas();
        if(filteredAreas[0]['dimensions']['y1'] != cm.getRealY(filteredAreas[0]['node'])){
            recalculatePositionsAll();
        }
    };

    /* *** AREA FUNCTIONS *** */

    var getFilteredAreas = function(){
        return areas.filter(function(area){
            // Filter out locked areas and inner areas
            if(area['isTemporary'] || area['isSystem']){
                return false;
            }
            // True - pass area
            return true;
        });
    };

    var getRemoveZones = function(){
        return areas.filter(function(area){
            return area['isRemoveZone'];
        });
    };

    var toggleHighlightAreas = function(){
        if(filteredAvailableAreas){
            if(isHighlightedAreas){
                isHighlightedAreas = false;
                cm.forEach(filteredAvailableAreas, function(area){
                    cm.removeClass(area['node'], 'is-highlight');
                });
            }else{
                isHighlightedAreas = true;
                cm.forEach(filteredAvailableAreas, function(area){
                    cm.addClass(area['node'], 'is-highlight');
                });
            }
        }
    };

    /* *** HELPERS *** */

    var toggleScroll = function(speed){
        var scrollRemaining,
            duration,
            styles = {};

        if(speed == 0){
            isScrollProccess = false;
            anims['scroll'].stop();
        }else if(speed < 0 && !isScrollProccess){
            isScrollProccess = true;
            duration = cm.getScrollTop(that.params['scrollNode']) * that.params['scrollSpeed'];
            if(cm.isWindow(that.params['scrollNode'])){
                styles['docScrollTop'] = 0;
            }else{
                styles['scrollTop'] = 0;
            }
            anims['scroll'].go({'style' : styles, 'duration' : duration, 'onStop' : function(){
                isScrollProccess = false;
                //getPositionsAll();
                //recalculatePositionsAll();
            }});
        }else if(speed > 0 && !isScrollProccess){
            isScrollProccess = true;
            scrollRemaining = cm.getScrollHeight(that.params['scrollNode']) - pageSize['winHeight'];
            if(cm.isWindow(that.params['scrollNode'])){
                styles['docScrollTop'] = scrollRemaining;
            }else{
                styles['scrollTop'] = scrollRemaining;
            }
            duration = scrollRemaining * that.params['scrollSpeed'];
            anims['scroll'].go({'style' : styles, 'duration' : duration, 'onStop' : function(){
                isScrollProccess = false;
                //getPositionsAll();
                //recalculatePositionsAll();
            }});
        }
    };

    /* ******* MAIN ******* */

    that.getArea = function(node){
        var area;
        cm.forEach(areas, function(item){
            if(item['node'] === node){
                area = item;
            }
        });
        return area;
    };

    that.registerArea = function(node, params){
        if(cm.isNode(node) && node.tagName){
            initArea(node, params || {});
        }
        return that;
    };

    that.updateArea = function(node){
        var area = that.getArea(node);
        if(area){
            initAreaWidgets(area);
        }
        return that;
    };

    that.removeArea = function(node, params){
        if(cm.isNode(node) && cm.inArray(areasList, node)){
            areasList = areasList.filter(function(area){
                return area != node;
            });
            areas = areas.filter(function(area){
                return area['node'] != node;
            });
        }
        return that;
    };

    that.getDraggable = function(node){
        var draggable;
        cm.forEach(draggableList, function(item){
            if(item['node'] === node){
                draggable = item;
            }
        });
        return draggable;
    };

    that.getDraggableList = function(){
        return draggableList;
    };

    that.registerDraggable = function(node, areaNode, params){
        var draggable, area, newDraggable, index, childNodes, draggableNodes = [];
        // Find draggable item by node
        draggable = that.getDraggable(node);
        // If draggable already exists - reinit it, else - init like new draggable item
        if(draggable){
            initDraggableDrag(draggable);
        }else if(cm.inArray(areasList, areaNode)){
            node.setAttribute('data-com-draganddrop', 'draggable');
            // Fins area item by node
            area = that.getArea(areaNode);
            // Find draggable index
            if(area['draggableInChildNodes']){
                childNodes = area['node'].childNodes;
                cm.forEach(childNodes, function(node){
                    if(node.tagName && node.getAttribute('data-com-draganddrop') == 'draggable'){
                        draggableNodes.push(node);
                    }
                });
            }else{
                draggableNodes = cm.getByAttr('data-com-draganddrop', 'draggable', area['node']);
            }
            index = draggableNodes.indexOf(node);
            // Register draggable
            newDraggable = initDraggable(node, area, params || {});
            area['items'].splice(index, 0, newDraggable);
        }
        return that;
    };

    that.replaceDraggable = function(oldDraggableNode, newDraggableNode, params){
        var oldDraggable,
            newDraggable;
        // Find draggable item
        cm.forEach(draggableList, function(item){
            if(item['node'] === oldDraggableNode){
                oldDraggable = item;
            }
        });
        if(oldDraggable){
            // Find old draggable area and index in area
            var area = oldDraggable['area'],
                index = area['items'].indexOf(oldDraggable),
                node = cm.wrap(cm.node('div', {'class' : 'pt__dnd-removable', 'style' : 'height: 0px;'}), newDraggableNode),
                anim = new cm.Animation(node);
            // Append new draggable into DOM
            cm.insertAfter(node, oldDraggableNode);
            // Remove old draggable
            removeDraggable(oldDraggable, params);
            // Animate new draggable
            anim.go({'style' : {'height' : [cm.getRealHeight(node, 'offset', 0), 'px'].join(''), 'opacity' : 1}, 'duration' : 300, 'anim' : 'simple', 'onStop' : function(){
                cm.insertAfter(newDraggableNode, node);
                cm.remove(node);
                // Register new draggable
                newDraggable = initDraggable(newDraggableNode, area);
                area['items'].splice(index, 0, newDraggable);
                // API onEmbed event
                that.triggerEvent('onReplace', {
                    'item' : newDraggable,
                    'node' : newDraggable['node'],
                    'to' : newDraggable['to']
                });
            }});
        }
        return that;
    };

    that.removeDraggable = function(node, params){
        var draggable;
        // Find draggable item
        cm.forEach(draggableList, function(item){
            if(item['node'] === node){
                draggable = item;
            }
        });
        if(draggable){
            // Remove
            removeDraggable(draggable, params || {});
        }
        return that;
    };

    that.getOrderingNodes = function(){
        var results = [],
            arr,
            filteredAreas = getFilteredAreas();
        // Build array
        cm.forEach(filteredAreas, function(area){
            arr = {
                'area' : area['node'],
                'items' : []
            };
            cm.forEach(area['items'], function(item){
                arr['items'].push(item['node']);
            });
            results.push(arr);
        });
        return filteredAreas.length == 1 ? arr['items'] : results;
    };

    that.getOrderingIDs = function(){
        var results = {},
            arr,
            filteredAreas = getFilteredAreas();
        // Build array
        cm.forEach(filteredAreas, function(area){
            arr = {};
            cm.forEach(area['items'], function(item, i){
                if(!item['id']){
                    throw new Error('Attribute "data-id" not specified on item node.');
                }
                arr[item['id']] = i;
            });
            results[area['id']] = arr;
        });
        return filteredAreas.length == 1 ? arr : results;
    };
    
    init();
});

cm.define('Com.Draggable', {
    'modules' : [
        'Params',
        'Events',
        'Langs',
        'DataConfig'
    ],
    'events' : [
        'onRender',
        'onStart',
        'onMove',
        'onStop',
        'onSet',
        'onSelect'
    ],
    'params' : {
        'node' : cm.node('div'),            // Node, for drag
        'target' : false,                   // Node, for drag target event
        'limiter' : false,                  // Node, for limit draggable in it
        'minY' : false,
        'direction' : 'both',               // both | vertical | horizontal
        'alignTarget' : true,
        'alignNode' : false
    }
},
function(params){
    var that = this;

    that.startX = 0;
    that.startY = 0;
    that.nodeStartX = 0;
    that.nodeStartY = 0;
    that.isProcess = false;
    that.pointerType = null;
    that.dimensions = {
        'target' : {}
    };
    that.position = null;

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataConfig(that.params['node']);
        validateParams();
        render();
        that.triggerEvent('onRender');
    };

    var validateParams = function(){
        if(!that.params['target']){
            that.params['target'] = that.params['node'];
        }
    };

    var render = function(){
        that.setTarget(that.params['target']);
    };

    var start = function(e){
        cm.preventDefault(e);
        if(e.button){
            return;
        }
        if(that.isProcess){
            return;
        }
        that.isProcess = true;
        that.pointerType = e.type;
        // Hide IFRAMES and EMBED tags
        cm.hideSpecialTags();
        // Check event type and get cursor / finger position
        var position = cm.getEventClientPosition(e);
        that.startX = position['left'];
        that.startY = position['top'];
        // Calculate dimensions and position
        that.getDimensions();
        that.nodeStartX = cm.getStyle(that.params['node'], 'left', true);
        that.nodeStartY = cm.getStyle(that.params['node'], 'top', true);
        setPositionHelper(position, 'onSelect');
        // Add move event on document
        switch(that.pointerType){
            case 'mousedown' :
                cm.addEvent(window, 'mousemove', move);
                cm.addEvent(window, 'mouseup', stop);
                break;
            case 'touchstart' :
                cm.addEvent(window, 'touchmove', move);
                cm.addEvent(window, 'touchend', stop);
                break;
        }
        // Trigger Event
        that.triggerEvent('onStart');
    };

    var move = function(e){
        cm.preventDefault(e);
        var position = cm.getEventClientPosition(e);
        // Calculate dimensions and position
        setPositionHelper(position, 'onSelect');
        // Trigger Event
        that.triggerEvent('onMove');
    };

    var stop = function(e){
        cm.preventDefault(e);
        that.isProcess = false;
        // Calculate dimensions and position
        var position = cm.getEventClientPosition(e);
        setPositionHelper(position, 'onSet');
        // Remove move events attached on document
        switch(that.pointerType){
            case 'mousedown' :
                cm.removeEvent(window, 'mousemove', move);
                cm.removeEvent(window, 'mouseup', stop);
                break;
            case 'touchstart' :
                cm.removeEvent(window, 'touchmove', move);
                cm.removeEvent(window, 'touchend', stop);
                break;
        }
        // Show IFRAMES and EMBED tags
        cm.showSpecialTags();
        // Trigger Event
        that.triggerEvent('onStop');
    };
    
    /* *** HELPERS *** */

    var setPositionHelper = function(position, eventName){
        position = cm.merge({
            'left' : 0,
            'top' : 0
        }, position);
        if(that.params['alignTarget'] && that.params['node'] !== that.params['target']){
            position['left'] -= that.dimensions['target']['absoluteX1'];
            position['top'] -= that.dimensions['target']['absoluteY1'];
        }else{
            position['left'] += that.nodeStartX - that.startX;
            position['top'] += that.nodeStartY - that.startY;
        }
        position['left'] = Math.round(position['left']);
        position['top'] = Math.round(position['top']);
        position = setPositionAction(position);
        that.position = position;
        that.triggerEvent(eventName, that.position);
    };

    var setPositionAction = function(position){
        position = cm.merge({
            'left' : 0,
            'top' : 0,
            'nodeTop' : 0,
            'nodeLeft' : 0
        }, position);
        // Check limit
        if(that.params['limiter']){
            if(position['top'] < 0){
                position['top'] = 0;
            }else if(position['top'] > that.dimensions['limiter']['absoluteHeight']){
                position['top'] = that.dimensions['limiter']['absoluteHeight'];
            }
            if(position['left'] < 0){
                position['left'] = 0;
            }else if(position['left'] > that.dimensions['limiter']['absoluteWidth']){
                position['left'] = that.dimensions['limiter']['absoluteWidth'];
            }
        }
        // Limiters
        if(!isNaN(that.params['minY']) && position['top'] < that.params['minY']){
            position['top'] = that.params['minY'];
        }
        // Align node
        position['nodeTop'] = position['top'];
        position['nodeLeft'] = position['left'];
        if(that.params['alignNode']){
            position['nodeTop'] -= (that.dimensions['node']['absoluteHeight'] / 2);
            position['nodeLeft'] -= (that.dimensions['node']['absoluteWidth'] / 2);
        }
        // Set styles
        switch(that.params['direction']){
            case 'vertical' :
                that.params['node'].style.top = [position['nodeTop'], 'px'].join('');
                break;
            case 'horizontal' :
                that.params['node'].style.left = [position['nodeLeft'], 'px'].join('');
                break;
            default :
                that.params['node'].style.top = [position['nodeTop'], 'px'].join('');
                that.params['node'].style.left = [position['nodeLeft'], 'px'].join('');
                break;
        }
        return position;
    };

    /* ******* MAIN ******* */

    that.setTarget = function(node){
        // Clear old target node
        that.removeTarget();
        // Set new target node
        that.params['target'] = node;
        // Calculate dimensions and position
        that.getDimensions();
        // Add drag start event
        cm.addEvent(that.params['target'], 'touchstart', start);
        cm.addEvent(that.params['target'], 'mousedown', start);
    };

    that.removeTarget = function() {
        if(cm.isNode(that.params['target'])){
            cm.removeEvent(that.params['target'], 'touchstart', start);
            cm.removeEvent(that.params['target'], 'mousedown', start);
            that.params['target'] = null;
        }
    };

    that.setNode = function(node){
        if(that.params['node'] === that.params['target']){
            that.removeTarget(that.params['target']);
        }
        // Set new node
        that.params['node'] = node;
        if(!that.params['target']){
            that.setTarget(that.params['node']);
        }else{
            // Calculate dimensions and position
            that.getDimensions();
        }
    };

    that.getDimensions = function(){
        that.dimensions['target'] = cm.getFullRect(that.params['target']);
        that.dimensions['node'] = cm.getFullRect(that.params['node']);
        that.dimensions['limiter'] = cm.getFullRect(that.params['limiter']);
        return that.dimensions;
    };

    that.setPosition = function(position, triggerEvents){
        position = cm.merge({
            'left' : 0,
            'top' : 0
        }, position);
        triggerEvents = cm.isUndefined(triggerEvents) ? true : triggerEvents;
        position = setPositionAction(position);
        that.position = position;
        // Trigger Event
        if(triggerEvents){
            that.triggerEvent('onSelect', that.position);
            that.triggerEvent('onSet', that.position);
        }
        return that;
    };

    that.get = function(){
        return that.position;
    };

    init();
});
cm.define('Com.FileDropzone', {
    'extend' : 'Com.AbstractController',
    'events' : [
        'onEnable',
        'onDisable',
        'onDrop',
        'onSelect'
    ],
    'params' : {
        'embedStructure' : 'append',
        'target' : null,
        'rollover' : true,
        'max' : 0,                                  // 0 - infinity
        'disabled' : false,
        '_height' : 128,
        '_duration' : 'cm._config.animDuration',
        'fileReaderConstructor' : 'Com.FileReader',
        'fileReaderParams' : {
            'readValueType' : 'base64'
        }
    },
    'strings' : {
        'drop_single' : 'drop file here',
        'drop_multiple' : 'drop files here'
    }
},
function(){
    Com.AbstractController.apply(this, arguments);
});

cm.getConstructor('Com.FileDropzone', function(classConstructor, className, classProto, classInherit){
    classProto.construct = function(){
        var that = this;
        that.disabled = false;
        that.dragInterval = null;
        that.isShow = true;
        that.isHighlighted = false;
        // Bind context to methods
        that.dragOverHandler = that.dragOver.bind(that);
        that.dragDropHandler = that.dragDrop.bind(that);
        that.showDropzoneHandler = that.showDropzone.bind(that);
        that.hideDropzoneHandler = that.hideDropzone.bind(that);
        that.onGetLESSVariablesProcessHandler = that.onGetLESSVariablesProcess.bind(that);
        that.setEventsProcessHander = that.setEventsProcess.bind(that);
        that.unsetEventsProcessHander = that.unsetEventsProcess.bind(that);
        // Add events
        that.addEvent('onGetLESSVariablesProcess', that.onGetLESSVariablesProcessHandler);
        that.addEvent('onSetEventsProcess', that.setEventsProcessHander);
        that.addEvent('onUnsetEventsProcess', that.unsetEventsProcessHander);
        // Call parent method
        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.validateParams = function(){
        var that = this;

        // Call parent method
        classInherit.prototype.validateParams.apply(that, arguments);

        // Validate max items length
        that.isMultiple = !that.params['max'] || that.params['max'] > 1;

        // Validate Language Strings
        that.setMessages({
            'drop' : that.isMultiple? that.lang('drop_multiple') : that.lang('drop_single')
        });
    };

    classProto.onGetLESSVariablesProcess = function(){
        var that = this;
        if(!that.params['height']){
            that.params['height'] = cm.getLESSVariable('ComFileDropzone-Height', that.params['_height'], true);
        }
        if(!that.params['duration']){
            that.params['duration'] = cm.getTransitionDurationFromLESS('ComFileDropzone-Duration', that.params['_duration']);
        }
    };

    classProto.setEventsProcess = function(){
        var that = this;
        cm.addEvent(window, 'dragover', that.dragOverHandler);
        cm.addEvent(window, 'drop', that.dragDropHandler);
    };

    classProto.unsetEventsProcess = function(){
        var that = this;
        cm.removeEvent(window, 'dragover', that.dragOverHandler);
        cm.removeEvent(window, 'drop', that.dragDropHandler);
    };

    classProto.renderView = function(){
        var that = this;
        that.triggerEvent('onRenderViewStart');
        that.nodes['container'] = cm.node('div', {'class' : 'com__file-dropzone'},
            cm.node('div', {'class' : 'inner'},
                cm.node('div', {'class' : 'title'},
                    cm.node('div', {'class' : 'label'}, that.lang('drop')),
                    cm.node('div', {'class' : 'icon cm-i cm-i__circle-arrow-down'})
                )
            )
        );
        that.triggerEvent('onRenderViewProcess');
        that.triggerEvent('onRenderViewEnd');
    };

    classProto.renderViewModel = function(){
        var that = this;
        // Init container animation
        if(that.params['rollover']){
            cm.addClass(that.nodes['container'], 'is-hidden');
            that.components['animation'] = new cm.Animation(that.params['container']);
        }else{
            cm.removeClass(that.nodes['container'], 'is-hidden');
            if(that.params['height']){
                that.params['container'].style.height = that.params['height'] + 'px';
            }
        }
        that.params['disabled'] && that.disable();
    };

    /* *** DROPZONE *** */

    classProto.dragOver = function(e){
        var that = this;

        if(that.disabled){
            return;
        }

        cm.preventDefault(e);

        // Show dropzone
        that.show();
        that.showDropzone();

        // Hide dropzone if event not triggering inside the current document window (hax)
        that.dragInterval && clearTimeout(that.dragInterval);
        that.dragInterval = setTimeout(that.hideDropzoneHandler, 100);

        // Highlight dropzone
        var target = cm.getEventTarget(e)
        if(cm.isParent(that.nodes['container'], target, true)){
            cm.addClass(that.nodes['container'], 'is-highlight');
        }else{
            cm.removeClass(that.nodes['container'], 'is-highlight');
        }
    };

    classProto.dragDrop = function(e){
        var that = this;


        if(that.disabled){
            return;
        }

        var target = cm.getEventTarget(e);
        if(cm.isParent(that.nodes['container'], target, true)){
            cm.stopPropagation(e);
            cm.preventDefault(e);
            // Get files
            if(e.dataTransfer){
                if(e.dataTransfer.files && e.dataTransfer.files.length){
                    // Dropped files from local
                    that.processFiles(e.dataTransfer.files);
                }else{
                    // Dropped files from another browser window
                    cm.fileFromDataTransfer(e, function(file){
                        that.processFiles([file]);
                    });
                }
            }
        }

        // Hide dropzone and reset his state
        that.dragInterval && clearTimeout(that.dragInterval);
        that.hide();
        that.hideDropzone();
    };

    classProto.processFiles = function(files){
        var that = this,
            data = [],
            length = that.params['max'] ? Math.min(files.length, that.params['max']) : files.length;
        // Process file
        cm.forEach(length, function(i){
            data.push(files[i]);
            that.triggerEvent('onDrop', files[i]);
        });
        if(data.length){
            that.triggerEvent('onSelect', data);
        }
    };

    classProto.show = function(){
        var that = this;
        if(!that.isShow){
            that.isShow = true;
            cm.replaceClass(that.nodes['container'], 'is-hidden', 'is-show');
        }
    };

    classProto.hide = function(){
        var that = this;
        if(that.isShow){
            that.isShow = false;
            cm.replaceClass(that.nodes['container'], 'is-show', 'is-hidden');
        }
    };

    classProto.showDropzone = function(){
        var that = this,
            height;
        if(!that.isHighlighted){
            that.isHighlighted = true;
            // Set classes
            cm.addClass(that.nodes['container'], 'is-highlight');
            // Animate
            if(that.params['rollover']){
                // Set classes
                cm.addClass(that.params['container'], 'is-dragging');
                cm.addClass(that.params['target'], 'is-hidden');
                cm.removeClass(that.nodes['container'], 'is-hidden');
                // Animate
                height = Math.max(that.params['height'], that.params['target'].offsetHeight);
                that.components['animation'].go({
                    'style' : {'height' : (height + 'px')},
                    'duration' : that.params['duration'],
                    'anim' : 'smooth'
                });
            }
        }
    };

    classProto.hideDropzone = function(){
        var that = this,
            height;
        if(that.isHighlighted){
            that.isHighlighted = false;
            // Set classes
            cm.removeClass(that.nodes['container'], 'is-highlight');
            // Animate
            if(that.params['rollover']){
                // Set classes
                cm.removeClass(that.params['container'], 'is-dragging');
                cm.removeClass(that.params['target'], 'is-hidden');
                cm.addClass(that.nodes['container'], 'is-hidden');
                // Animate
                height = that.params['target'].offsetHeight;
                that.components['animation'].go({
                    'style' : {'height' : (height + 'px')},
                    'duration' : that.params['duration'],
                    'anim' : 'smooth',
                    'onStop' : function(){
                        that.params['container'].style.height = 'auto';
                    }
                });
            }
        }
    };

    /******* PUBLIC *******/

    classProto.enable = function(){
        var that = this;
        if(that.disabled){
            that.disabled = false;
            cm.removeClass(that.nodes['container'], 'disabled');
            that.triggerEvent('onEnable');
        }
        return that;
    };

    classProto.disable = function(){
        var that = this;
        if(!that.disabled){
            that.disabled = true;
            cm.addClass(that.nodes['container'], 'disabled');
            that.triggerEvent('onDisable');
        }
        return that;
    };
});

cm.define('Com.FileReader', {
    'modules' : [
        'Params',
        'Events',
        'Langs'
    ],
    'events' : [
        'onConstruct',
        'onConstructStart',
        'onConstructEnd',
        'onValidateParams',
        'onRenderStart',
        'onRender',
        'onRenderEnd',
        'onReadStart',
        'onReadProcess',
        'onReadSuccess',
        'onReadError',
        'onReadEnd'
    ],
    'params' : {
        'file' : null,
        'readOnRender' : true,
        'readValueType' : 'base64',         // base64 | binary | text | hex
        'types': {
            'image': /image\/.*/,
        },
    }
},
function(params){
    var that = this;
    that.construct(params);
});

cm.getConstructor('Com.FileReader', function(classConstructor, className, classProto){
    classProto.construct = function(params){
        var that = this;
        // Variables
        that.isDestructed = false;
        that.nodes = {};
        that.components = {};
        // Events
        that.triggerEvent('onConstructStart');
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.render();
        that.triggerEvent('onConstruct');
        that.triggerEvent('onConstructEnd');
    };

    classProto.render = function(){
        var that = this;
        that.triggerEvent('onRenderStart');
        if(that.params['readOnRender']){
            that.read(that.params['file']);
        }
        that.triggerEvent('onRender');
        that.triggerEvent('onRenderEnd');
    };

    classProto.readAsBase64 = function(file, callback){
        var that = this;
        that.triggerEvent('onReadStart', file);
        // Validate and read
        that.process(file, function(item){
            that.triggerEvent('onReadProcess', item);
            // Read File
            var reader = new FileReader();
            cm.addEvent(reader, 'load', function(e){
                that.afterSuccess(e.target.result, item, callback);
            });
            cm.addEvent(reader, 'error', function(e){
                that.afterError(e, item, callback);
            });
            reader.readAsDataURL(file);
        });
        return that;
    };

    classProto.readAsBinary = function(file, callback){
        var that = this;
        that.triggerEvent('onReadStart', file);
        // Validate and read
        that.process(file, function(item){
            that.triggerEvent('onReadProcess', item);
            // Read File
            var reader = new FileReader();
            cm.addEvent(reader, 'load', function(e){
                that.afterSuccess(e.target.result, item, callback);
            });
            cm.addEvent(reader, 'error', function(e){
                that.afterError(e, item, callback);
            });
            reader.readAsBinaryString(file);
        });
        return that;
    };

    classProto.readAsHEX = function(file, callback){
        var that = this;
        that.triggerEvent('onReadStart', file);
        // Validate and read
        that.process(file, function(item){
            that.triggerEvent('onReadProcess', item);
            // Read File
            var reader = new FileReader();
            cm.addEvent(reader, 'load', function(e){
                var value;
                try{
                    value = cm.bufferToHEX(e.target.result);
                }catch(e){
                    that.afterError(e, item, callback);
                }finally{
                    that.afterSuccess(value, item, callback);
                }
            });
            cm.addEvent(reader, 'error', function(e){
                that.afterError(e, item, callback);
            });
            reader.readAsArrayBuffer(file);
        });
        return that;
    };

    classProto.readAsText = function(file, callback){
        var that = this;
        that.triggerEvent('onReadStart', file);
        // Validate and read
        that.process(file, function(item){
            that.triggerEvent('onReadProcess', item);
            // Read File
            var reader = new FileReader();
            cm.addEvent(reader, 'load', function(e){
                that.afterSuccess(e.target.result, item, callback);
            });
            cm.addEvent(reader, 'error', function(e){
                that.afterError(e, item, callback);
            });
            reader.readAsText(file);
        });
        return that;
    };

    /******* HELPERS *******/

    classProto.afterSuccess = function(value, item, callback){
        var that = this;
        item['value'] = value;
        callback(item);
        that.triggerEvent('onReadSuccess', item);
        that.triggerEvent('onReadEnd', item);
        return item;
    };

    classProto.afterError = function(e, item, callback){
        var that = this;
        item['error'] = e;
        callback && callback(item);
        that.triggerEvent('onReadError', item);
        that.triggerEvent('onReadEnd', item);
        return item;
    };

    /******* PUBLIC *******/

    classProto.read = function(file, callback){
        var that = this;
        callback = cm.isFunction(callback) ? callback : function(){};
        if(cm.isFileReader && cm.isFile(file)) {
            switch (that.params['readValueType']) {
                case 'binary':
                    that.readAsBinary(file, callback);
                    break;
                case 'hex':
                    that.readAsHEX(file, callback);
                    break;
                case 'text':
                    that.readAsText(file, callback);
                    break;
                case 'base64':
                default:
                    that.readAsBase64(file, callback);
                    break;

            }
        }
        return that;
    };

    classProto.process = function(file, callback){
        var that = this,
            item = that.validate(file);
        if(that.params.types.image.test(item['type']) && !cm.isEmpty(item['url'])){
            cm.onImageLoad(
                item['url'],
                function(node){
                    item._isLoaded = true;
                    item.width = node.naturalWidth || 0;
                    item.height = node.naturalHeight || 0;
                    callback(item);
                },
                function(){
                    callback(item);
                }
            );
        }else{
            callback(item);
        }
    };

    classProto.validate = function(o){
        var that = this,
            item = {
                '_type' : 'file',
                '_isFile' : false,
                '_isLoaded' : false,
                'value' : null,
                'error' : null,
                'name' : '',
                'size' : 0,
                'url' : null,
                'type' : null
            },
            parsed;
        if(cm.isFile(o)){
            item['_isFile'] = true;
            item['file'] = o;
            item['type'] = o.type;
            item['name'] = o.name;
            item['size'] = o.size;
            item['url'] = window.URL.createObjectURL(o);
        }else if(cm.isObject(o)){
            item = cm.merge(item, o);
            item['name'] = cm.isEmpty(item['name']) ? item['value'] : item['name'];
            item['url'] = cm.isEmpty(item['url']) ? item['value'] : item['url'];
        }else if(!cm.isEmpty(o)){
            parsed = cm.parseJSON(o);
            if(cm.isObject(parsed)){
                item = that.validate(parsed);
            }else{
                item = that.validate({'value': o});
            }
        }
        return item;
    };
});

cm.define('Com.FileStats', {
    'extend' : 'Com.AbstractController',
    'params' : {
        'mfu' : 0,                                                    // Max files per upload
        'umf' : 0,                                                    // Max file size
        'quote' : 0,
        'usage' : 0
    },
    'strings' : {
        'stats' : 'Statistics',
        'mfu' : 'You can upload up to %mfu% files at a time.',
        'umf' : 'Max file size: %umf%.',
        'quote' : 'Total storage: %quote%.',
        'usage' : 'Storage used: %usage%.',
        'quote_unlimited' : 'Unlimited'
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractController.apply(that, arguments);
});

cm.getConstructor('Com.FileStats', function(classConstructor, className, classProto){
    var _inherit = classProto._inherit;

    classProto.renderView = function(){
        var that = this,
            vars = {
                '%mfu%' : that.params['mfu'],
                '%umf%' : that.params['umf'],
                '%quote%' : that.params['quote'],
                '%usage%' : that.params['usage']
            };
        vars['%quote%'] = parseFloat(vars['%quote%']) === 0 ? that.lang('quote_unlimited') : vars['%quote%'] + ' Mb';
        vars['%usage%'] = vars['%usage%'] + ' Mb';
        that.triggerEvent('onRenderViewStart');
        // Structure
        that.nodes['container'] = cm.node('div', {'class' : 'com__file-stats'},
            that.nodes['content'] = cm.node('div', {'class' : 'pt__line-info'},
                cm.node('div', {'class' : 'icon small info'}),
                cm.node('div', {'class' : 'item'}, that.lang('mfu', vars)),
                cm.node('div', {'class' : 'item'}, that.lang('umf', vars)),
                cm.node('div', {'class' : 'item'}, that.lang('quote', vars)),
                cm.node('div', {'class' : 'item'}, that.lang('usage', vars))
            )
        );
        // Events
        that.triggerEvent('onRenderViewProcess');
        that.triggerEvent('onRenderViewEnd');
        return that;
    };
});
/* ******* COMPONENT: FORM FIELD ******* */

Com.FormFields = (function() {
    var stack = {};

    return {
        'add': function(type, params) {
            stack[type] = cm.merge({
                'node': cm.node('div'),
                'fieldConstructor': null,
                'constructor': null,
                'type': type,
                'field': true,
                'system': false
            }, params);
        },
        'get': function(type) {
            return stack[type] ? cm.clone(stack[type], true) : null;
        },
		'list': function() {
			return stack;
		}
    };
})();

cm.define('Com.FormField', {
	'modules': [
		'Params',
		'Events',
		'DataConfig',
		'Stack',
		'Callbacks'
	],
	'events': [
		'onRender'
	],
	'params': {
		'node': cm.node('div'),
		'container': cm.node('div'),
		'form': false,
		'name': '',
		'value': null,
		'dataValue': null,
		'type': false,
		'label': '',
		'help': null,
		'placeholder': '',
		'visible': true,
		'options': [],
		'className': '',                   // is-box
		'constructor': false,
		'constructorParams': {},
		'helpConstructor': 'Com.HelpBubble',
		'helpParams': {
			'renderStructure': true
		}
	}
},
function(params) {
	var that = this;

	that.nodes = {};
	that.components = {};
	that.form = null;
	that.controller = null;
	that.value = null;

	var init = function() {
		that.setParams(params);
		that.convertEvents(that.params.events);
		that.getDataConfig(that.params.node);
		that.callbacksProcess();
		validateParams();
		render();
		that.addToStack(that.params.node);
		that.triggerEvent('onRender');
	};

	var validateParams = function() {
		if (that.params.constructor) {
			cm.getConstructor(that.params.constructor, function(classConstructor) {
				that.params.constructor = classConstructor;
			});
		}
		that.params.constructorParams.node = that.params.node;
		that.params.constructorParams.name = that.params.name;
		that.params.constructorParams.options = that.params.options;
		that.params.constructorParams.value = that.params.dataValue || that.params.value;
		that.params.helpParams.content = that.params.help;
		that.params.helpParams.name = that.params.name;
		that.form = that.params.form;
	};

	var render = function() {
		// Render structure
		that.nodes = that.callbacks.render(that) || {};
		// Append
		that.params.container.appendChild(that.nodes.container);
		// Construct
		that.callbacks.construct(that);
	};

	/* ******* CALLBACKS ******* */

	that.callbacks.construct = function(that) {
		that.controller = that.callbacks.controller(that, that.params.constructorParams);
	};

	that.callbacks.controller = function(that, params) {
		if (that.params.constructor) {
			return new that.params.constructor(params);
		}
	};

	that.callbacks.render = function(that) {
		var nodes = {};
		// Structure
		nodes.container = cm.node('dl', {'class': 'pt__field is-adaptive'},
			nodes.label = cm.node('dt',
				cm.node('label', that.params.label)
			),
			nodes.value = cm.node('dd', that.params.node)
		);
		!that.params.visible && cm.addClass(nodes.container, 'is-hidden');
		// Style
		cm.addClass(nodes.container, that.params.className);
		// Attributes
		if (!cm.isEmpty(that.params.name)) {
			that.params.node.setAttribute('name', that.params.name);
		}
		if (!cm.isEmpty(that.params.value)) {
			that.params.node.setAttribute('value', that.params.value);
		}
		if (!cm.isEmpty(that.params.dataValue)) {
			that.params.node.setAttribute('data-value', JSON.stringify(that.params.dataValue));
		}
		if (!cm.isEmpty(that.params.placeholder)) {
			that.params.node.setAttribute('placeholder', that.params.placeholder);
		}
		if (!cm.isEmpty(that.params.help)) {
			cm.getConstructor(that.params.helpConstructor, function(classConstructor) {
				that.components.help = new classConstructor(
					cm.merge(that.params.helpParams, {
						'container': nodes.label
					})
				);
			});
		}
		return nodes;
	};

	that.callbacks.clearError = function(that) {
		cm.removeClass(that.nodes.container, 'error');
		cm.remove(that.nodes.errors);
	};

	that.callbacks.renderError = function(that, message) {
		that.callbacks.clearError(that);
		cm.addClass(that.nodes.container, 'error');
		that.nodes.errors = cm.node('ul', {'class': 'pt__field__error pt__field__hint'},
			cm.node('li', {'class': 'error'}, message)
		);
		cm.appendChild(that.nodes.errors, that.nodes.value);
	};

	that.callbacks.set = function(that, value) {
		that.controller && cm.isFunction(that.controller.set) && that.controller.set(value);
		return value;
	};

	that.callbacks.get = function(that) {
		return that.controller && cm.isFunction(that.controller.get) ? that.controller.get() : null;
	};

	that.callbacks.reset = function(that) {
		that.controller && cm.isFunction(that.controller.reset) && that.controller.reset();
	};

	that.callbacks.destruct = function(that) {
		that.controller && cm.isFunction(that.controller.destruct) && that.controller.destruct();
	};

	/* ******* PUBLIC ******* */

	that.set = function(value) {
		that.value = that.callbacks.set(that, value);
		return that;
	};

	that.get = function() {
		that.value = that.callbacks.get(that);
		return that.value;
	};

	that.reset = function() {
		that.callbacks.reset(that);
		return that;
	};

	that.destruct = function() {
		that.callbacks.destruct(that);
		that.removeFromStack();
		return that;
	};

	that.renderError = function(errors, message) {
		that.callbacks.renderError(that, errors, message);
		return that;
	};

	that.clearError = function() {
		that.callbacks.clearError(that);
		return that;
	};

	init();
});

/* ******* COMPONENT: FORM FIELD: DECORATORS ******* */

Com.FormFields.add('empty', {
    'field': false,
    'fieldConstructor': 'Com.AbstractFormField'
});

Com.FormFields.add('buttons', {
    'node': cm.node('div', {'class': 'pt__buttons pull-right'}),
    'field': false,
    'system': true,
    'callbacks': {
        'render': function(that) {
            var nodes = {};
            nodes.container = that.params.node;
            nodes.inner = cm.node('div', {'class': 'inner'});
            cm.appendChild(nodes.inner, nodes.container);
            return nodes;
        },
        'controller': function(that) {
            var buttons = {},
                node;
            cm.forEach(that.params.options, function(item) {
                node = cm.node('button', item.text);
                switch (item.value) {
                    case 'submit':
                        node.type = 'submit';
                        cm.addClass(node, 'button-primary');
                        cm.addEvent(node, 'click', function(e) {
                            cm.preventDefault(e);
                            that.form.send();
                        });
                        break;

                    case 'reset':
                        node.type = 'reset';
                        cm.addClass(node, 'button-secondary');
                        cm.addEvent(node, 'click', function(e) {
                            cm.preventDefault(e);
                            that.form.reset();
                        });
                        break;

                    case 'clear':
                        cm.addClass(node, 'button-secondary');
                        cm.addEvent(node, 'click', function(e) {
                            cm.preventDefault(e);
                            that.form.clear();
                        });
                        break;

                    default:
                        break;
                }
                buttons[item.value] = node;
                that.params.node.appendChild(node);
            });
            return buttons;
        }
    }
});

cm.define('Com.FormStepsLoader', {
    'modules' : [
        'Params',
        'Events',
        'Langs',
        'DataConfig',
        'DataNodes',
        'Callbacks',
        'Stack'
    ],
    'events' : [
        'onRenderStart',
        'onRender',
        'onError',
        'onAbort',
        'onSuccess',
        'onSendStart',
        'onSendEnd',
        'onProcessEnd'
    ],
    'params' : {
        'node' : cm.node('div'),
        'name' : '',
        'animateDuration' : 'cm._config.animDuration',
        'showLoader' : true,
        'loaderDelay' : 'cm._config.loadDelay',
        'responseKey' : 'data',                                     // Instead of using filter callback, you can provide response array key
        'responseHTML' : true,                                      // If true, html will append automatically
        'ajax' : {
            'type' : 'json',
            'method' : 'POST',
            'url' : '',                                             // Request URL. Variables: %baseUrl%
            'params' : {                                            // Request URL. Variables: %baseUrl%, %request%, %response%
                'request' : '%request%',
                'response' : '%response%'
            }
        },
        'Com.Overlay' : {
            'position' : 'absolute',
            'autoOpen' : false,
            'removeOnClose' : true
        }
    },
    'strings' : {
        'server_error' : 'An unexpected error has occurred. Please try again later.'
    }
},
function(params){
    var that = this;

    that.nodes = {
        'container' : cm.node('div'),
        'request' : {
            'container' : cm.node('div'),
            'inner' : cm.node('div')
        },
        'buttons' : {
            'send' : cm.node('div')
        },
        'response' : {
            'container' : cm.node('div'),
            'inner' : cm.node('div')
        }
    };
    that.components = {};
    that.animations = {};

    that.ajaxHandler = null;
    that.isProcess = false;
    that.isRendering = false;
    that.loaderDelay = null;

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataNodes(that.params['node']);
        that.getDataConfig(that.params['node']);
        that.callbacksProcess();
        validateParams();
        that.addToStack(that.params['node']);
        that.triggerEvent('onRenderStart');
        render();
        that.triggerEvent('onRender');
    };

    var validateParams = function(){
        that.params['Com.Overlay']['container'] = that.nodes['container'];
    };

    var render = function(){
        // Overlay
        cm.getConstructor('Com.Overlay', function(classConstructor, className){
            that.components['loader'] = new classConstructor(that.params[className]);
        });
        // Animations
        that.animations['response'] = new cm.Animation(that.nodes['response']['container']);
        // Events
        cm.addEvent(that.nodes['buttons']['send'], 'click', that.send);
    };

    /* ******* CALLBACKS ******* */

    /* *** AJAX *** */

    that.callbacks.prepare = function(that, config){
        config = that.callbacks.beforePrepare(that, config);
        config['url'] = cm.strReplace(config['url'], {
            '%baseUrl%' : cm._baseUrl
        });
        config['params'] = cm.objectReplace(config['params'], {
            '%baseUrl%' : cm._baseUrl,
            '%request%' : cm.getFDO(that.nodes['request']['inner']),
            '%response%' : cm.getFDO(that.nodes['response']['inner'])
        });
        config = that.callbacks.afterPrepare(that, config);
        return config;
    };

    that.callbacks.beforePrepare = function(that, config){
        return config;
    };

    that.callbacks.afterPrepare = function(that, config){
        return config;
    };

    that.callbacks.request = function(that, config){
        config = that.callbacks.prepare(that, config);
        // Return ajax handler (XMLHttpRequest) to providing abort method.
        return cm.ajax(
            cm.merge(config, {
                'onStart' : function(){
                    that.callbacks.start(that);
                },
                'onSuccess' : function(response){
                    that.callbacks.response(that, config, response);
                },
                'onError' : function(){
                    that.callbacks.error(that, config);
                },
                'onAbort' : function(){
                    that.callbacks.abort(that, config);
                },
                'onEnd' : function(){
                    that.callbacks.end(that);
                }
            })
        );
    };

    that.callbacks.filter = function(that, config, response){
        var data,
            dataItem = cm.objectSelector(that.params['responseKey'], response);
        if(dataItem && !cm.isEmpty(dataItem)){
            data = dataItem;
        }
        return data;
    };

    that.callbacks.start = function(that, config){
        that.isProcess = true;
        // Show Loader
        if(that.params['showLoader']){
            that.loaderDelay = setTimeout(function(){
                if(that.components['loader'] && !that.components['loader'].isOpen){
                    that.components['loader'].open();
                }
            }, that.params['loaderDelay']);
        }
        that.triggerEvent('onSendStart');
    };

    that.callbacks.end = function(that, config){
        that.isProcess = false;
        // Hide Loader
        if(that.params['showLoader']){
            that.loaderDelay && clearTimeout(that.loaderDelay);
            if(that.components['loader'] && that.components['loader'].isOpen){
                that.components['loader'].close();
            }
        }
        that.triggerEvent('onSendEnd');
        that.triggerEvent('onProcessEnd', that.nodes['response']['inner']);
    };

    that.callbacks.response = function(that, config, response){
        if(!cm.isEmpty(response)){
            response = that.callbacks.filter(that, config, response);
        }
        if(!cm.isEmpty(response)){
            that.callbacks.success(that, response);
        }else{
            that.callbacks.error(that, config);
        }
    };

    that.callbacks.error = function(that, config){
        that.callbacks.renderError(that, config);
        that.triggerEvent('onError');
    };

    that.callbacks.success = function(that, response){
        that.callbacks.render(that, response);
        that.triggerEvent('onSuccess', response);
    };

    that.callbacks.abort = function(that, config){
        that.triggerEvent('onAbort');
    };

    /* *** RENDER *** */

    that.callbacks.renderTemporary = function(that){
        return cm.node('div', {'class' : 'form__temporary'});
    };

    that.callbacks.render = function(that, data){
        var nodes, temporary;
        if(that.params['responseHTML']){
            that.isRendering = true;
            temporary = that.callbacks.renderTemporary(that);
            nodes = cm.strToHTML(data);
            if(!cm.isEmpty(nodes)){
                if(cm.isNode(nodes)){
                    temporary.appendChild(nodes);
                }else{
                    while(nodes.length){
                        if(cm.isNode(nodes[0])){
                            temporary.appendChild(nodes[0]);
                        }else{
                            cm.remove(nodes[0]);
                        }
                    }
                }
            }
            that.callbacks.append(that, temporary);
        }
    };

    that.callbacks.renderError = function(that, config){
        if(that.params['responseHTML']){
            that.isRendering = true;
            var temporary = that.callbacks.renderTemporary(that);
            temporary.appendChild(
                cm.node('div', {'class' : 'cm__empty'}, that.lang('server_error'))
            );
            that.callbacks.append(that, temporary);
        }
    };

    that.callbacks.append = function(that, temporary){
        var height;
        // Wrap old content
        if(!that.nodes['response']['temporary']){
            that.nodes['response']['temporary'] = that.callbacks.renderTemporary(that);
            cm.forEach(that.nodes['response']['inner'].childNodes, function(node){
                cm.appendChild(node, that.nodes['response']['temporary']);
            });
            cm.appendChild(that.nodes['response']['temporary'], that.nodes['response']['inner']);
        }
        cm.removeClass(that.nodes['response']['temporary'], 'is-show', true);
        // Append temporary
        cm.appendChild(temporary, that.nodes['response']['inner']);
        cm.addClass(temporary, 'is-show', true);
        // Animate
        cm.removeClass(that.nodes['response']['container'], 'is-loaded', true);
        cm.addClass(that.nodes['response']['container'], 'is-show', true);
        height = temporary.offsetHeight;
        that.animations['response'].go({
            'style' : {'height' : [height, 'px'].join('')},
            'duration' : that.params['animateDuration'],
            'anim' : 'smooth',
            'onStop' : function(){
                that.nodes['response']['container'].style.height = '';
                cm.remove(that.nodes['response']['temporary']);
                cm.addClass(that.nodes['response']['container'], 'is-loaded', true);
                that.nodes['response']['temporary'] = temporary;
                that.isRendering = false;
            }
        });
    };

    /* ******* PUBLIC ******* */

    that.send = function(){
        if(that.isProcess){
            that.abort();
        }
        if(!that.isProcess && !that.isRendering){
            that.ajaxHandler = that.callbacks.request(that, cm.clone(that.params['ajax']));
        }
        return that;
    };

    that.abort = function(){
        if(that.ajaxHandler && that.ajaxHandler.abort){
            that.ajaxHandler.abort();
        }
        return that;
    };

    init();
});

cm.define('Com.Gallery', {
    'modules': [
        'Params',
        'Events',
        'Langs',
        'DataConfig',
        'DataNodes'
    ],
    'events': [
        'onRenderStart',
        'onRender',
        'onSet',
        'onChange',
        'onPrev',
        'onNext',
        'onItemLoad',
        'onItemSet'
    ],
    'params': {
        'container': cm.node('div'),
        'node': cm.node('div'),
        'data': [],
        'active': null,
        'duration': 500,
        'showCaption': true,
        'autoplay': true,
        'navigation': {
            'enable': true,
            'count': 0,
            'cycle': true,
            'showTitles': false,
        },
        'icons': {
            'prev': 'icon default prev',
            'next': 'icon default next',
            'zoom': 'icon cm-i default zoom'
        },

        'itemConstructor': 'Com.GalleryItem',
        'itemParams': {},

        'zoom': true,
        'zoomConstructor': 'Com.Zoom',
        'zoomParams': {
            'autoOpen': false,
            'removeOnClose': true,
            'documentScroll': true
        },

        'overlay': true,
        'overlayConstructor': 'Com.Overlay',
        'overlayParams': {
            'theme': 'gallery',
            'position': 'absolute',
            'showSpinner': true,
            'showContent': true,
            'autoOpen': false,
            'removeOnClose': true,
            'lazy': true
        },
    },
    'strings': {
        'next': 'Next',
        'prev': 'Previous',
        'zoom': 'Zoom',
    },
},
function(params){
    var that = this;

    that.components = {};

    that.currentItem = null;
    that.previousItem = null;
    that.temporaryItem = null;
    that.isProcess = false;
    that.items = [];

    that.nodes = {
        items: []
    };

    var init = function() {
        that.setParams(params);
        that.convertEvents(that.params.events);
        that.getDataNodes(that.params.node, that.params.nodesDataMarker, false);
        that.getDataConfig(that.params.node);
        that.triggerEvent('onRenderStart');
        render();
        // Collect items
        cm.forEach(that.nodes.items, that.collectItem);
        // Process config items
        cm.forEach(that.params.data, processItem);
        that.set(that.params.active);
        that.triggerEvent('onRender');
    };

    var render = function() {
        // Structure
        that.nodes.container = cm.node('div', {classes: 'com__gallery'},
            that.nodes.holder = cm.node('div', {classes: 'holder'}),
            that.nodes.bar = cm.node('div', {classes: ['com__gallery-controls', 'is-full']},
                cm.node('div', {classes: 'inner'},
                    that.nodes.prev = cm.node('div', {classes: ['bar-arrow', 'prev', 'is-hidden'], role: 'button', tabindex: 0, 'aria-label': that.msg('prev'), 'aria-hidden': 'true'},
                        cm.node('div', {classes: that.params.icons.prev})
                    ),
                    that.nodes.next = cm.node('div', {classes: ['bar-arrow', 'next', 'is-hidden'], role: 'button', tabindex: 0, 'aria-label': that.msg('next'), 'aria-hidden': 'true'},
                        cm.node('div', {classes: that.params.icons.next})
                    ),
                    that.nodes.zoom = cm.node('div', {classes: ['bar-zoom', 'is-hidden'], role: 'button', tabindex: 0, 'aria-label': that.msg('zoom'), 'aria-hidden': 'true'},
                        cm.node('div', {classes: that.params.icons.zoom})
                    )
                )
            )
        );

        // Arrow titles
        if (that.params.navigation.showTitles) {
            that.nodes.prev.title = that.msg('prev');
            that.nodes.next.title = that.msg('next');
            that.nodes.zoom.title = that.msg('zoom');
        }

        // Arrow click events
        cm.click.add(that.nodes.prev, function(event){
            cm.preventDefault(event);
            that.prev();
        });
        cm.click.add(that.nodes.next, function(event){
            cm.preventDefault(event);
            that.next();
        });

        // Zoom
        if (that.params.zoom) {
            cm.getConstructor(that.params.zoomConstructor, function(classConstructor) {
                that.components.zoom = new classConstructor(that.params.zoomParams);
                cm.click.add(that.nodes.zoom, function(event){
                    cm.preventDefault(event);
                    that.zoom();
                });
                cm.removeClass(that.nodes.zoom, 'is-hidden');
                that.nodes.zoom.setAttribute('aria-hidden', 'false');
            });
        }

        // Overlay
        if (that.params.overlay) {
            cm.getConstructor(that.params.overlayConstructor, function(classConstructor) {
                that.components.overlay = new classConstructor(
                    cm.merge(that.params.overlayParams, {
                        container: that.nodes.container,
                    })
                );
            });
        }

        // Append
        that.params.container.appendChild(that.nodes.container);
    };

    var processItem = function(params) {
        params = cm.merge(that.params.itemParams, params);
        params.index = cm.isNumber(params.index) ? params.index : that.items.length;

        cm.getConstructor(that.params.itemConstructor, function(classConstructor) {
            that.items[params.index] = new classConstructor(
                cm.merge(params, {
                    showCaption: that.params.showCaption,
                    events: {
                        onClick: function(item) {
                            set(item.getParams('index'));
                        },
                        onLoad: function(item) {
                            setItem(item);
                        },
                        onError: function(item) {
                            setItem(item);
                        }
                    },
                })
            );
        });
    };

    var set = function(i) {
        if (that.isProcess) {
            return;
        }
        that.isProcess = true;

        // Set temporary item
        var previous = that.currentItem;
        var current = that.items[i];
        that.temporaryItem = current;

        // API onSet
        that.triggerEvent('onSet', {
            current: current.getParams(),
            previous: previous ? previous.getParams() : null
        });

        if (current !== previous) {
            // API onSet
            that.triggerEvent('onChange', {
                current: current.getParams(),
                previous: previous ? previous.getParams() : null
            });
            // Set by type
            if (current.getParams('type') === 'image') {
                setItemImage(current);
            } else if (current.getParams('type') === 'video') {
                setItemVideo(current);
            } else {
                setItemIframe(current);
            }
        } else {
            that.isProcess = false;
            current.appendTo(that.nodes.holder);
        }
    };

    var setItemImage = function(item) {
        cm.replaceClass(that.nodes.bar, 'is-partial', 'is-full');
        if (item.isLoaded()) {
            setItem(item);
        } else {
            that.setLoader(item);
        }
    };

    var setItemVideo = function(item) {
        cm.replaceClass(that.nodes.bar, 'is-full', 'is-partial');
        if (item.isLoaded()) {
            setItem(item);
        } else {
            that.setLoader(item);
        }
    };

    var setItemIframe = function(item) {
        cm.replaceClass(that.nodes.bar, 'is-full', 'is-partial');
        item.appendTo(that.nodes.holder);
        that.setLoader(item);
    };

    var setItem = function(item) {
        that.temporaryItem = null;
        that.previousItem = that.currentItem;
        that.currentItem = item;

        that.triggerEvent('onItemLoad', that.currentItem.getParams());

        // Embed item content
        if (that.previousItem) {
            that.previousItem.setZIndex(1);
            that.currentItem.setZIndex(2);
        }
        if (cm.inArray(['image', 'video'], that.currentItem.getParams('type'))) {
            that.currentItem.appendTo(that.nodes.holder);
        }

        // Play video
        if (that.currentItem.getParams('type') === 'video') {
            that.currentItem.play();
        }

        // Toggle arrows visibility
        that.setArrows();

        // Remove loader
        that.removeLoader();

        // Animate item
        that.currentItem
            .getAnimation()
            .go({
                style: {opacity: 1}, anim: 'smooth', duration: that.params.duration, onStop: function() {
                    if (!that.isProcess) {
                        return;
                    }
                    
                    // Remove old item
                    if (that.previousItem) {
                        that.previousItem.setOpacity(0);
                        that.previousItem.remove();
                    }

                    that.triggerEvent('onItemSet', that.currentItem.getParams());
                    that.isProcess = false;
                }
            });
    };

    /* ******* MAIN ******* */

    that.set = function(i) {
        if (cm.isNumber(i) && that.items[i]) {
            set(i);
        }
        return that;
    };

    that.next = function() {
        if (that.isProcess) {
            return;
        }

        // API - onNext
        var item = that.currentItem || that.temporaryItem;
        var index = item.getParams('index');
        that.triggerEvent('onNext', {
            current: item.getParams(),
            index: index,
        });

        if (!that.params.navigation.enable) {
            return that;
        }

        if (that.params.navigation.cycle) {
            set(index === that.items.length - 1 ? 0 : index + 1);
        } else if (index < that.items.length - 1) {
            set(index + 1);
        }
        return that;
    };

    that.prev = function() {
        if (that.isProcess) {
            return;
        }

        // API - onPrev
        var item = that.currentItem || that.temporaryItem;
        var index = item.getParams('index');
        that.triggerEvent('onPrev', {
            current: item.getParams(),
            index: index,
        });

        if (!that.params.navigation.enable) {
            return that;
        }

        if (that.params.navigation.cycle) {
            set(index === 0 ? that.items.length - 1 : index - 1);
        } else if (index > 0) {
            set(index - 1);
        }
        return that;
    };

    that.zoom = function() {
        if (!that.components.zoom) {
            return that;
        }
        that.components.zoom
            .set(that.currentItem.getParams('src'))
            .open();
        return that;
    };

    that.getIndex = function() {
        return that.currentItem.getParams('index');
    };

    that.getLength = function() {
        return that.items.length;
    };

    that.setCount = function(count) {
        that.params.navigation.count = count;
        that.setArrows();
        return that;
    };

    that.getCount = function() {
        return Math.max(that.getLength(), that.params.navigation.count);
    };

    that.setArrows = function() {
        var index = that.currentItem.getParams('index');
        var count = that.getCount();

        var showPrev = that.params.navigation.cycle || count < 2 ? count > 1 : index > 0;
        that.nodes.prev.disabled = !showPrev;
        that.nodes.prev.setAttribute('aria-hidden', !showPrev);
        cm.toggleClass(that.nodes.prev, 'is-hidden', !showPrev);

        var showNext = that.params.navigation.cycle || count < 2 ? count > 1 : index < count - 1;
        that.nodes.next.disabled = !showNext;
        that.nodes.next.setAttribute('aria-hidden', !showNext);
        cm.toggleClass(that.nodes.next, 'is-hidden', !showNext);
        return that;
    };
    
    that.setLoader = function(item) {
        if (that.params.overlay) {
            that.components.overlay.open();
        }
        if (item) {
            item.load();
        }
        return that;
    };

    that.removeLoader = function(item) {
        if (that.params.overlay) {
            that.components.overlay.close();
        }
        if (item) {
            item.abort();
        }
        return that;
    };

    that.toggleLoader = function(value) {
        if (value) {
            that.setLoader();
        } else {
            that.removeLoader();
        }
        return that;
    }

    that.stop = function() {
        that.isProcess = false;
        if (that.temporaryItem) {
            that.temporaryItem.destruct();
            that.temporaryItem.remove();
        }
        that.removeLoader(that.temporaryItem);
        return that;
    };

    that.clear = function() {
        that.stop();
        if (that.currentItem) {
            that.currentItem.destruct();
            that.currentItem.remove();
        }
        that.currentItem = null;
        that.previousItem = null;
        that.temporaryItem = null;
        that.items = [];
        return that;
    };

    that.add = function(item) {
        item = cm.merge({
            index: null,
            page: null,
            link: cm.node('a'),
            src: '',
            title: '',
            data: {},
        }, item);
        processItem(item);
        return that;
    };

    that.collect = function(node, params) {
        if (!cm.isNode(node)) {
            return that;
        }

        // Validate params
        params = cm.merge({
            fromIndex: that.items.length,
            fromPage: 0,
        }, params);

        // Collect items
        var nodes = cm.getNodes(node);
        if (!cm.isEmpty(nodes.items)) {
            cm.forEach(nodes.items, function(item, i) {
                item.index = params.fromIndex + i;
                item.page = params.fromPage;
                that.collectItem(item);
            });
        }
        return that;
    };

    that.collectItem = function(item) {
        // Validate item
        if (cm.isNode(item.container)) {
            item = cm.merge(that.getNodeDataConfig(item.container), item);
        }
        if (cm.isEmpty(item.link)) {
            item.link = cm.node('a');
        }
        if (cm.isEmpty(item.src)) {
            item.src = item.link.getAttribute('href') || '';
        }
        if (cm.isEmpty(item.title)) {
            item.title = item.link.getAttribute('title') || '';
        }

        // Process
        if (!that.hasItemCollected(item)) {
            processItem(item);
        }
        return that;
    };

    that.hasItemCollected = function(item) {
        return that.items.some(function(savedItem) {
            return savedItem.getParams('link') === item.link;
        });
    };

    init();
});

cm.define('Com.GalleryItem', {
    extend: 'Com.AbstractController',
    events: [
        'onClick',
        'onLoad',
        'onError',
        'onAbort'
    ],
    params: {
        renderStructure: true,
        embedStructureOnRender: false,
        controllerEvents: true,
        removeOnDestruct: false,

        index: null,
        type: null,        // image | iframe
        src: null,
        srcset: [],
        sizes: [],
        title: null,
        info: null,
        mime: null,
        link: null,

        showCaption: false,
        position: 'is-centered',
        adaptive: false,
        adaptiveFrom: cm._config.screenTabletPortrait,
        adaptivePosition: 'is-contain',

        extensions: {
            image: cm._config.fileExtensions.image,
            video: cm._config.fileExtensions.video,
        },
        types: {
            image: cm._config.fileTypes.image,
            video: cm._config.fileTypes.video,
        },
    },
},
function() {
    Com.AbstractController.apply(this, arguments);
});

cm.getConstructor('Com.GalleryItem', function(classConstructor, className, classProto, classInherit) {
    classProto.onConstructStart = function() {
        var that = this;
        that.hasLoaded = false;
        that.hasProcess = false;

        // Binds
        that.loadSuccessEventHanlder = that.loadSuccessEvent.bind(that);
        that.loadErrorEventHanlder = that.loadErrorEvent.bind(that);
    };

    classProto.onValidateParams = function() {
        var that = this;

        // Srcsets
        if (!cm.isEmpty(that.params.sizes)) {
            that.params.size = that.params.sizes
                .map(function(item) {
                    return item.join(' ');
                })
                .join(', ');
        }

        if (!cm.isEmpty(that.params.srcset)) {
            that.params.srcset = that.params.srcset
                .map(function(item) {
                    return item.join(' ');
                })
                .join(', ');
        }

        // Get url
        try{
            that.params.url = new URL(that.params.src);
        }catch(e){
        }

        // Check type
        if(that.isImage()){
            that.params.type = 'image';
        }else if(that.isVideo()){
            that.params.type = 'video';
        }else{
            that.params.type = 'iframe';
        }
    };

    classProto.onRedraw = function() {
        var that = this;
        if (that.params.adaptive) {
            if (cm._pageSize.winWidth > that.params.adaptiveFrom) {
                cm.replaceClass(that.nodes.container, that.params.adaptivePosition, that.params.position);
            } else {
                cm.replaceClass(that.nodes.container, that.params.position, that.params.adaptivePosition);
            }
        }
    };

    classProto.renderView = function() {
        var that = this;

        // Link node
        if (cm.isNode(that.params.link)) {
            that.nodes.link = that.params.link;
        } else {
            that.nodes.link = cm.node('a');
        }

        // Structure
        that.nodes.container = cm.node('div', {classes: 'pt__image'},
            that.nodes.inner = cm.node('div', {classes: 'inner'})
        );
        cm.addClass(that.nodes.container, that.params.position);

        // Render by type
        if (that.params.type === 'image') {
            that.nodes.content = cm.node('img', {classes: 'descr', alt: that.params.title, title: that.params.title});
        } else if(that.params.type === 'video') {
            that.nodes.content = cm.node('video', {classes: 'descr', preload: 'none', playsinline: true});
            that.nodes.content.playsinline = true;
            that.nodes.content.playsInline = true;
            that.nodes.content.autoplay = true;
            that.nodes.content.controls = true;
        } else {
            that.nodes.content = cm.node('iframe', {classes: 'descr', allowfullscreen: true});
        }
        cm.appendChild(that.nodes.content, that.nodes.inner);

        // Caption
        if (that.params.showCaption && that.params.type === 'image' && !cm.isEmpty(that.params.title)) {
            that.nodes.caption = cm.node('div', {classes: 'title'},
                cm.node('div', {classes: 'inner'}, that.params.title)
            );
            cm.appendChild(that.nodes.caption, that.nodes.inner);
        }
    };

    classProto.renderViewModel = function(){
        var that = this;
        classInherit.prototype.renderViewModel.apply(that, arguments);

        // Set image on thumb click
        cm.addEvent(that.nodes.link, 'click', that.linkClickEvent.bind(that), true, true);

        // Init animation
        that.components.animation = new cm.Animation(that.nodes.container);
    };

    /******* EVENTS *******/

    classProto.linkClickEvent = function(e) {
        var that = this;
        cm.preventDefault(e);
        that.triggerEvent('onClick');
    };

    classProto.loadSuccessEvent = function() {
        var that = this;
        if (!that.hasProcess) {
            return that;
        }

        that.hasProcess = false;
        that.hasLoaded = true;
        that.triggerEvent('onLoad');
    };

    classProto.loadErrorEvent = function() {
        var that = this;
        if (!that.hasProcess) {
            return that;
        }

        that.hasProcess = false;
        that.hasLoaded = false;
        that.triggerEvent('onError');
    };

    /******* HELPERS *******/

    classProto.isImage = function() {
        var that = this;
        var regexp = new RegExp('\\.(' + that.params.extensions.image + ')$', 'gi');
        return (that.params.src && regexp.test(that.params.src)) ||
            (that.params.url && regexp.test(that.params.url.pathname)) ||
            (that.params.src && /^data:image/gi.test(that.params.src)) ||
            (that.params.mime && that.params.types.image.test(that.params.mime)) ||
            that.params.type === 'image';
    };

    classProto.isVideo = function() {
        var that = this;
        var regexp = new RegExp('\\.(' + that.params.extensions.video + ')$', 'gi');
        return (that.params.src && regexp.test(that.params.src)) ||
            (that.params.url && regexp.test(that.params.url.pathname)) ||
            (that.params.src && /^data:video/gi.test(that.params.src)) ||
            (that.params.mime && that.params.types.video.test(that.params.mime)) ||
            that.params.type === 'video';
    };

    classProto.loadVideo = function() {
        var that = this;
        cm.addEvent(that.nodes.content, 'loadedmetadata', that.loadSuccessEventHanlder);
        cm.addEvent(that.nodes.content, 'error', that.loadErrorEventHanlder);
        that.nodes.content.videoSource = cm.node('source', {src: that.params.src});
        cm.appendChild(that.nodes.content.videoSource, that.nodes.content);
    };

    classProto.loadMedia = function() {
        var that = this;
        cm.addEvent(that.nodes.content, 'load', that.loadSuccessEventHanlder);
        cm.addEvent(that.nodes.content, 'error', that.loadErrorEventHanlder);
        if (!cm.isEmpty(that.params.sizes)) {
            that.nodes.content.sizes = that.params.sizes;
        }
        if (!cm.isEmpty(that.params.srcset)) {
            that.nodes.content.srcset = that.params.srcset;
        }
        that.nodes.content.src = that.params.src;
    };

    /******* PUBLIC *******/

    classProto.load = function() {
        var that = this;
        if (that.hasProcess) {
            return that;
        }

        that.hasProcess = true;
        if (that.hasLoaded && cm.inArray(['image', 'video'], that.params.type)) {
            that.loadSuccessEvent();
        } else {
            if (that.params.type === 'video') {
                that.loadVideo();
            } else {
                that.loadMedia();
            }
        }
        return that;
    };

    classProto.abort = function() {
        var that = this;
        if (!that.hasProcess) {
            return that;
        }

        that.hasProcess = false;
        cm.removeEvent(that.nodes.content, 'load', that.loadSuccessEventHanlder);
        cm.removeEvent(that.nodes.content, 'error', that.loadErrorEventHanlder);
        that.triggerEvent('onAbort');
        return that;
    };

    classProto.play = function() {
        var that = this;
        if (that.hasProcess) {
            return that;
        }
        if (that.params.type === 'video' && that.hasLoaded) {
            that.nodes.content.play();
        }
        return that;
    };

    classProto.remove = function() {
        var that = this;
        cm.remove(that.nodes.container);
        return that;
    };

    classProto.appendTo = function(container, insertMethod) {
        var that = this;
        insertMethod = !cm.isUndefined(insertMethod) ? insertMethod : 'insertLast';
        if (cm.isNode(container)) {
            cm[insertMethod](that.nodes.container, container);
            that.redraw();
        }
        return that;
    };

    classProto.isLoaded = function() {
        var that = this;
        return that.hasLoaded;
    };

    classProto.getContainer = function() {
        var that = this;
        return that.nodes.container;
    };

    classProto.getAnimation = function() {
        var that = this;
        return that.components.animation
    };

    classProto.setZIndex = function(value) {
        var that = this;
        that.nodes.container.style.zIndex = value;
        return that;
    };

    classProto.setOpacity = function(value) {
        var that = this;
        that.nodes.container.style.opacity = value;
        return that;
    };
});

cm.define('Com.GalleryLayout', {
    'modules' : [
        'Params',
        'Events',
        'DataConfig',
        'DataNodes',
        'Stack'
    ],
    'events' : [
        'onRenderStart',
        'onRender',
        'onChange'
    ],
    'params' : {
        'node' : cm.node('div'),
        'barDirection' : 'horizontal',      // horizontal | vertical
        'hasBar' : true,
        'Com.Gallery' : {},
        'Com.Scroll' : {
            'step' : 25,
            'time' : 25
        }
    }
},
function(params){
    var that = this,
        components = {},
        items = [];
    
    that.nodes = {
        'inner' : cm.node('div'),
        'preview-inner' : cm.node('div'),
        'bar-inner' : cm.node('div'),
        'bar-items' : []
    };

    /* *** CLASS FUNCTIONS *** */

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataNodes(that.params['node'], that.params['nodesDataMarker'], false);
        that.getDataConfig(that.params['node']);
        that.triggerEvent('onRenderStart');
        collectItems();
        render();
        that.addToStack(that.params['node']);
        that.triggerEvent('onRender');
    };

    var render = function(){
        // Scroll
        components['scroll'] = new Com.Scroll(
            cm.merge(that.params['Com.Scroll'], {
                'nodes' : that.nodes['ComScroll']
            })
        );
        // Gallery
        components['gallery'] = new Com.Gallery(
                cm.merge(that.params['Com.Gallery'], {
                    'container' : that.nodes['preview-inner'],
                    'data' : items
                })
            )
            .addEvent('onChange', onChange)
            .set(0);
    };

    var collectItems = function(){
        cm.forEach(that.nodes['bar-items'], function(item){
            item['title'] = item['link']? item['link'].getAttribute('title') || '' : '';
            item['src'] = item['link']? item['link'].getAttribute('href') || '' : '';
            items.push(item);
        });
    };

    var onChange = function(gallery, data){
        var item = data['current'],
            left,
            top;
        
        if(that.params['hasBar']){
            // Thumbs classes
            if(data['previous']){
                cm.removeClass(data['previous']['container'], 'active');
            }
            cm.addClass(item['container'], 'active');
            // Move bar
            if(that.params['barDirection'] == 'vertical'){
                top = item['container'].offsetTop - (that.nodes['inner'].offsetHeight / 2) + (item['container'].offsetHeight / 2);
                components['scroll'].scrollY(top);
            }else{
                left = item['container'].offsetLeft - (that.nodes['inner'].offsetWidth / 2) + (item['container'].offsetWidth / 2);
                components['scroll'].scrollX(left);
            }
        }
        // API onSet event
        that.triggerEvent('onChange', data);
    };

    /* ******* MAIN ******* */

    init();
});

cm.define('Com.GalleryPopup', {
    extend: 'Com.AbstractController',
    events: [
        'onOpen',
        'onOpenEnd',
        'onClose',
        'onChange',
        'onPrev',
        'onNext',
        'onLoad',
    ],
    params: {
        controllerEvents: true,
        renderStructure: true,
        embedStructure: 'append',
        embedStructureOnRender: false,
        removeOnDestruct: false,

        size: 'fullscreen',                   // fullscreen | auto
        aspectRatio: 'auto',                  // auto | 1x1 | 4x3 | 3x2 | 16x10 | 16x9 | 2x1 | 21x9 | 35x10 | 3x4 | 2x3 | 10x16 | 9x16 | 1x2
        theme: 'theme-black',

        data: [],
        active: null,
        showCounter: true,
        showTitle: true,
        showZoom: true,
        autoPlay: false,
        navigation: {},
        openOnSelfClick: false,

        placeholderConstructor: 'Com.Dialog',
        placeholderParams: {
            width: 700,
            scroll: false,
            autoOpen: false,
            titleOverflow: true,
            closeOnBackground: true,
            className: 'com__gallery-popup'
        },

        galleryConstructor: 'Com.Gallery',
        galleryParams: {
            showCaption: false
        },

        overlayParams: {},
        galleryItemParams: {},
    }
},
function() {
    Com.AbstractController.apply(this, arguments);
});

cm.getConstructor('Com.GalleryPopup', function(classConstructor, className, classProto, classInherit){
    classProto.onConstructStart = function(){
        var that = this;

        // Variables
        that.views = {};
        that.currentItem = null;

        // Bind context
        that.openHandler = that.open.bind(that);
        that.closeHandler = that.close.bind(that);
        that.nextHandler = that.next.bind(that);
        that.prevHandler = that.prev.bind(that);
        that.keyPressEventHandler = that.keyPressEvent.bind(that);
    };

    classProto.onConstructEnd = function(){
        var that = this;
        that.addToStack(that.params.node);
    };

    classProto.onValidateParams = function(){
        var that = this;
        that.params.galleryParams.zoom = that.params.showZoom;
        that.params.galleryParams.autoplay = that.params.autoPlay;
        that.params.galleryParams.navigation = that.params.navigation;
        that.params.galleryParams.overlayParams = that.params.overlayParams;
        that.params.galleryParams.itemParams = that.params.galleryItemParams;
        that.params.placeholderParams.theme = that.params.theme;
        that.params.placeholderParams.size = that.params.size;
    };

    classProto.onDestruct = function(){
        var that = this;
        that.components.dialog && cm.isFunction(that.components.dialog.destruct) && that.components.dialog.destruct();
        that.components.gallery && cm.isFunction(that.components.gallery.destruct) && that.components.gallery.destruct();
    };

    classProto.renderView = function(){
        var that = this;

        // Structure
        that.nodes.container = cm.node('div', {classes: 'com__gallery-preview'},
            that.nodes.inner = cm.node('div', {classes: 'inner'})
        );

        // Set aspect ratio
        if (that.params.aspectRatio !== 'auto') {
            cm.addClass(that.nodes.container, ['cm__aspect', that.params.aspectRatio].join('-'));
        }
    };

    classProto.renderViewModel = function(){
        var that = this;

        // Call parent method
        classInherit.prototype.renderViewModel.apply(that, arguments);

        // Dialog
        cm.getConstructor(that.params.placeholderConstructor, function(classConstructor){
            that.components.dialog = new classConstructor(
                cm.merge(that.params.placeholderParams, {
                    content: that.nodes.container,
                    events: {
                        onOpen: function(){
                            cm.addEvent(window, 'keydown', that.keyPressEventHandler);
                            that.triggerEvent('onOpen');
                        },
                        onClose: function(){
                            that.components.gallery.stop();
                            cm.removeEvent(window, 'keydown', that.keyPressEventHandler);
                            that.triggerEvent('onClose');
                        }
                    }
                })
            );
        });

        // Gallery
        cm.getConstructor(that.params.galleryConstructor, function(classConstructor) {
            that.components.gallery = new classConstructor(
                cm.merge(that.params.galleryParams, {
                    node: that.params.node,
                    container: that.nodes.inner,
                    data: that.params.data,
                    active: that.params.active,
                    events: {
                        onChange: function(gallery, data) {
                            that.changeEvent(data.current, data.previous);
                        },
                        onSet: function() {
                            that.components.dialog.open();
                        },
                        onPrev: function(gallery, data) {
                            that.triggerEvent('onPrev', data);
                        },
                        onNext: function(gallery, data) {
                            that.triggerEvent('onNext', data);
                        },
                        onItemLoad: function(gallery, data) {
                            that.loadEvent(data);
                        },
                    }
                })
            );
        });

        if (that.params.openOnSelfClick) {
            cm.click.add(that.params.node, that.openHandler);
        }
    };

    /******* EVENTS *******/

    classProto.changeEvent = function(galleryItem){
        var that = this;
        that.currentItem = galleryItem;
        that.views.info = that.renderInfoView(that.currentItem);
        that.triggerEvent('onChange', that.currentItem);
    };

    classProto.loadEvent = function(galleryItem) {
        var that = this;
        that.triggerEvent('onLoad', galleryItem);
    };

    classProto.keyPressEvent = function(event){
        var that = this;
        cm.handleKey(event, 'left', function(){
            that.components.dialog.isFocus && that.prev();
        });
        cm.handleKey(event, 'right', function(){
            that.components.dialog.isFocus && that.next();
        });
    };

    /******* INFO VIEW *******/

    classProto.renderInfoView = function(galleryItem) {
        var that = this;
        var item = {
            data: galleryItem,
            nodes: {},
        };

        // Structure
        item.nodes.container = cm.node('div', {classes: 'com__gallery-popup__title'});

        if(that.params.showCounter){
            item.counter = [(item.data.index + 1), that.components.gallery.getCount()].join('/');
            item.nodes.counter = cm.node('span', {classes: 'counter'}, item.counter);
            cm.appendChild(item.nodes.counter, item.nodes.container);
        }

        if(that.params.showTitle){
            item.nodes.title = cm.node('span', {classes: 'title'}, item.data.title);
            if(that.params.showCounter){
                item.nodes.sepaartor = cm.node('span', {classes: 'separator'});
                cm.appendChild(item.nodes.sepaartor, item.nodes.container);
            }
            cm.appendChild(item.nodes.title, item.nodes.container);
        }

        // Append
        if(that.params.showCounter || that.params.showTitle){
            that.components.dialog.setTitle(item.nodes.container);
        }

        return item;
    };

    /******* PUBLIC *******/

    classProto.open = function(){
        var that = this;
        that.set(that.params.active || 0);
        return that;
    };

    classProto.close = function(){
        var that = this;
        that.components.dialog.close();
        return that;
    };

    classProto.set = function(i){
        var that = this;
        that.components.gallery.set(i);
        return that;
    };

    classProto.next = function(){
        var that = this;
        that.components.gallery.next();
        return that;
    };

    classProto.prev = function(){
        var that = this;
        that.components.gallery.prev();
        return that;
    };

    classProto.add = function(item){
        var that = this;
        that.components.gallery.add(item);
        return that;
    };

    classProto.getIndex = function() {
        const that = this;
        return that.components.gallery.getIndex();
    };

    classProto.getLength = function() {
        const that = this;
        return that.components.gallery.getLength();
    };

    classProto.setCount = function(count) {
        const that = this;
        that.components.gallery.setCount(count);
        return that;
    };

    classProto.getCount = function() {
        const that = this;
        return that.components.gallery.getCount();
    };

    classProto.toggleLoader = function(value) {
        var that = this;
        that.components.gallery.toggleLoader(value);
        return that;
    };

    classProto.collect = function(node, params){
        var that = this;
        that.components.gallery.collect(node, params);
        return that;
    };

    classProto.collectItem = function(item){
        var that = this;
        that.components.gallery.collectItem(item);
        return that;
    };

    classProto.clear = function(){
        var that = this;
        that.components.gallery.clear();
        return that;
    };

    classProto.getGallery = function() {
        var that = this;
        return that.components.gallery;
    };

});

cm.define('Com.GalleryPopupContainer', {
    extend: 'Com.AbstractContainer',
    params: {
        constructor: 'Com.GalleryPopup',
        destructOnClose: false,
        data: {},
        constructorParams: {},
    },
},
function() {
    Com.AbstractContainer.apply(this, arguments);
});

cm.getConstructor('Com.GalleryPopupContainer', function(classConstructor, className, classProto, classInherit) {
    classProto.constructController = function(classConstructor) {
        var that = this;
        return new classConstructor(
            cm.merge(that.params.constructorParams, {
                data: !cm.isArray(that.params.data) ? [that.params.data] : that.params.data,
            })
        );
    };

    classProto.set = function(data) {
        var that = this;
        that.params.data = data;
        if (that.components.controller) {
            that.components.controller.clear();
            that.components.controller.add(data);
            that.components.controller.set(0);
        }
        return that;
    };
});

cm.define('Com.GalleryScrollPagination', {
    'extend' : 'Com.ScrollPagination',
    'params' : {
        'renderStructure' : true,
        'embedStructureOnRender' : true,
        'pageTag' : 'ul',
        'gridClass' : null,
        'columns' : 4,
        'indent' : '12px',
        'adaptive' : true
    }
},
function(params){
    var that = this;
    // Call parent class construct in current context
    Com.ScrollPagination.apply(that, arguments);
});

cm.getConstructor('Com.GalleryScrollPagination', function(classConstructor, className, classProto, classInherit){
    classProto.setAttributes = function(){
        var that = this;
        // Call parent method - renderViewModel
        classInherit.prototype.setAttributes.apply(that, arguments);
        // Content
        cm.addClass(that.nodes['pages'], 'pt__grid');
        cm.addClass(that.nodes['pages'], ['col', that.params['columns']].join('-'));
        cm.addClass(that.nodes['pages'], ['indent', that.params['indent']].join('-'));
        cm.addClass(that.nodes['pages'], that.params['gridClass']);
        if(that.params['adaptive']){
            cm.addClass(that.nodes['pages'], 'is-adaptive');
        }else{
            cm.addClass(that.nodes['pages'], 'is-not-adaptive');
        }
    };
});
cm.define('Com.Geocoder', {
    'extend' : 'Com.AbstractController',
    'events' : [
        'onLoad'
    ],
    'params' : {
        'controllerEvents' : true,
        'renderStructure' : false,
        'embedStructureOnRender' : false,
        'apiKey' : '',
        'apiLink' : 'https://maps.googleapis.com/maps/api/js?key=%key%'
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractController.apply(that, arguments);
});

cm.getConstructor('Com.Geocoder', function(classConstructor, className, classProto, classInherit){
    classProto.onConstructStart = function(){
        var that = this;
        // Binds
        that.loadScriptEndHanlder = that.loadScriptEnd.bind(that);
    };

    classProto.onValidateParams = function(){
        var that = this;
        that.apiLink = cm.strReplace(that.params['apiLink'], {'%key%' : that.params['apiKey']});
    };

    classProto.renderViewModel = function(){
        var that = this;
        // Call parent method - renderViewModel
        classInherit.prototype.renderViewModel.apply(that, arguments);
        // Load Google Maps Script
        cm.loadScript({
            'path' : 'google.maps',
            'src' : that.apiLink,
            'callback' : that.loadScriptEndHanlder
        });
    };

    classProto.loadScriptEnd = function(handler){
        var that = this;
        that.components['geocoder'] = new handler.Geocoder();
        that.triggerEvent('onLoad');
    };

    classProto.get = function(data, error, success){
        var that = this,
            args = arguments;
        if(that.components['geocoder']){
            return that.process.apply(that, args);
        }else{
            return cm.loadScript({
                'path' : 'google.maps',
                'src' : that.apiLink,
                'callback' : function(){
                    that.process.apply(that, args);
                }
            });
        }
    };

    classProto.process = function(data, success, error){
        var that = this;
        return that.components['geocoder'].geocode(data, function(results, status) {
            if(status === 'OK'){
                cm.isFunction(success) && success(results, status);
            }else{
                cm.isFunction(error) && error(status);
            }
        });
    };
});
cm.define('Com.Geolocation', {
    extend: 'Com.AbstractController',
    events: [
        'onComplete',
        'onRequest',
        'onSuccess',
        'onError',
    ],
    params: {
        controllerEvents: true,
        renderStructure: false,
        embedStructureOnRender: false,

        useDefault: true,
        default: {},
        autoRequest: true,

        apiKey: '',
        apiLink: 'https://maps.googleapis.com/maps/api/js?key=%key%',

        geocoder: {
            enable: false,
            constructor: 'Com.Geocoder',
            constructorParams: {},
        },

        options: {
            enableHighAccuracy: false,
            maximumAge: 30000,
            timeout: 27000,
        },
    },
},
function() {
    Com.AbstractController.apply(this, arguments);
});

cm.getConstructor('Com.Geolocation', function(classConstructor, className, classProto, classInherit) {
    classProto.onValidateParams = function() {
        var that = this;
        that.params.geocoder.constructorParams.apiLink = that.params.apiLink;
        that.params.geocoder.constructorParams.apiKey = that.params.apiKey;
    };

    classProto.renderViewModel = function() {
        var that = this;

        // Call parent method
        classInherit.prototype.renderViewModel.apply(that, arguments);

        // Init geocoder
        if (that.params.geocoder.enable) {
            cm.getConstructor(that.params.geocoder.constructor, function(classConstructor) {
                that.components.geocoder = new classConstructor(that.params.geocoder.constructorParams);
            });
        }

        // Get user location
        if (that.params.autoRequest) {
            that.request();
        }
    };

    classProto.request = function() {
        var that = this;

        that.triggerEvent('onRequest');

        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
                function(data) {
                    var location = {
                        lat: data.coords.latitude,
                        lng: data.coords.longitude,
                    };
                    that.process(location, 'success');
                },
                function() {
                    that.process(that.params.default, 'error');
                },
                that.params.options
            );
        } else {
            that.process(that.params.default, 'error');
        }
    };

    classProto.process = function(location, status) {
        var that = this;

        // Request location data from the geocoder
        if (
            that.params.geocoder.enable &&
            (that.params.useDefault || status === 'success')
        ) {
            that.requestGeocoder(location);
            return;
        }

        that.triggerEvent('onComplete', location, null, status);
        if (status === 'success') {
            that.triggerEvent('onSuccess', location);
        } else {
            that.triggerEvent('onError', location);
        }
    };

    classProto.requestGeocoder = function(location) {
        var that = this;
        var options = {
            location: location,
        };
        that.components.geocoder.get(
            options,
            function(data) {
                that.triggerEvent('onComplete', location, data, 'success');
                that.triggerEvent('onSuccess', location, data);
            },
            function() {
                that.triggerEvent('onComplete', location, null, 'error');
                that.triggerEvent('onError', location);
            }
        );
    };
});

cm.define('Com.Glossary', {
    'modules' : [
        'Params',
        'Events',
        'DataConfig',
        'DataNodes'
    ],
    'require' : [
        'Com.Tooltip'
    ],
    'events' : [
        'onRender'
    ],
    'params' : {
        'node' : cm.node('div'),
        'showTitle' : true,
        'Com.Tooltip' : {
            'className' : 'com__glossary__tooltip',
            'targetEvent' : 'hover'
        }
    }
},
function(params){
    var that = this;

    that.components = {};
    that.nodes = {
        'container' : cm.node('div'),
        'title' : cm.node('div'),
        'content' : cm.node('div')
    };

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataNodes(that.params['node']);
        that.getDataConfig(that.params['node']);
        render();
    };

    var render = function(){
        // Init tooltip
        that.components['tooltip'] = new Com.Tooltip(
            cm.merge(that.params['Com.Tooltip'], {
                'target' : that.nodes['container'],
                'content' : that.nodes['content'],
                'title' : that.params['showTitle']? that.nodes['title'].cloneNode(true) : ''
            })
        );
        that.triggerEvent('onRender', {});
    };

    /* ******* MAIN ******* */

    init();
});

cm.define('Com.Gridlist', {
    modules: [
        'Params',
        'Events',
        'Langs',
        'Structure',
        'DataConfig',
        'Callbacks',
        'Stack'
    ],
    events: [
        'onSort',
        'onCheckAll',
        'onUnCheckAll',
        'onCheck',
        'onUnCheck',
        'onRender',
        'onRenderStart',
        'onRenderEnd',
        'onLoadStart',
        'onLoadSuccess',
        'onLoadError',
        'onLoadEnd',
        'onDataFilterEnd',
        'onPageRenderStart',
        'onPageRenderEnd',
        'onRenderTitleItem',
        'onRenderFilterItem',
        'onEmpty',
        'onColumnsChange',
        'onColumnsResize'
    ],
    params: {
        node: cm.node('div'),
        container: null,
        embedStructure: 'append',
        customEvents: true,
        destructOnRemove: false,
        name: '',

        // Data
        uniqueKey: 'id',                                         // Unique data key
        data: [],                                                // Array for render static data
        cols: [],                                                // Table columns
        actions: [],                                             // Bulk action buttons
        actionsGroups: [],

        // Sorting
        sort: true,
        sortBy: 'id',                                            // Default sort by key in array
        orderBy: 'ASC',
        groupBy: false,                                          // Render child rows after parent, (WIP - doesn't work checking / unchecking rows and statuses for now)

        // Visibility
        adaptive: false,
        showCounter: false,
        showBulkActions: true,
        showTitle: false,
        textOverflow: false,
        className: '',
        dateFormat: 'cm._config.dateTimeFormat',                 // Input date format
        visibleDateFormat: 'cm._config.dateTimeFormat',          // Render date format

        // Pagination and ajax data request
        renderEmptyMessage: true,
        renderEmptyTable: false,
        renderFilter: false,
        divideTableHeader: false,
        hideTableHeader: false,
        pagination: true,
        perPage: 25,
        pageCount: 0,
        responseKey: 'data',                                     // Response data response key
        responseCodeKey: 'code',
        responseErrorsKey: 'errors',
        responseMessageKey: 'message',
        responseCountKey: 'count',                               // Response data count response key
        showLoader: true,
        ajax: {
            enable: true,
            type: 'json',
            method: 'get',
            url: '',                                             // Request URL. Variables: %orderBy%, %orderByLower%, %sortBy%, %page%, %offset%, %perPage%, %limit%, %callback% for JSONP.
            params: ''                                           // Params object. Variables: %orderBy%, %orderByLower%, %sortBy%, %page%, %offset%, %perPage%, %limit%, %callback% for JSONP.
        },

        // Columns manipulation
        columns: {
            editable: false,
            local: false,                                        // Save sizes in local storage (TBD)
            ajax: {
                type: 'json',
                method: 'post',
                url: '',                                         // Request URL. Variables: %items%, %callback% for JSONP.
                params: ''                                       // Params object. %items%, %callback% for JSONP.
            }
        },

        // Strings and classes
        statuses: ['active', 'success', 'danger', 'warning'],
        icons: {
            arrow: {
                desc: 'icon arrow desc',
                asc: 'icon arrow asc'
            }
        },

        // Components
        autoSend: true,
        paginationConstructor: 'Com.Pagination',
        paginationParams: {
            renderStructure: true,
            embedStructureOnRender: true,
            animateSwitch: true,
            animatePrevious: true
        },

        'Com.GridlistHelper': {
            customEvents: false
        },
        'Com.Toolbar': {
            embedStructure: 'append'
        },

        menu: {
            constructor: 'Com.Menu',
            constructorParams: {
                renderStructure: true,
                embedStructureOnRender: true,
                className: ['com__menu--gridlist'],
                left: '-(selfWidth-targetWidth)',
            },
        },
    },
    strings: {
        counter: 'Count: %count%',
        check_all: 'Check all',
        uncheck_all: 'Uncheck all',
        empty: 'No items',
        actions: 'Actions',
    },
},
function(params){
    var that = this;

    that.nodes = {};
    that.components = {};
    that.rows = [];
    that.checked = [];
    that.actions = [];
    that.isDestructed = false;
    that.isAjax = false;
    that.isCheckedAll = false;
    that.sortBy = null;
    that.orderBy = 'ASC';
    that.isActionsDisabled = true;

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params.events);
        that.getDataConfig(that.params.node);
        that.callbacksProcess();
        validateParams();
        render();
        that.addToStack(that.nodes.container);
        that.triggerEvent('onRender');
    };

    var validateParams = function(){
        that.sortBy = that.params.sortBy;
        that.orderBy = that.params.orderBy;
        // ToDo: remove deprecated parameter name 'childBy'
        that.params.groupBy = !cm.isEmpty(that.params.childBy) ? that.params.childsBy : that.params.groupBy;
        // Ajax
        if(!cm.isEmpty(that.params.ajax.url) && that.params.ajax.enable){
            that.isAjax = true;
            var paginationParams = [
                'autoSend',
                'showLoader',
                'responseKey',
                'responseCodeKey',
                'responseCountKey',
                'responseMessageKey',
                'responseErrorsKey',
                'ajax',
            ];
            cm.forEach(paginationParams, function(item){
                if(typeof that.params[item] !== 'undefined'){
                    that.params.paginationParams[item] = that.params[item];
                }
            });
            that.params.pagination = true;
        }else{
            that.params.paginationParams.count = that.params.data.length;
        }
        // Pagination
        that.params.paginationParams.perPage = that.params.perPage;
        that.params.paginationParams.pageCount = that.params.pageCount;
        // Helper
        that.params['Com.GridlistHelper'].columns = that.params.columns;
    };

    /* *** TABLE RENDER FUNCTION *** */

    var render = function(){
        // Structure
        that.nodes.container = cm.node('div', {classes: 'com__gridlist'});

        // Add CSS class
        cm.addClass(that.nodes.container, that.params.className);
        if(that.params.adaptive){
            cm.addClass(that.nodes.container, 'is-adaptive');
        }

        // Append
        that.embedStructure(that.nodes.container);

        // Render bulk actions
        if(that.params.showBulkActions && that.params.actions.length){
            renderBulkActions();
        }

        // Render table page
        renderInitialTable();

        // Add custom event
        if(that.params.customEvents){
            cm.customEvent.add(that.params.node, 'redraw', () => that.redraw());
        }
    };

    var renderInitialTable = function(){
        if(that.params.divideTableHeader){
            renderTableHeader(that.nodes.container);
        }
        if(that.isAjax){
            renderPagination();
        }else{
            renderStatic(that.params.data);
        }
    };

    var renderStatic = function(data){
        if(!cm.isEmpty(data) && cm.isArray(data)){
            that.params.data = that.callbacks.filter(that, data);
            that.params.paginationParams.count = that.params.data.length;
            that.triggerEvent('onDataFilterEnd', that.params.data);
        }
        if(!cm.isEmpty(that.params.data)){
            removeEmptiness(that.nodes.container);
            // Sort data array for first time
            that.params.sort && arraySort();
            // Counter
            if(that.params.showCounter){
                renderCounter(that.params.data.length);
            }
            if(that.params.pagination){
                // Render static pagination
                renderPagination();
            }else{
                // Render all data items
                renderTable(1, that.params.data, that.nodes.container);
            }
        }else{
            renderEmptiness(that.nodes.container);
        }
    };

    /**** BULK ACTIONS ****/

    var renderBulkActions = function(){
        var nodes = {};
        // Structure
        nodes.container = cm.node('div', {classes: 'pt__gridlist__toolbar'});
        // Component
        cm.getConstructor('Com.Toolbar', function(classConstructor, className){
            that.components.toolbar = new classConstructor(
                cm.merge(that.params[className], {
                    container: nodes.container
                })
            );
            renderBulkGroups();
        });
        // Render buttons
        cm.forEach(that.params.actions, renderBulkAction);
        // Export
        cm.appendChild(nodes.container, that.nodes.container);
        that.nodes.bulk = nodes;
    };

    var renderBulkGroups = function(){
        if(!cm.isEmpty(that.params.actionsGroups)){
            cm.forEach(that.params.actionsGroups, renderBulkGroup);
        }else{
            renderBulkGroup({
                name: 'bulk',
                position: 'left'
            });
        }
    };

    var renderBulkGroup = function(config){
        var item = cm.merge({
            name: '',
            position: 'left'
        }, config);
        // Add
        that.components.toolbar.addGroup(item);
    };

    var renderBulkAction = function(config){
        var item = cm.merge({
            group: 'bulk',
            name: '',
            label: '',
            title: '',
            disabled: true,
            permanent: false,            // Сan not be disabled
            type: 'primary',
            attr: {},
            preventDefault: true,
            constructor: false,
            constructorParams: {},
            callback: function(){}
        }, config);
        // Validate
        if(cm.isEmpty(item.name)){
            item.name = item.label;
        }
        // Check permanent status
        if(item.permanent){
            item.disabled = false;
        }
        // Add
        that.components.toolbar.addButton(item);
        that.actions.push(item);
    };

    var enableBulkActions = function(){
        if(that.isActionsDisabled){
            that.isActionsDisabled = false;
            cm.forEach(that.actions, function(item){
                if(!item.permanent){
                    that.components.toolbar && that.components.toolbar.enableButton(item.name, item.group);
                }
            });
        }
    };

    var disableBulkActions = function(){
        if(!that.isActionsDisabled){
            that.isActionsDisabled = true;
            cm.forEach(that.actions, function(item){
                if(!item.permanent){
                    that.components.toolbar && that.components.toolbar.disableButton(item.name, item.group);
                }
            });
        }
    };

    /*** PAGINATION AND TABLE ****/

    var renderPagination = function(){
        cm.getConstructor(that.params.paginationConstructor, function(classConstructor){
            that.components.pagination = new classConstructor(
                cm.merge(that.params.paginationParams, {
                    container: that.nodes.container,
                    callbacks: {
                        afterPrepare: function(pagination, config){
                            return that.callbacks.paginationAfterPrepare(that, pagination, config)
                        }
                    },
                    events: {
                        onStart: function(pagination){
                            that.triggerEvent('onLoadStart');
                        },
                        onPageRenderError: function(pagination, page){
                            that.triggerEvent('onLoadError', {page: page});
                            that.triggerEvent('onLoadEnd', {page: page});
                        },
                        onPageRender: function(pagination, page){
                            that.callbacks.renderPage(that, page);
                        },
                        onPageRenderEnd: function(pagination, page){
                            that.redraw();
                            that.triggerEvent('onLoadSuccess', {page: page});
                            that.triggerEvent('onLoadEnd', {page: page});
                        },
                        onSetCount: function(pagination, count){
                            that.params.showCounter && renderCounter(count);
                        }
                    }
                })
            );
        });
    };

    var renderCounter = function(count){
        if(!that.nodes.counter){
            that.nodes.counter = cm.node('div', {classes: 'pt__gridlist__counter'});
            cm.insertFirst(that.nodes.counter, that.nodes.container);
        }
        that.nodes.counter.innerHTML = cm.strReplace(that.msg('counter'), {
            '%count%' : count
        });
    };

    var renderEmptiness = function(container, errors){
        errors = !cm.isEmpty(errors) ? errors : that.msg('empty');
        removeEmptiness(container);
        that.nodes.empty = cm.node('div', {classes: 'cm__empty'}, errors);
        cm.appendChild(that.nodes.empty, container);
        that.triggerEvent('onEmpty', {
            container: container,
            empty: that.nodes.empty,
            errors: errors,
        });
    };

    var removeEmptiness = function(container){
        if(that.nodes.empty && cm.isParent(container, that.nodes.empty)){
            cm.remove(that.nodes.empty);
        }
    };

    var renderTableHeader = function(container){
        var nodes = {};
        that.nodes.header = nodes;

        // Render Table
        nodes.container = cm.node('div', {classes: 'pt__gridlist pt__gridlist--header'},
            nodes.table = cm.node('table',
                nodes.head = cm.node('thead',
                    nodes.title = cm.node('tr')
                )
            )
        );
        if(that.params.adaptive){
            cm.addClass(nodes.container, 'is-adaptive');
        }

        // Render Table Title
        cm.forEach(that.params.cols, function(item, i){
            renderTitleItem(item, i, nodes.title);
        });

        // Render Table Filter
        if(that.params.renderFilter){
            nodes.filter = cm.node('tr');
            cm.forEach(that.params.cols, function(item, i){
                renderFilterItem(item, i, nodes.filter);
            });
            cm.appendChild(nodes.filter, nodes.head);
        }

        // Append
        cm.appendChild(nodes.container, container);
    };

    var renderTable = function(page, data, container){
        // API onRenderStart event
        that.triggerEvent('onRenderStart', {
            container: container,
            page: page,
            data: data
        });

        // Reset table
        resetTable();
        if(that.nodes.table && cm.isParent(container, that.nodes.table)){
            cm.remove(that.nodes.table);
        }

        // Render Table
        that.nodes.table = cm.node('div', {classes: 'pt__gridlist'},
            that.nodes.tableInner = cm.node('table',
                that.nodes.head = cm.node('thead',
                    that.nodes.title = cm.node('tr')
                ),
                that.nodes.content = cm.node('tbody')
            )
        );
        if(that.params.adaptive){
            cm.addClass(that.nodes.table, 'is-adaptive');
        }
        if(!that.params.divideTableHeader){
            // Render Table Title
            cm.forEach(that.params.cols, function(item, i){
                renderTitleItem(item, i, that.nodes.title);
            });
            // Render Table Filter
            if(that.params.renderFilter) {
                that.nodes.filter = cm.node('tr', {classes: 'pt__gridlist__row-filter'});
                cm.forEach(that.params.cols, function(item, i){
                    renderFilterItem(item, i, that.nodes.filter);
                });
                cm.appendChild(that.nodes.filter, that.nodes.head);
            }
            if(that.params.hideTableHeader){
                cm.addClass(that.nodes.head, 'is-hidden');
            }
        }else{
            // Render Table Title Placeholder
            cm.forEach(that.params.cols, function(item, i){
                renderTitleItemPlaceholder(item, i, that.nodes.title);
            });
            cm.addClass(that.nodes.head, 'is-hidden');
        }
        // Render Table Row
        cm.forEach(data, function(item, i){
            renderRow(that.rows, item, (i + (page -1)));
        });

        // Append
        cm.appendChild(that.nodes.table, container);

        // Render editable columns
        renderHelper(data);

        // API onRenderEnd event
        that.triggerEvent('onRenderEnd', {
            container: container,
            page: page,
            data: data,
            rows: that.rows
        });
    };

    var renderHelper = function(){
        if(that.params.columns.editable){
            cm.getConstructor('Com.GridlistHelper', function(classConstructor, className){
                that.components.helper = new classConstructor(
                    cm.merge(that.params[className], {
                        node: that.nodes.table,
                        events: {
                            onColumnsChange: function(helper, data){
                                that.triggerEvent('onColumnsChange', data);
                            },
                            onColumnsResize: function(helper, data){
                                cm.forEach(that.params.cols, function(column, i){
                                    if(data[i] && data[i].width){
                                        column.width = data[i].width;
                                    }
                                });
                                that.triggerEvent('onColumnsResize', that.params.cols);
                            }
                        }
                    })
                );
            });
        }
    };

    var renderTitleItem = function(item, i, container){
        // Merge cell parameters
        item = that.params.cols[i] = cm.merge({
            _component: null,            // System attribute
            width: 'auto',               // number | % | auto
            access: true,                // Render column if is accessible
            type: 'text',		         // text | number | url | date | html | icon | checkbox | empty | actions | links
            key: '',                     // Data array key
            title: '',                   // Table th title
            sort: that.params.sort,      // Sort this column or not
            sortKey: '',                 // Sort key
            filterKey: null,
            classes: [],                 // Cell css class
            class: '',		             // Item css class
            target: '_blank',            // Link target, for type="url|icon"
            rel: null,                   // Link rel, for type="url|icon"
            tagName: 'td',
            wrap: false,                 // Wrap cell values in div
            textOverflow: null,          // Overflow long text to single line
            showTitle: null,             // Show title on hover
            titleKey: '',                // Alternative title key, if not specified - will be shown data text
            titleText: '',               // Alternative title text, if not specified - will be shown key text
            altText: '',                 // Alternative column text for links and icons
            urlKey: false,               // Alternative link href, for type="url|icon"
            links: [],                   // Render links menu, for type="links"
            linksParams: {
                align: 'left',
            },
            actions: [],                 // Render actions menu, for type="actions"
            actionsParams: {
                align: 'right',
            },
            preventDefault: true,
            onClick: false,              // Cell click handler
            onRender: false              // Cell onRender handler
        }, item);

        // Validate
        item.nodes = {};
        item.showTitle = cm.isBoolean(item.showTitle)? item.showTitle : that.params.showTitle;
        item.textOverflow = cm.isBoolean(item.textOverflow)? item.textOverflow : that.params.textOverflow;

        // Check access
        if(!item.access){
            return;
        }

        // Structure
        item.nodes.container = cm.node('th', {classes: item.classes},
            item.nodes.inner = cm.node('div', {classes: 'inner'})
        );

        // Set column width
        if(!cm.isEmpty(item.width)){
            if(/%|px|auto/.test(item.width)){
                item.nodes.container.style.width = item.width;
            }else{
                item.nodes.container.style.width = parseFloat(item.width) + 'px';
            }
        }

        // Append
        cm.appendChild(item.nodes.container, container);

        // Insert specific specified content in th
        switch(item.type){
            case 'checkbox':
                cm.addClass(item.nodes.container, 'control');
                item.nodes.inner.appendChild(
                    item.nodes.checkbox = cm.node('input', {type: 'checkbox', title: that.msg('check_all')})
                );
                item.nodes.checkbox.checked = that.isCheckedAll;
                cm.addEvent(item.nodes.checkbox, 'click', function(){
                    if(that.isCheckedAll){
                        that.unCheckAll();
                    }else{
                        that.checkAll();
                    }
                });
                that.nodes.checkbox = item.nodes.checkbox;
                break;

            default:
                item.nodes.inner.appendChild(
                    cm.node('span', item.title)
                );
                break;
        }
        // Render sort arrow and set function on click to th
        if(item.sort && !/icon|empty|actions|links|checkbox/.test(item.type)){
            setTableHeaderItemSort(item, i);
            cm.addEvent(item.nodes.inner, 'click', function(){
                that.sortBy = !cm.isEmpty(item.sortKey) ? item.sortKey : item.key;
                that.orderBy = that.orderBy === 'ASC' ? 'DESC': 'ASC';
                if(!that.isAjax){
                    arraySort();
                }
                if(that.params.divideTableHeader){
                    cm.forEach(that.params.cols, setTableHeaderItemSort);
                }
                if(that.params.pagination){
                    that.components.pagination.rebuild();
                }else{
                    renderTable(1, that.params.data, that.nodes.container);
                }
            });
        }
        // Trigger event
        that.triggerEvent('onRenderTitleItem', {
            nodes: item.nodes,
            item: item,
            i: i
        });
    };

    var setTableHeaderItemSort = function(item, i){
        if(!item.access || /icon|empty|actions|links|checkbox/.test(item.type)){
            return;
        }
        cm.removeClass(item.nodes.container, 'sort');
        if(item.sort){
            cm.addClass(item.nodes.container, 'sort');
            cm.remove(item.nodes.sort);
            if(item.sortKey === that.sortBy || item.key === that.sortBy){
                item.nodes.sort = cm.node('div', {classes: that.params.icons.arrow[that.orderBy.toLowerCase()]});
                cm.appendChild(item.nodes.sort, item.nodes.inner);
            }
        }
    };

    var renderTitleItemPlaceholder = function(item, i, container){
        item.nodes.placeholder = {};
        // Check access
        if(item.access){
            // Structure
            item.nodes.placeholder.container = cm.node('th',
                item.nodes.placeholder.inner = cm.node('div', {classes: 'inner'})
            )
            // Set column width
            if(/%|px|auto/.test(item.width)){
                item.nodes.placeholder.container.style.width = item.width;
            }else{
                item.nodes.placeholder.container.style.width = parseFloat(item.width) + 'px';
            }
            // Embed
            cm.appendChild(item.nodes.placeholder.container, container);
        }
    };

    var renderFilterItem = function(item, i, container){
        item.nodes.filter = {};
        // Check access
        if(item.access){
            // Structure
            item.nodes.filter.container = cm.node('td',
                item.nodes.filter.inner = cm.node('div', {classes: 'inner'})
            )
            cm.appendChild(item.nodes.filter.container, container);
            // Trigger event
            that.triggerEvent('onRenderFilterItem', {
                nodes: item.nodes.filter,
                item: item,
                i: i
            });
        }
    };

    var renderRow = function(parentRow, data, i){
        // Config
        var item = {
            i: i,
            index: data[that.params.uniqueKey],
            data: data,
            children: [],
            childrenData: [],
            isChecked: false,
            isParent: false,
            isFirstLevel: true,
            status: data['_status'] || false,
            classes: [],
            nodes: {
                cols: []
            },
            cells: []
        };

        // Validate
        item.isFirstLevel = that.rows === parentRow;
        if(that.params.groupBy){
            item.childrenData = item.data[that.params.groupBy];
            item.isParent = !cm.isEmpty(item.childrenData);
        }
        item.classes.push(item.isFirstLevel ? 'is-first-level' : 'is-child-level');

        // Structure
        that.nodes.content.appendChild(
            item.nodes.container = cm.node('tr', {classes: item.classes})
        );

        // Render cells
        cm.forEach(that.params.cols, function(config){
            item.cells.push(
                renderCell(config, item)
            );
        });

        // Group children
        if(that.params.groupBy){
            cm.forEach(item.childrenData, function(childData, childI){
                renderRow(item.children, childData, childI);
            });
        }

        // Push
        parentRow.push(item);
    };

    var renderCell = function(config, row){
        var item = {
            nodes: {}
        };

        // Check access
        if(!config.access){
            return item;
        }

        // Validate
        item.data = cm.objectPath(config.key, row.data);
        item.text = !cm.isEmpty(item.data)? item.data : '';
        item.titleData = cm.objectPath(config.titleKey, row.data);
        item.title = !cm.isEmpty(config.titleText)
            ? config.titleText : !cm.isEmpty(item.titleData)
                ? item.titleData : item.text;

        // Validate css classes
        if(cm.isString(config.classes)){
            config.classes = [config.classes];
        }

        // Structure
        row.nodes.container.appendChild(
            item.nodes.container = cm.node(config.tagName, {classes: config.classes})
        );

        // Text overflow
        if(config.wrap || config.textOverflow){
            item.nodes.inner = cm.node('div', {classes: 'inner'});
            item.nodes.container.appendChild(item.nodes.inner);
            if(config.textOverflow) {
                cm.addClass(item.nodes.inner, 'is-nowrap');
            }
        }else{
            item.nodes.inner = item.nodes.container;
        }

        // Insert value by type
        switch(config.type){
            case 'number':
                renderCellNumber(config, row, item);
                break;

            case 'date':
                renderCellDate(config, row, item);
                break;

            case 'icon':
                renderCellIcon(config, row, item);
                break;

            case 'url':
                renderCellURL(config, row, item);
                break;

            case 'checkbox':
                renderCellCheckbox(config, row, item);
                break;

            case 'links':
                renderCellLinks(config, row, item);
                break;

            case 'actions':
                renderCellActions(config, row, item);
                break;

            case 'empty':
                break;

            default :
                renderCellDefault(config, row, item);
                break;
        }

        // Statuses
        if(row.status){
            setRowStatus(row, row.status);
        }

        // onHover Title
        if(config.showTitle){
            if(item.nodes.node){
                item.nodes.node.title = item.title;
            }else{
                item.nodes.inner.title = item.title;
            }
        }

        // onClick handler
        if(cm.isFunction(config.onClick)){
            cm.addEvent(item.nodes.node || item.nodes.inner, 'click', function(e){
                config.preventDefault && cm.preventDefault(e);
                // Column onClick event
                config.onClick(that, {
                    nodes: item.nodes,
                    col: config,
                    row: row,
                    cell: item
                });
            });
        }

        // onCellRender handler
        if(cm.isFunction(config.onRender)){
            config.onRender(that, {
                nodes: item.nodes,
                col: config,
                row: row,
                cell: item
            });
        }

        // Empty
        if(!item.nodes.inner.hasChildNodes()){
            cm.addClass(item.nodes.container, 'is-empty');
        }

        // Push
        return item;
    };

    /*** CELLS BY TYPES ***/

    var renderCellDefault = function(config, row, item){
        if(cm.isNode(item.text)){
            cm.appendChild(item.text, item.nodes.inner);
        }else{
            item.nodes.inner.innerHTML = item.text;
        }
    };

    var renderCellNumber = function(config, row, item){
        item.nodes.inner.innerHTML = cm.splitNumber(item.text);
    };

    var renderCellDate = function(config, row, item){
        if(that.params.dateFormat !== that.params.visibleDateFormat){
            item.nodes.inner.innerHTML = cm.parseFormatDateTime(item.text, that.params.dateFormat, that.params.visibleDateFormat);
        }else{
            item.nodes.inner.innerHTML = item.text;
        }
    };

    var renderCellIcon = function(config, row, item){
        item.text = cm.decode(item.text);
        item.href = config.urlKey && row.data[config.urlKey]? cm.decode(row.data[config.urlKey]) : item.text;
        item.label = !cm.isEmpty(config.altText)? config.altText : item.text;
        if(!cm.isEmpty(item.href)){
            item.nodes.node = cm.node('a', {classes: config.class, title: item.label, target: config.target, rel: config.rel, href: item.href});
        }else{
            item.nodes.node = cm.node('div', {classes: config.class, title: item.label})
        }
        cm.addClass(item.nodes.node, 'icon linked inline');
        item.nodes.inner.appendChild(item.nodes.node);
    };

    var renderCellURL = function(config, row, item){
        item.text = cm.decode(item.text);
        item.href = config.urlKey && row.data[config.urlKey]? cm.decode(row.data[config.urlKey]) : item.text;
        item.label = !cm.isEmpty(config.altText)? config.altText : item.text;
        if(!cm.isEmpty(item.href)){
            item.nodes.node = cm.node('a', {target: config.target, rel: config.rel, href: item.href}, item.label);
            item.nodes.inner.appendChild(item.nodes.node);
        }
    };

    var renderCellCheckbox = function(config, row, item){
        cm.addClass(item.nodes.container, 'control');
        item.nodes.node = cm.node('input', {type: 'checkbox'})
        item.nodes.inner.appendChild(item.nodes.node);
        row.nodes.checkbox = item.nodes.node;
        if(row.data['_checked']){
            checkRow(row, false);
        }
        cm.addEvent(item.nodes.node, 'click', function(){
            if(!row.isChecked){
                checkRow(row, true);
            }else{
                unCheckRow(row, true);
            }
        });
    };

    var renderCellLinks = function(config, row, item){
        // Config
        item.classes = ['pt__links', ['pull', config.linksParams.align].join('-'), config.class];
        // Structure
        item.nodes.items = item.nodes.links = [];
        item.nodes.node = cm.node('div', {classes: item.classes},
            item.nodes.itemsList = item.nodes.linksList = cm.node('ul')
        )
        // Items
        item.links = renderCellActionItems(config, row, item, 'links');
        // Embed
        if(item.nodes.links.length){
            cm.appendChild(item.nodes.node, item.nodes.inner);
        }
    };

    var renderCellActions = function(config, row, item){
        // Config
        item.classes = ['pt__links', ['pull', config.actionsParams.align].join('-'), config.class];

        // Structure
        item.nodes.items = item.nodes.actions = [];
        item.nodes.node = cm.node('div', {classes: item.classes});

        // Render menu component
        cm.getConstructor(that.params.menu.constructor, function(classConstructor){
            item.controller = new classConstructor(
                cm.merge(that.params.menu.constructorParams, {
                    container: item.nodes.node,
                    events: {
                        onShow: function() {
                            cm.addClass(row.nodes.container, 'highlight');
                        },
                        onHide: function() {
                            cm.removeClass(row.nodes.container, 'highlight');
                        },
                    },
                })
            );

            // Get items container
            item.nodes.itemsList = item.nodes.actionsList = item.controller.getNodes('holder');

            // Render items
            item.actions = renderCellActionItems(config, row, item, 'actions');

            // Append
            if(item.nodes.actions.length > 0){
                cm.appendChild(item.nodes.node, item.nodes.inner);
            }
        });
    };

    var renderCellActionItems = function(config, row, item, list){
        var items = [];
        cm.forEach(config[list], function(actionItem, key){
            actionItem = cm.merge({
                name: '',
                label: '',
                access: true,
                status: null, // success | warning | danger
                classes: [],
                attr: {},
                events: {},
                preventDefault: config.preventDefault,
                dataKey: 'data',
                dataPath: null,
                icon: null,
                constructor: false,
                constructorParams: {},
                callback: null,
            }, actionItem);

            // Check access
            var isDataEmpty = !cm.isArray(item.data) || cm.isEmpty(actionItem.name);
            var isInDataArray = cm.isArray(item.data) && cm.inArray(item.data, actionItem.name);
            if(actionItem.access && (isDataEmpty || isInDataArray)){
                renderCellActionItem(config, row, item, actionItem);
            }

            items.push(actionItem);
        });
        return items;
    }

    var renderCellActionItem = function(config, row, item, actionItem){
        // Merge css classes
        actionItem.attr.classes = cm.merge(actionItem.classes, actionItem.attr.classes);

        // Bind data to the html attributes if they provided.
        // ToDo: deprecated it or refactor
        cm.forEach(row.data, function(itemValue, itemKey){
            actionItem.attr = cm.replaceDeep(
                actionItem.attr,
                new RegExp([cm.strWrap(itemKey, '%'), cm.strWrap(itemKey, '%25')].join('|'), 'g'),
                itemValue
            );
        });

        // Structure
        actionItem.container = cm.node('li',
            actionItem.node = cm.node('a', actionItem.attr, actionItem.label)
        );

        // Render icon
        if (cm.isNode(actionItem.icon)) {
            actionItem.icon = actionItem.icon.cloneNode(true);
            cm.insertFirst(actionItem.icon, actionItem.node);
            cm.addClass(actionItem.container, 'has-icon');
        }

        // Status
        if (!cm.isEmpty(actionItem.status)) {
            cm.addClass(actionItem.container, actionItem.status);
        }

        // Set role action attributes if callback or controller provided
        if(actionItem.constructor || cm.isFunction(actionItem.callback)){
            actionItem.node.setAttribute('role', 'button');
            actionItem.node.setAttribute('tabindex', 0);
        }

        if(actionItem.constructor){
            cm.getConstructor(actionItem.constructor, function(classConstructor){
                actionItem._constructorParams = cm.merge(actionItem.constructorParams, {
                    node: actionItem.node,
                    rowItem: row,
                    cellItem: item,
                    actionItem: actionItem,
                    [actionItem.dataKey]: cm.reducePath(actionItem.dataPath, row.data),
                });
                actionItem.controller = new classConstructor(actionItem['_constructorParams']);
                actionItem.controller.addEvent('onRenderControllerEnd', function(){
                    item.controller?.hide(false);
                });
            });
        }else{
            cm.click.add(actionItem.node, function(e){
                actionItem.preventDefault && cm.preventDefault(e);
                item.controller?.hide(false);
                cm.isFunction(actionItem.callback) && actionItem.callback(e, actionItem, row);
            });
        }

        // Append
        item.nodes.items.push(actionItem.node);
        cm.appendChild(actionItem.container, item.nodes.itemsList);
    };

    /*** HELPING FUNCTIONS ***/

    var resetTable = function(){
        cm.customEvent.trigger(that.nodes.table, 'destruct', {
            direction: 'child',
            self: false
        });
        that.unCheckAll();
        that.rows = [];
        that.checked = [];
    };

    var arraySort = function(){
        // Get item
        var item, textA, textB, t1, t2, value;
        cm.forEach(that.params.cols, function(col){
            if(col.key === that.sortBy){
                item = col;
            }
        });
        // Sort
        that.params.data.sort(function(a, b){
            textA = a[that.sortBy];
            textB = b[that.sortBy];
            switch(item.type){
                case 'html':
                    t1 = cm.getTextNodesStr(cm.strToHTML(textA));
                    t2 = cm.getTextNodesStr(cm.strToHTML(textB));
                    value = (t1 < t2)? -1 : ((t1 > t2)? 1 : 0);
                    return (that.orderBy === 'ASC')? value : (-1 * value);
                    break;

                case 'date':
                    t1 = cm.parseDate(textA, that.params.dateFormat);
                    t2 = cm.parseDate(textB, that.params.dateFormat);
                    return (that.orderBy === 'ASC')? (t1 - t2) : (t2 - t1);
                    break;

                case 'number':
                    value = textA - textB;
                    return (that.orderBy === 'ASC')? value : (-1 * value);
                    break;

                default :
                    t1 = textA? textA.toLowerCase() : '';
                    t2 = textB? textB.toLowerCase() : '';
                    value = (t1 < t2)? -1 : ((t1 > t2)? 1 : 0);
                    return (that.orderBy === 'ASC')? value : (-1 * value);
                    break;
            }
        });
        // API onSort Event
        that.triggerEvent('onSort', {
            sortBy: that.sortBy,
            orderBy: that.orderBy
        });
    };

    var checkRow = function(row, execute){
        if(!row.isChecked){
            if(row.nodes.checkbox){
                row.nodes.checkbox.checked = true;
            }
            row.isChecked = true;
            row.data['_checked'] = true;
            if(row.status){
                cm.removeClass(row.nodes.container, row.status);
            }
            cm.addClass(row.nodes.container, 'active');
            // Set
            that.checked.push(row);
            if(that.checked.length){
                enableBulkActions();
            }else{
                disableBulkActions();
            }
            // Events
            if(execute){
                // API onCheck Event
                that.triggerEvent('onCheck', row);
            }
        }
    };

    var unCheckRow = function(row, execute){
        if(row.isChecked){
            if(row.nodes.checkbox){
                row.nodes.checkbox.checked = false;
            }
            row.isChecked = false;
            row.data['_checked'] = false;
            cm.removeClass(row.nodes.container, 'active');
            if(row.status){
                cm.addClass(row.nodes.container, row.status);
            }
            // Set
            cm.arrayRemove(that.checked, row);
            if(that.checked.length){
                enableBulkActions();
            }else{
                disableBulkActions();
            }
            // Events
            if(execute){
                // API onUnCheck Event
                that.triggerEvent('onUnCheck', row);
            }
        }
    };

    var setRowStatus = function(row, status){
        row.status = status;
        row.data['_status'] = status;
        cm.removeClass(row.nodes.container, that.params.statuses.join(' '));
        if(row.isChecked){
            cm.addClass(row.nodes.container, 'active');
        }else if(cm.inArray(that.params.statuses, status)){
            cm.addClass(row.nodes.container, status);
        }
    };

    var clearRowStatus = function(row){
        row.status = null;
        row.data['_status'] = null;
        cm.removeClass(row.nodes.container, that.params.statuses.join(' '));
    };

    /******* CALLBACKS *******/

    that.callbacks.paginationAfterPrepare = function(that, pagination, config){
        config.url = cm.strReplace(config.url, {
            '%sortBy%': that.sortBy,
            '%orderBy%': that.orderBy,
            '%orderByLower%': that.orderBy.toLowerCase()
        });
        config.params = cm.objectReplace(config.params, {
            '%sortBy%': that.sortBy,
            '%orderBy%': that.orderBy,
            '%orderByLower%': that.orderBy.toLowerCase()
        });
        return config;
    };

    that.callbacks.filter = function(that, data){
        return data;
    };

    that.callbacks.renderPage = function(that, page){
        that.triggerEvent('onPageRenderStart', {page: page});
        if(!that.isAjax){
            page.data = that.getStaticPageData(page.page);
        }
        if(!cm.isEmpty(page.data) && cm.isArray(page.data)){
            page.data = that.callbacks.filter(that, page.data);
        }
        that.triggerEvent('onDataFilterEnd', page.data);
        that.renderPageTable(page);
        that.triggerEvent('onPageRenderEnd', {page: page});
    };

    /******* TABLE *******/

    that.renderPageTable = function(page){
        if(!cm.isEmpty(page.data)){
            renderTable(page.page, page.data, page.container);
        }else{
            if(that.params.renderEmptyTable){
                renderTable(page.page, page.data, page.container);
            }
            if(that.params.renderEmptyMessage){
                renderEmptiness(page.container, page.message);
            }
        }
    };

    /******* MAIN *******/

    that.rebuild = function(){
        that.components.pagination && that.components.pagination.rebuild();
        return that;
    };

    that.redraw = function(){
        that.components.helper && that.components.helper.redraw();
        return that;
    };

    that.setData = function(data){
        renderStatic(data);
        return that;
    };

    that.setAction = function(o, mode, update){
        that.components.pagination && that.components.pagination.setAction(o, mode, update);
        return that;
    };

    that.getAction = function(){
        return that.components.pagination && that.components.pagination.getAction() || {};
    };

    that.getCurrentAction = function(){
        return that.components.pagination && that.components.pagination.getCurrentAction() || {};
    };

    that.abort = function(){
        that.components.pagination && that.components.pagination.abort();
        return that;
    };

    that.getRows = function(){
        return that.rows;
    };

    that.check = function(id){
        cm.forEach(that.rows, function(row){
            if(row.index == id){
                checkRow(row, true);
            }
        });
        return that;
    };

    that.unCheck = function(id){
        cm.forEach(that.rows, function(row){
            if(row.index == id){
                unCheckRow(row, true);
            }
        });
        return that;
    };

    that.checkAll = function(){
        if(that.nodes.checkbox){
            that.nodes.checkbox.checked = true;
        }
        cm.forEach(that.rows, function(row){
            checkRow(row);
        });
        // API onUnCheckAll Event
        if(!that.isCheckedAll){
            that.isCheckedAll = true;
            that.triggerEvent('onCheckAll');
        }
        return that;
    };

    that.unCheckAll = function(){
        if(that.nodes.checkbox){
            that.nodes.checkbox.checked = false;
        }
        cm.forEach(that.rows, function(row){
            unCheckRow(row);
        });
        // API onUnCheckAll Event
        if(that.isCheckedAll){
            that.isCheckedAll = false;
            that.triggerEvent('onUnCheckAll');
        }
        return that;
    };

    that.getChecked = function(){
        return that.checked;
    };

    that.getCheckedData = function(){
        var rows = [];
        cm.forEach(that.checked, function(item){
            rows.push(item.data);
        });
        return rows;
    };

    that.getCheckedIndexes = function(){
        var rows = [];
        cm.forEach(that.checked, function(item){
            rows.push(item.data[that.params.uniqueKey]);
        });
        return rows;
    };

    that.getStaticPageData = function(page){
        var startIndex = that.params.perPage * (page - 1),
            endIndex = Math.min(that.params.perPage * page, that.params.data.length);
        return that.params.data.slice(startIndex, endIndex);
    };

    that.setRowStatus = function(id, status){
        cm.forEach(that.rows, function(row){
            if(row.index == id){
                setRowStatus(row, status);
            }
        });
        return that;
    };

    that.clearRowStatus = function(id){
        cm.forEach(that.rows, function(row){
            if(row.index == id){
                clearRowStatus(row);
            }
        });
        return that;
    };

    that.getRowsByStatus = function(status){
        var rows = [];
        cm.forEach(that.rows, function(row){
            if(row.status == status){
                rows.push(row);
            }
        });
        return rows;
    };

    that.getToolbar = function(){
        return that.components.toolbar;
    };

    that.destruct = function(){
        if(!that.isDestructed){
            that.isDestructed = true;
            that.removeFromStack();
            cm.remove(that.nodes.container);
        }
        return that;
    };

    that.remove = function(){
        that.params.destructOnRemove && that.destruct();
        cm.remove(that.nodes.container);
        return that;
    };

    init();
});

cm.define('Com.GridlistFilter', {
    'extend' : 'Com.AbstractController',
    'events' : [
        'onRenderContentStart',
        'onRenderContent',
        'onRenderContentProcess',
        'onRenderContentEnd'
    ],
    'params' : {
        'controllerEvents' : true,
        'renderStructure' : true,
        'renderStructureContent' : true,
        'embedStructureOnRender' : true,
        'embedStructure' : 'append',
        'controller' : null,
        'minLength' : 0,
        'delay' : 'cm._config.requestDelay',
        'action' : {}                             // Params object. Variables: %query%
    },
    'strings' : {
        'placeholder' : 'Type query...'
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractController.apply(that, arguments);
});

cm.getConstructor('Com.GridlistFilter', function(classConstructor, className, classProto){
    var _inherit = classProto._inherit;

    classProto.construct = function(){
        var that = this;
        // Variables
        that.requestDelay = null;
        // Binds
        that.inputEventHandler = that.inputEvent.bind(that);
        // Call parent method
        _inherit.prototype.construct.apply(that, arguments);
        return that;
    };

    /******* VIEW MODEL *******/

    classProto.renderView = function(){
        var that = this;
        that.triggerEvent('onRenderViewStart');
        that.nodes['container'] = cm.node('div', {'class' : 'com__gridlist__filter'});
        // Component content
        cm.appendChild(that.nodes['contentContainer'], that.nodes['container']);
        if(that.params['renderStructureContent']){
            that.nodes['contentContainer'] = that.renderContent();
            cm.appendChild(that.nodes['contentContainer'], that.nodes['container']);
        }
        that.triggerEvent('onRenderViewProcess');
        that.triggerEvent('onRenderViewEnd');
        return that;
    };

    classProto.renderViewModel = function(){
        var that = this;
        // Call parent method
        _inherit.prototype.renderViewModel.apply(that, arguments);
        // Find Gridlist
        if(that.params['controller']){
            that.components['controller'] = that.params['controller'];
        }
        return that;
    };

    /******* FILTER *******/

    classProto.renderContent = function(){
        var that = this,
            nodes = {};
        that.nodes['content'] = nodes;
        // Structure
        that.triggerEvent('onRenderContentStart');
        nodes['container'] = cm.node('div', {'class' : 'pt__input'},
            nodes['input'] = cm.node('input', {'type' : 'search', 'autocomplete' : 'off', 'placeholder' : that.lang('placeholder')}),
            nodes['icon'] = cm.node('div', {'class' : 'icon icon svg__search'})
        );
        that.triggerEvent('onRenderContent');
        that.triggerEvent('onRenderContentProcess');
        cm.addEvent(nodes['input'], 'input', that.inputEventHandler);
        that.triggerEvent('onRenderContentEnd');
        // Export
        return nodes['container'];
    };

    classProto.inputEvent = function(){
        var that = this,
            query = that.nodes['content']['input'].value,
            config = cm.clone(that.params['action']);
        // Clear previous request
        that.requestDelay && clearTimeout(that.requestDelay);
        that.components['controller'] && that.components['controller'].abort();
        // Request
        if(query.length >= that.params['minLength']){
            that.requestDelay = setTimeout(function(){
                that.callbacks.request(that, {
                    'config' : config,
                    'query' : query
                });
            }, that.params['delay']);
        }
    };

    /******* CALLBACKS *******/

    classProto.callbacks.prepare = function(that, params){
        params['config'] = that.callbacks.beforePrepare(that, params);
        params['config'] = cm.objectReplace(params['config'], {
            '%query%' : params['query']
        });
        params['config'] = that.callbacks.afterPrepare(that, params);
        return params['config'];
    };

    classProto.callbacks.beforePrepare = function(that, params){
        return params['config'];
    };

    classProto.callbacks.afterPrepare = function(that, params){
        return params['config'];
    };

    classProto.callbacks.request = function(that, params){
        params = cm.merge({
            'response' : null,
            'data' : null,
            'config' : null,
            'query' : ''
        }, params);
        // Validate config
        params['config'] = that.callbacks.prepare(that, params);
        // Set new action to Gridlist
        that.components['controller'] && that.components['controller'].setAction({
            'params' : params['config']
        });
    };

    /******* PUBLIC *******/

    classProto.reset = function(){
        var that = this;
        that.nodes['content']['input'].value = '';
        that.inputEvent();
        return that;
    };

});
cm.define('Com.GridlistHelper', {
    'modules' : [
        'Params',
        'Events',
        'Langs',
        'DataConfig',
        'DataNodes',
        'Stack'
    ],
    'events' : [
        'onRender',
        'onColumnsChange',
        'onColumnsResize',
        'onEnableEditing',
        'onEnableEditable',
        'onDisableEditing',
        'onDisableEditable',
    ],
    'params' : {
        'node' : cm.node('div'),
        'name' : '',
        'isEditing' : true,
        'customEvents' : true,
        'columns' : {
            'isEditing' : false,
            'customEvents' : false,
            'showDrag' : false,
            'ajax' : {
                'type' : 'json',
                'method' : 'post',
                'url' : '',                                             // Request URL. Variables: %items%, %callback% for JSONP.
                'params' : ''                                           // Params object. %items%, %callback% for JSONP.
            }
        }
    }
},
function(params){
    var that = this;

    that.nodes = {
        'container' : cm.node('div'),
        'thead' : cm.node('thead'),
        'items' : []
    };
    that.components = {};
    that.isEditing = null;

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataNodes(that.params['node']);
        that.getDataConfig(that.params['node']);
        validateParams();
        render();
        that.addToStack(that.nodes['container']);
        that.triggerEvent('onRender');
    };

    var validateParams = function(){
        that.nodes['container'] = that.params['node'];
    };

    var render = function(){
        // Get Nodes
        that.nodes['thead'] = that.nodes['container'].getElementsByTagName('thead')[0] || that.nodes['thead'];
        that.nodes['items'] = that.nodes['thead'].getElementsByTagName('th');
        // Init Columns
        cm.getConstructor('Com.ColumnsHelper', function(classConstructor){
            that.components['columns'] = new classConstructor(
                cm.merge(that.params['columns'], {
                    'node' : that.nodes['container'],
                    'items' : that.nodes['items'],
                    'events' : {
                        'onDragStart' : function(){
                            cm.addClass(that.nodes['container'], 'is-active');
                        },
                        'onDragStop' : function(){
                            cm.removeClass(that.nodes['container'], 'is-active');
                        },
                        'onChange' : function(my, items){
                            that.triggerEvent('onColumnsChange', items);
                        },
                        'onResize' : function(my, items){
                            that.triggerEvent('onColumnsResize', items);
                        }
                    }
                })
            );
        });
        // Add custom event
        if(that.params['customEvents']){
            cm.customEvent.add(that.params['node'], 'redraw', function(){
                that.redraw();
            });
            cm.customEvent.add(that.params['node'], 'enableEditable', function(){
                that.enableEditing();
            });
            cm.customEvent.add(that.params['node'], 'disableEditable', function(){
                that.disableEditing();
            });
        }
        // Editing
        that.params['isEditing'] && that.enableEditing();
    };

    /* ******* PUBLIC ******* */

    that.enableEditing = function(){
        if(typeof that.isEditing !== 'boolean' || !that.isEditing){
            that.isEditing = true;
            cm.addClass(that.params['node'], 'is-editing is-editable');
            that.components['columns'] && that.components['columns'].enableEditing();
            that.triggerEvent('onEnableEditing');
            that.triggerEvent('onEnableEditable');
        }
        return that;
    };

    that.disableEditing = function(){
        if(typeof that.isEditing !== 'boolean' || that.isEditing){
            that.isEditing = false;
            cm.removeClass(that.params['node'], 'is-editing is-editable');
            that.components['columns'] && that.components['columns'].disableEditing();
            that.triggerEvent('onDisableEditing');
            that.triggerEvent('onDisableEditable');
        }
        return that;
    };

    that.redraw = function(){
        that.components['columns'] && that.components['columns'].redraw();
        return that;
    };

    init();
});

cm.define('Com.HelpBubble', {
    'extend' : 'Com.AbstractController',
    'params' : {
        'renderStructure' : false,
        'embedStructureOnRender' : false,
        'controllerEvents' : true,
        'target' : null,
        'title' : null,
        'titleAlign' : 'left',
        'content' : null,
        'type' : 'tooltip',                             // tooltip | container
        'showIcon' : true,
        'showLabel' : false,
        'tooltipConstructor' : 'Com.Tooltip',
        'tooltipParams' : {
            'hold' : true,
            'className' : 'com__help-bubble__tooltip',
        },
        'containerConstructor' : 'Com.DialogContainer',
        'containerParams' : {
            'renderTitle' : true,
            'destructOnClose' : true
        }
    }
},
function(params){
    var that = this;
    // Call parent class construct in current context
    Com.AbstractController.apply(that, arguments);
});

cm.getConstructor('Com.HelpBubble', function(classConstructor, className, classProto, classInherit){
    classProto.onValidateParams = function(){
        var that = this;
        // Set tooltip align
        switch (that.params.align) {
            case 'left':
                that.params.tooltipParams.left = 0;
                break;
            case 'right':
                that.params.tooltipParams.left = 'targetWidth - selfWidth';
                break;
        }
    };
    
    classProto.onDestruct = function(){
        var that = this;
        that.components['container'] && cm.isFunction(that.components['container'].destruct) && that.components['container'].destruct();
        that.components['tooltip'] && cm.isFunction(that.components['tooltip'].destruct) && that.components['tooltip'].destruct();
    };

    classProto.renderView = function(){
        var that = this;
        // Structure
        that.nodes['container'] = cm.node('span', {'class' : 'com__help-bubble'},
            that.nodes['button'] = cm.node('a', {'class' : 'com__help-bubble__title'}),
            that.nodes['content'] = cm.node('span', {'class' : 'com__help-bubble__content'})
        );
        // Align
        cm.addClass(that.nodes['container'], ['pull', that.params.align].join('-'));
        // Icon
        if(that.params['showIcon']){
            that.nodes['icon'] = cm.node('span', {'class' : 'icon default linked'});
            cm.appendChild(that.nodes['icon'], that.nodes['button']);
        }
        // Label
        if(that.params['showLabel']){
            that.nodes['label'] = cm.node('span', {'class' : 'label'}, that.params['title']);
            cm.appendChild(that.nodes['label'], that.nodes['button']);
        }
    };

    classProto.renderViewModel = function(){
        var that = this;

        // Call parent method - renderViewModel
        classInherit.prototype.renderViewModel.apply(that, arguments);

        // Set Content
        if (!cm.isEmpty(that.params['content'])) {
            that.set(that.params['content']);
        }

        // Init Placeholder
        switch(that.params['type']){
            case 'container':
                // Render container
                cm.getConstructor(that.params['containerConstructor'], function(classConstructor){
                    that.components['container'] = new classConstructor(
                        cm.merge(that.params['containerParams'], {
                            'node' : that.nodes['button'],
                            'title' : that.params['title'],
                            'titleAlign' : that.params['titleAlign'],
                            'content' : that.nodes['content']
                        })
                    );
                });
                break;

            default:
                // Render tooltip
                cm.getConstructor(that.params['tooltipConstructor'], function(classConstructor){
                    that.components['tooltip'] = new classConstructor(that.params.tooltipParams);
                    that.components['tooltip']
                        .setTarget(that.nodes['button'])
                        .setContent(that.nodes['content']);
                });
                break;
        }
    };

    /* ******* PUBLIC ******* */

    classProto.set = function(node){
        var that = this;
        if (!cm.isNode(that.nodes['content'])) {
            that.nodes['content'] = cm.node('div');
        }

        cm.clearNode(that.nodes['content']);
        if(cm.isString(node) || cm.isNumber(node)){
            that.nodes['content'].innerHTML = node;
        }else{
            cm.appendNodes(node, that.nodes['content']);
        }
        return that;
    };
});
cm.define('Com.ImageBox', {
    'extend': 'Com.AbstractController',
    'params': {
        'renderStructure': false,
        'embedStructureOnRender': false,
        'controllerEvents': true,
        'customEvents': true,
        'animated': false,
        'effect': 'none',
        'zoom': false,
        'scrollNode': window,
        'galleryPopup': {
            'constructor': 'Com.GalleryPopup',
            'constructorParams': {
                'showCounter': false
            },
        },
    },
},
function() {
    Com.AbstractController.apply(this, arguments);
});

cm.getConstructor('Com.ImageBox', function(classConstructor, className, classProto, classInherit){
    classProto.onConstructStart = function(){
        var that = this;
        // Variables
        that.nodes = {
            'item' : {},
            'buttons' : {
                'preview' : cm.node('div')
            }
        };
        that.dimensions = {};
        that.pageDimensions = {};
        that.isProcessed = false;
        // Binds
        that.animProcessHandler = that.animProcess.bind(that);
    };

    classProto.onRedraw = function(){
        var that = this;
        if(that.params['animated']){
            that.animRestore();
            that.animProcess();
        }
    };

    classProto.renderViewModel = function(){
        var that = this;
        // Call parent method - renderViewModel
        classInherit.prototype.renderViewModel.apply(that, arguments);
        // Animation
        if(that.params['animated']){
            cm.addClass(that.params['node'], 'cm-animate');
            cm.addClass(that.params['node'], ['pre', that.params['effect']].join('-'));
            cm.addEvent(that.params['scrollNode'], 'scroll', that.animProcessHandler);
            that.animProcess();
        }
        // Zoom
        if(that.params['zoom']){
            cm.getConstructor(that.params.galleryPopup.constructor, function(classConstructor){
                that.components['popup'] = new classConstructor(that.params.galleryPopup.constructorParams);
            });
            that.components['popup'].collectItem(that.nodes.item);
            cm.addEvent(that.nodes.buttons['preview'], 'click', that.components['popup'].openHandler);
        }
        // Add custom event
        cm.customEvent.add(that.params['node'], 'redraw', function(){
            that.redraw();
        });
    };

    /* ******* HELPERS ******* */

    classProto.getDimensions = function(){
        var that = this;
        that.dimensions = cm.getRect(that.params['node']);
    };

    classProto.getPageDimensions = function(){
        var that = this;
        that.pageDimensions = cm.getPageSize();
    };

    /* ******* PUBLIC ******* */

    classProto.animProcess = function(){
        var that = this;
        if(!that.isProcessed){
            that.getDimensions();
            that.getPageDimensions();
            // Rules for different block sizes.
            if(that.dimensions['height'] < that.pageDimensions['winHeight']){
                // Rules for block, which size is smaller than page's.
                if(
                    that.dimensions['top'] >= 0 &&
                    that.dimensions['bottom'] <= that.pageDimensions['winHeight']
                ){
                    that.animSet();
                }
            }else{
                // Rules for block, which size is larger than page's.
                if(
                    (that.dimensions['top'] < 0 && that.dimensions['bottom'] >= that.pageDimensions['winHeight'] / 2) ||
                    (that.dimensions['bottom'] > that.pageDimensions['winHeight'] && that.dimensions['top'] <= that.pageDimensions['winHeight'] / 2)
                ){
                    that.animSet();
                }
            }
        }
    };

    classProto.animSet = function(){
        var that = this;
        that.isProcessed = true;
        cm.addClass(that.params['node'], 'animate__animated');
        cm.addClass(that.params['node'], ['animate', that.params['effect']].join('__'));
    };

    classProto.animRestore = function(){
        var that = this;
        that.isProcessed = false;
        cm.removeClass(that.params['node'], 'animate__animated');
        cm.removeClass(that.params['node'], ['animate', that.params['effect']].join('__'));
    };
});

cm.define('Com.ImagePreviewContainer', {
    extend: 'Com.AbstractContainer',
    params: {
        constructor: 'Com.GalleryPopup',
        params: {
            showCounter: false,
            showTitle: true,
        },
        placeholder: false,
        types: {
            video: cm._config.fileTypes.video,
            embed: cm._config.fileTypes.embed,
        },
    },
},
function() {
    var that = this;
    that.item = {};
    Com.AbstractContainer.apply(that, arguments);
});

cm.getConstructor('Com.ImagePreviewContainer', function(classConstructor, className, classProto, classInherit) {
    classProto.onRenderControllerProcess = function() {
        var that = this;
        that.setController();
        return that;
    };

    classProto.set = function(item) {
        var that = this;
        that.clear();
        that.setData(item);
        that.setController();
        return that;
    };

    classProto.clear = function() {
        var that = this;
        that.components.controller && that.components.controller.clear();
        return that;
    };

    classProto.setData = function(item) {
        var that = this;
        that.item = {
            type: 'image',
            src: item.url,
            mime: item.mime || item.type,
            title: item.name,
        };
        if (
            !cm.isEmpty(that.item.mime) &&
            (that.params.types.embed.test(that.item.mime) || that.params.types.video.test(that.item.mime))
        ) {
            that.item.type = 'iframe';
        }
        return that;
    };

    classProto.setController = function() {
        var that = this;
        that.components.controller && that.components.controller.add(that.item);
        return that;
    };
});

cm.define('Com.Menu', {
    extend: 'Com.AbstractController',
    events: [
        'onShow',
        'onHide',
    ],
    params: {
        controllerEvents: true,
        renderStructure: false,
        embedStructureOnRender: false,
        embedStructure: 'append',

        targetEvent: 'click',
        top: 'targetHeight',
        left: 0,
        adaptiveFrom: null,
        adaptiveTop: null,
        adaptiveLeft: null,
        minWidth: 'targetWidth',
        iconClasses: ['cm-i', 'cm-i__chevron-down', 'xx-small'],

        tooltip: {
            constructor: 'Com.Tooltip',
            constructorParams: {
                className: 'com__menu-tooltip',
                targetEvent: 'click',
                hideOnReClick: true,
                theme: null,
                hold: true,
                delay: 0,
                ariaRole: 'menu',
            },
        },
    },
    strings: {
        label: 'Actions',
    },
},
function(params) {
    Com.AbstractController.apply(this, arguments);
});

cm.getConstructor('Com.Menu', function(classConstructor, className, classProto, classInherit) {
    classProto.construct = function() {
        const that = this;

        // Variables
        that.nodes = {
            button: cm.node('div'),
            target: cm.node('div'),
        };

        // Call parent method
        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.validateParams = function(){
        const that = this;
        that.triggerEvent('onValidateParamsStart');

        // ToDo: deprecated legacy parameter
        if (!cm.isEmpty(that.params.event)) {
            that.params.targetEvent = that.params.event;
        }
        that.triggerEvent('onValidateParamsProcess');

        // Tooltip parameters
        const tooltipParams = [
            'targetEvent',
            'minWidth',
            'top',
            'left',
            'adaptiveFrom',
            'adaptiveTop',
            'adaptiveLeft',
        ];
        cm.forEach(tooltipParams, item => {
            if (typeof that.params[item] !== 'undefined') {
                that.params.tooltip.constructorParams[item] = that.params[item];
            }
        });

        that.triggerEvent('onValidateParams');
        that.triggerEvent('onValidateParamsEnd');
    };

    classProto.setAttributes = function(){
        const that = this;

        // Call parent method
        classInherit.prototype.setAttributes.apply(that, arguments);

        // Set accessible attributes
        that.nodes.container.setAttributes('role', 'button');
        that.nodes.container.setAttributes('tabindex', '0');
        that.nodes.container.setAttributes('aria-haspopup', 'true');
        that.nodes.container.setAttributes('aria-controls', 'menu');
    };

    classProto.renderView = function() {
        const that = this;

        // Structure
        that.nodes.container = cm.node('a', {classes: ['com__menu', 'com__menu--link'], title: that.msg('label')},
            cm.node('div', {classes: 'label'}, that.msg('label')),
            cm.node('div', {classes: that.params.iconClasses}),
            that.nodes.target = cm.node('div', {classes: ['pt__menu', 'pt__menu--tooltip']},
                that.nodes.holder = cm.node('ul', {classes: 'pt__menu-dropdown'})
            )
        );

        that.nodes.button = that.nodes.container;
    };

    classProto.renderViewModel = function() {
        const that = this;

        // Call parent method
        classInherit.prototype.renderViewModel.apply(that, arguments);

        // Tooltip
        cm.getConstructor(that.params.tooltip.constructor, classConstructor => {
            that.components.tooltip = new classConstructor(
                cm.merge(that.params.tooltip.constructorParams, {
                    target: that.nodes.container || that.nodes.button,
                    content: that.nodes.target,
                    events: {
                        onShowStart: function() {
                            cm.addClass(that.nodes.button, 'active');
                            that.components.tooltip.focus();
                            that.triggerEvent('onShow');
                        },
                        onHideStart: function() {
                            cm.removeClass(that.nodes.button, 'active');
                            that.nodes.button.focus();
                            that.triggerEvent('onHide');
                        },
                    },
                })
            );
        });
    };

    /******** PUBLIC ********/

    classProto.show = function() {
        const that = this;
        that.components.tooltip && that.components.tooltip.show();
        return that;
    };

    classProto.hide = function() {
        const that = this;
        that.components.tooltip && that.components.tooltip.hide();
        return that;
    };

    classProto.getNodes = function(key) {
        const that = this;
        return that.nodes[key] || that.nodes;
    };
});
cm.define('Com.MultiField', {
    'extend' : 'Com.AbstractController',
    'events' : [
        'onItemAdd',
        'onItemAddEnd',
        'onItemRemove',
        'onItemRemoveEnd',
        'onItemShow',
        'onItemShowEnd',
        'onItemHide',
        'onItemHideEnd',
        'onItemProcess',
        'onItemProcessEnd',
        'onItemSort',
        'onItemIndexChange'
    ],
    'params' : {
        'renderStructure' : false,
        'embedStructure' : 'append',
        'embedStructureOnRender' : false,
        'mode' : 'create',                              // create - add /remove fields by provided template, edit - show / hide only pre-rendered fields
        'sortable' : true,                              // Use drag and drop to sort items
        'showControls' : true,
        'showList' : true,
        'renderItems' : 0,                              // Render count of fields by default
        'max' : 0,                                      // 0 - infinity
        'template' : null,                              // Html node or string with items template
        'templateAttributeReplace' : false,
        'templateAttribute' : 'name',                   // Replace specified items attribute by pattern, example: data-attribute-name="test[%index%]", available variables: %index%
        'duration' : 'cm._config.animDurationShort',
        'theme' : '',
        'icons' : {
            'drag' : 'icon drag linked',
            'add' : 'icon add linked',
            'remove' : 'icon remove linked'
        },
        'Com.Sortable' : {
            'process' : false
        }
    },
    'strings' : {
        'add' : 'Add',
        'remove' : 'Remove'
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractController.apply(that, arguments);
});

cm.getConstructor('Com.MultiField', function(classConstructor, className, classProto, classInherit){
    classProto.construct = function(){
        var that = this;
        // Variables
        that.nodes = {
            'container' : cm.node('div'),
            'content' : cm.node('div'),
            'toolbar' : {
                'container' : cm.node('div'),
                'add' : cm.node('div'),
                'buttons' : []
            },
            'items' : []
        };
        that.components = {};
        that.items = [];
        that.buttons = [];
        that.isToolbarVisible = true;
        // Call parent method
        classInherit.prototype.construct.apply(that, arguments);
    };

    /* *** SYSTEM *** */

    classProto.renderView = function(){
        var that = this;
        that.triggerEvent('onRenderViewStart');
        that.nodes['container'] = cm.node('div', {'class' : 'com__multifield'});
        that.nodes['content'] = cm.node('div', {'class' : 'com__multifield__content'});
        // List
        if(that.params['showList']){
            cm.appendChild(that.nodes['content'], that.nodes['container']);
        }
        // Toolbar
        if(that.params['showControls']){
            that.nodes['toolbarContainer'] = that.renderToolbarView();
            cm.appendChild(that.nodes['toolbarContainer'], that.nodes['container']);
        }
        that.triggerEvent('onRenderViewProcess');
        that.triggerEvent('onRenderViewEnd');
    };

    classProto.renderToolbarView = function(){
        var that = this,
            nodes = {};
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__multifield__toolbar'},
            nodes['content'] = cm.node('div', {'class' : 'com__multifield__item'},
                nodes['add'] = cm.node('div', {'class' : that.params['icons']['add'], 'title' : that.lang('add')})
            )
        );
        // Add button events
        if(that.params['mode'] === 'create'){
            cm.addEvent(nodes['add'], 'click', function(e){
                cm.preventDefault(e);
                that.renderItem();
            });
        }else{
            cm.remove(that.nodes['toolbar']['add']);
        }
        // Push
        that.nodes['toolbarView'] = nodes;
        return nodes['container'];
    };

    classProto.renderViewModel = function(){
        var that = this;
        // Call parent method - renderViewModel
        classInherit.prototype.renderViewModel.apply(that, arguments);
        // Init Sortable
        if(that.params['sortable']){
            cm.getConstructor('Com.Sortable', function(classConstructor, className){
                that.components['sortable'] = new classConstructor(that.params[className]);
                that.components['sortable'].addEvent('onSort', function(my, data){
                    var item = that.items.find(function(item){
                        return item['container'] === data['node'];
                    });
                    if(item){
                        that.sortItem(item, data['index']);
                    }
                });
                that.components['sortable'].addGroup(that.nodes['content']);
            });
        }
        // Process collected view
        if(!that.params['renderStructure']){
            that.processCollectedView();
        }
        // Render items
        if(that.params['mode'] === 'create'){
            var length = Math.max(that.params['renderItems'] - that.items.length, 0);
            cm.forEach(length, function(e){
                that.renderItem();
            });
        }
    };

    classProto.processCollectedView = function(){
        var that = this;
        // Toolbar
        that.nodes['toolbarContainer'] = that.nodes['toolbar']['container'];
        if(that.params['mode'] === 'create'){
            cm.addEvent(that.nodes['toolbar']['add'], 'click', function(e){
                cm.preventDefault(e);
                that.renderItem();
            });
        }else{
            cm.remove(that.nodes['toolbar']['add']);
            cm.forEach(that.nodes['toolbar']['buttons'], function(item){
                that.processButtons(item);
            });
        }
        // Process rendered items
        cm.forEach(that.nodes['items'], function(item){
            that.processItem(item);
        });
    };

    classProto.setAttributes = function(){
        var that = this;
        // Call parent method - renderViewModel
        classInherit.prototype.setAttributes.apply(that, arguments);
        // Set theme
        cm.addClass(that.nodes['container'], that.params['theme']);
    };

    /* *** TOOLBAR *** */

    classProto.processButtons = function(item){
        var that = this;
        // Config
        item = cm.merge({
            'id' : null,
            'visible' : null
        }, item);
        // Data config
        item = cm.merge(item, that.getNodeDataConfig(item['container']));
        // Events
        cm.addEvent(item['container'], 'click', function(e){
            cm.preventDefault(e);
            var listItem = that.getItemById(item['id']);
            if(listItem && !listItem.visible){
                that.showItem(listItem);
            }
        });
        // Push
        that.buttons.push(item);
    };

    classProto.toggleToolbarVisibility = function(item){
        var that = this;
        if(that.params['showControls']){
            var buttonItem = that.getButtonById(item['id']);
            if(buttonItem && !item['visible']){
                that.showButton(buttonItem);
            }
            if(that.params['mode'] === 'create'){
                if(that.params['max'] > 0 && that.items.length === that.params['max']){
                    that.hideToolbar();
                }else{
                    that.showToolbar();
                }
            }else{
                if(that.isAllItemsVisible()){
                    that.hideToolbar();
                }else{
                    that.showToolbar();
                }
            }
            if(buttonItem && item['visible']){
                that.hideButton(buttonItem);
            }
        }
    };

    classProto.showButton = function(item){
        var that = this;
        item['visible'] = true;
        cm.removeClass(item['container'], 'is-hidden');
    };

    classProto.hideButton = function(item){
        var that = this;
        item['visible'] = false;
        cm.addClass(item['container'], 'is-hidden');
    };

    classProto.showToolbar = function(){
        var that = this;
        if(!that.isToolbarVisible){
            that.isToolbarVisible = true;
            // Prepare
            that.nodes['toolbarContainer'].style.overflow = 'hidden';

            // Animate
            cm.transition(that.nodes['toolbarContainer'], {
                'properties' : {
                    'height' : that.nodes['toolbarContainer'].scrollHeight + 'px',
                    'opacity' : 1
                },
                'duration' : that.params['duration'],
                'easing' : cm._config.motionSmooth,
                'clear' : true,
                'onStop' : function(){
                    that.nodes['toolbarContainer'].style.overflow = '';
                }
            });
        }
        return that;
    };

    classProto.hideToolbar = function(){
        var that = this;
        if(that.isToolbarVisible){
            that.isToolbarVisible = false;
            // Prepare
            that.nodes['toolbarContainer'].style.overflow = 'hidden';
            // Animate
            cm.transition(that.nodes['toolbarContainer'], {
                'properties' : {
                    'height' : '0px',
                    'opacity' : 0
                },
                'duration' : that.params['duration'],
                'easing' : cm._config.motionSmooth
            });
        }
        return that;
    };

    /* *** ITEMS *** */

    classProto.renderItem = function(item, params){
        var that = this;
        if(that.params['max'] === 0 || that.items.length < that.params['max']){
            // Config
            item = cm.merge({
                'id' : null,
                'showControls' : null,
                'sortable' : null,
                'visible' : null
            }, item);
            params = cm.merge({
                'triggerEvents' : true,
                'immediately' : false,
                'callback' : function(){}
            }, params);
            if(!cm.isBoolean(item['showControls'])){
                item['showControls'] = that.params['showControls'];
            }
            if(!cm.isBoolean(item['sortable'])){
                item['sortable'] = that.params['sortable'];
            }
            // Structure
            item['container'] = cm.node('div', {'class' : 'com__multifield__item', 'data-node' : 'items:[]:container'},
                item['content'] = item['field'] = cm.node('div', {'class' : 'field', 'data-node' : 'field'})
            );
            // Template
            that.renderItemTemplate(that.params['template'], item);
            // Controls
            if(that.params['showControls'] && item['showControls']){
                item['remove'] = cm.node('div', {'class' : that.params['icons']['remove'], 'title' : that.lang('remove'), 'data-node' : 'remove'});
                cm.appendChild(item['remove'], item['container']);
            }
            // Sortable
            if(that.params['sortable'] && item['sortable']){
                item['drag'] = cm.node('div', {'class' : that.params['icons']['drag'], 'data-node' : 'drag'});
                if(that.params['showControls']){
                    cm.insertFirst(item['drag'], item['container']);
                }else{
                    cm.appendChild(item['drag'], item['container']);
                }
            }
            // Embed
            cm.appendChild(item['container'], that.nodes['content']);
            // Process
            params['triggerEvents'] && that.triggerEvent('onItemAdd', item);
            that.processItem(item, {
                'triggerEvents' : params['triggerEvents'],
                'immediately' : params['immediately'],
                'callback' : function(item){
                    params['triggerEvents'] && that.triggerEvent('onItemAddEnd', item);
                    params['callback'](item);
                }
            });
        }
    };

    classProto.processItem = function(item, params){
        var that = this;
        // Config
        item = cm.merge({
            'id' : null,
            'fieldForEnable' : null,
            'showControls' : null,
            'sortable' : null,
            'visible' : null
        }, item);
        params = cm.merge({
            'triggerEvents' : true,
            'immediately' : false,
            'callback' : function(){}
        }, params);
        // Data config
        item = cm.merge(item, that.getNodeDataConfig(item['container']));
        // Validate
        if(!cm.isBoolean(item['showControls'])){
            item['showControls'] = that.params['showControls'];
        }
        if(!cm.isBoolean(item['sortable'])){
            item['sortable'] = that.params['sortable'];
        }
        if(!cm.isBoolean(item['visible'])){
            if(item['field-hidden-visible'] && !cm.isEmpty(item['field-hidden-visible'].value)){
                item.visible = item['field-hidden-visible'].value === '1';
            }else{
                item.visible = true;
            }
        }
        // Controls
        if(that.params['showControls'] && item['showControls']){
            cm.addEvent(item['remove'], 'click', function(e){
                cm.preventDefault(e);
                if(that.params['mode'] === 'create'){
                    that.deleteItem(item);
                }else{
                    that.hideItem(item);
                }
            });
        }else{
            cm.remove(item['remove']);
        }
        // Register sortable item
        if(that.params['sortable'] && item['sortable']){
            that.components['sortable'].addItem(item['container'], that.nodes['content']);
        }else{
            cm.remove(item['drag']);
        }
        // Push
        that.items.push(item);
        that.resetIndexes();
        // Toggle item visibility
        params['triggerEvents'] && that.triggerEvent('onItemProcess', item);
        if(item.visible){
            that.showItem(item, {
                'triggerEvents' : true,
                'immediately' : params['immediately'],
                'callback' : function(){
                    params['triggerEvents'] && that.triggerEvent('onItemProcessEnd', item);
                    params['callback'](item);
                }
            });
        }else{
            that.hideItem(item, {
                'triggerEvents' : true,
                'immediately' : params['immediately'],
                'callback' : function(){
                    params['triggerEvents'] && that.triggerEvent('onItemProcessEnd', item);
                    params['callback'](item);
                }
            });
        }
    };

    classProto.deleteItem = function(item, params){
        var that = this;
        params = cm.merge({
            'triggerEvents' : true,
            'immediately' : false,
            'callback' : function(){}
        }, params);
        // Remove sortable item
        if(that.params['sortable'] && item['sortable']){
            that.components['sortable'].removeItem(item['container']);
        }
        // Remove from array
        that.items = cm.arrayRemove(that.items, item);
        that.resetIndexes();
        // Toggle item visibility
        params['triggerEvents'] && that.triggerEvent('onItemRemove', item);
        that.hideItem(item, {
            'triggerEvents' : params['triggerEvents'],
            'immediately' : params['immediately'],
            'callback' : function(){
                cm.remove(item['container']);
                params['triggerEvents'] && that.triggerEvent('onItemRemoveEnd', item);
                params['callback'](item);
            }
        });
    };

    classProto.hideItem = function(item, params){
        var that = this;
        params = cm.merge({
            'triggerEvents' : true,
            'immediately' : false,
            'callback' : function(){}
        }, params);
        // Process
        item['visible'] = false;
        if(item['field-hidden-visible']){
            item['field-hidden-visible'].value = 0;
        }
        params['triggerEvents'] && that.triggerEvent('onItemHide', item);
        that.hideItemVisibility(item, {
            'triggerEvents' : params['triggerEvents'],
            'immediately' : params['immediately'],
            'callback' : function(){
                params['triggerEvents'] && that.triggerEvent('onItemHideEnd', item);
                params['callback'](item);
            }
        });
        that.toggleToolbarVisibility(item);
    };

    classProto.hideItemVisibility = function(item, params){
        var that = this;
        params = cm.merge({
            'callback' : function(){},
            'immediately' : false,
            'triggerEvents' : true
        }, params);
        // Process
        item['container'].style.overflow = 'hidden';
        item['container'].style.height = item['container'].scrollHeight + 'px';
        cm.transition(item['container'], {
            'immediately' : params['immediately'],
            'properties' : {
                'height' : '0px',
                'opacity' : 0
            },
            'duration' : that.params['duration'],
            'easing' : cm._config.motionSmooth,
            'onStop' : function(){
                params['callback'](item);
            }
        });
    };

    classProto.showItem = function(item, params){
        var that = this;
        params = cm.merge({
            'triggerEvents' : true,
            'immediately' : false,
            'callback' : function(){}
        }, params);
        // Process
        item['visible'] = true;
        if(item['field-hidden-visible']){
            item['field-hidden-visible'].value = 1;
        }
        params['triggerEvents'] && that.triggerEvent('onItemShow', item);
        that.showItemVisibility(item, {
            'triggerEvents' : params['triggerEvents'],
            'immediately' : params['immediately'],
            'callback' : function(){
                params['triggerEvents'] && that.triggerEvent('onItemShowEnd', item);
                params['callback'](item);
            }
        });
        that.toggleToolbarVisibility(item);
    };

    classProto.showItemVisibility = function(item, params){
        var that = this;
        params = cm.merge({
            'triggerEvents' : true,
            'immediately' : false,
            'callback' : function(){}
        }, params);
        // Process
        item['container'].style.overflow = 'hidden';
        item['container'].style.height = '0px';
        cm.transition(item['container'], {
            'immediately' : params['immediately'],
            'properties' : {
                'height' : item['container'].scrollHeight + 'px',
                'opacity' : 1
            },
            'duration' : that.params['duration'],
            'easing' : cm._config.motionSmooth,
            'clear' : true,
            'onStop' : function(){
                params['callback'](item);
            }
        });
    };

    classProto.sortItem = function(item, index){
        var that = this;
        // Resort items in array
        that.items.splice(that.items.indexOf(item), 1);
        that.items.splice(index, 0, item);
        that.resetIndexes();
        // Trigger event
        that.triggerEvent('onItemSort', item);
    };

    classProto.resetIndexes = function(){
        var that = this;
        cm.forEach(that.items, function(item, index){
            if(item['index'] !== index){
                // Set index
                item['previousIndex'] = item['index'];
                item['index'] = index;
                // Process data attributes
                if(that.params['templateAttributeReplace']){
                    cm.processDataAttributes(item['field'], that.params['templateAttribute'], {'%index%' : index});
                }
                // Hidden field
                if(item['field-hidden-index']){
                    item['field-hidden-index'].value = index;
                }
                // Trigger event
                that.triggerEvent('onItemIndexChange', item);
            }
        });
    };

    /* ******* TEMPLATE ******* */

    classProto.setTemplate = function(data){
        var that = this;
        that.params['template'] = data;
        return that;
    };

    classProto.renderItemTemplate = function(data, item){
        var that = this,
            nodes;
        if(!cm.isEmpty(data)){
            if(cm.isString(data)){
                nodes = cm.strToHTML(data);
            }else{
                nodes = cm.clone(data, true);
            }
            cm.appendNodes(nodes, item['field']);
        }
    };

    /* ******* PUBLIC ******* */

    classProto.clear = function(params){
        var that = this;
        while(that.items.length){
            that.deleteItem(that.items[0], params);
        }
        return that;
    };

    classProto.addItem = function(item, params){
        var that = this;
        that.renderItem(item, params);
        return that;
    };

    classProto.removeItem = function(item, params){
        var that = this;
        if(cm.isNumber(item) && that.items[item]){
            that.deleteItem(that.items[item], params);
        }else if(cm.inArray(that.items, item)){
            that.deleteItem(item, params);
        }
        return that;
    };

    classProto.removeItemById = function(id, params){
        var that = this,
            item = that.getItemById(id);
        if(item){
            that.deleteItem(item, params);
        }
        return that;
    };

    classProto.getItem = function(index){
        var that = this;
        if(that.items[index]){
            return that.items[index];
        }
        return null;
    };

    classProto.getItemById = function(id){
        var that = this;
        if(cm.isEmpty(id)){
            return;
        }
        return that.items.find(function(item){
            return item['id'] === id;
        });
    };

    classProto.getItems = function(){
        var that = this;
        return that.items;
    };

    classProto.getButtonById = function(id){
        var that = this;
        if(cm.isEmpty(id)){
            return;
        }
        return that.buttons.find(function(item){
            return item['id'] === id;
        });
    };

    classProto.getButtons = function(){
        var that = this;
        return that.buttons;
    };

    classProto.isAllItemsVisible = function(){
        var that = this;
        var items = that.items.filter(function(item){
            return item['visible'];
        });
        return that.items.length === items.length;
    };
});

cm.define('Com.Notifications', {
    'extend' : 'Com.AbstractController',
    'events' : [
        'onAdd',
        'onRemove',
        'onClear'
    ],
    'params' : {
        'renderStructure' : true,
        'embedStructureOnRender' : true,
        'embedStructure' : 'append',
        'iconClasses' : ['icon', 'small', 'linked'],
        'closable' : true,
        'items': [],
        'Com.ToggleBox' : {
            'toggleTitle' : false,
            'className' : null,
            'duration' : 'cm._config.animDuration',
        }
    },
    'strings' : {
        'close' : 'Close',
        'more' : 'Read more'
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractController.apply(that, arguments);
});

cm.getConstructor('Com.Notifications', function(classConstructor, className, classProto, classInherit){
    classProto.construct = function(){
        var that = this;
        that.items = [];
        // Call parent method - construct
        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.renderView = function(){
        var that = this;

        // Structure
        that.nodes['container'] = cm.node('div', {'classes' : 'com__notifications is-hidden'},
            that.nodes['list'] = cm.node('ul')
        );

        // Render items
        cm.forEach(that.params.items, that.add.bind(that));
    };

    classProto.clear = function(){
        var that = this;
        while(that.items.length){
            that.remove(that.items[0]);
        }
        that.triggerEvent('onClear');
        return that;
    };

    classProto.add = function(item){
        var that = this;
        
        // Config
        item = cm.merge({
            'label' : '',
            'type' : 'warning',           // success | warning | danger
            'messages' : [],
            'collapsed' : true,
            'closable': that.params['closable'],
            'nodes' : {}
        }, item);
        
        // Structure
        item['nodes']['container'] = cm.node('li', {'classes' : item['type']},
            item['nodes']['descr'] = cm.node('div', {'classes' : 'descr'}),
            item['nodes']['messages'] = cm.node('div', {'classes' : 'messages'},
                item['nodes']['messagesList'] = cm.node('ul')
            )
        );
        
        // Close action
        if (item['closable']) {
            item.iconClasses = cm.clone(that.params.iconClasses);
            item.iconClasses.push(['svg__close', item['type']].join('-'));
            item['nodes']['close'] = cm.node('div', {'classes' : item.iconClasses, 'title' : that.lang('close'), 'role' : 'button', 'tabindex' : 0});
            cm.insertFirst(item['nodes']['close'], item['nodes']['container']);
            cm.click.add(item['nodes']['close'], function(){
                that.remove(item);
            });
        }
        
        // Label
        if(!cm.isNode(item['label']) && !cm.isTextNode(item['label'])){
            item['label'] = cm.node('div', {'innerHTML' : item['label']});
        }
        cm.appendChild(item['label'], item['nodes']['descr']);
        
        // Messages
        if(!cm.isEmpty(item['messages'])){
            // Button
            item['nodes']['button'] = cm.node('a', {'classes' : 'more'}, that.lang('more'));
            cm.insertFirst(item['nodes']['button'], item['nodes']['descr']);
            // List
            cm.forEach(item['messages'], function(message){
                cm.appendChild(cm.node('li', message), item['nodes']['messagesList']);
            });
            // Toggle
            cm.getConstructor('Com.ToggleBox', function(classConstructor){
                item['controller'] = new classConstructor(
                    cm.merge(that.params['Com.ToggleBox'], {
                        'nodes' : {
                            'container' : item['nodes']['container'],
                            'button' : item['nodes']['button'],
                            'target' : item['nodes']['messages']
                        }
                    })
                );
            });
        }
        
        // Embed
        cm.appendChild(item['nodes']['container'], that.nodes['list']);
        cm.removeClass(that.nodes['container'], 'is-hidden');
        
        // Push
        that.items.push(item);
        that.triggerEvent('onAdd', item);
        return that;
    };

    classProto.remove = function(item){
        var that = this;
        cm.remove(item['nodes']['container']);
        cm.arrayRemove(that.items, item);
        if(that.items.length === 0){
            cm.addClass(that.nodes['container'], 'is-hidden');
        }
        that.triggerEvent('onRemove', item);
        return that;
    };

    classProto.getLength = function(){
        var that = this;
        return that.items.length;
    };
});

cm.define('Com.OldBrowserAlert', {
    'modules' : [
        'Params',
        'Events',
        'Langs',
        'Storage',
        'Stack'
    ],
    'events' : [
        'onRender'
    ],
    'params' : {
        'name' : 'default',
        'remember' : true,
        'versions' : {
            'IE' : 10,
            'FF' : 31,
            'Chrome' : 40,
            'Safari' : 6,
            'Opera' : 26
        }
    },
    'strings' : {
        'title' : 'Thank you for visiting our site!',
        'descr' : 'It seems that you are using an outdated browser <b>(%browser% %version%)</b>. As a result, we cannot provide you with the best user experience while visiting our site. Please upgrade your <b>%browser%</b> to version <b>%minimum_version%</b> or above, or use another standards based browser such as Firefox, Chrome or Safari, by clicking on the icons below.',
        'continue' : 'Skip for now'
    }
},
function(params){
    var that = this,
        userAgent = Com.UA.get();

    that.nodes = {};
    that.components = {};

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.addToStack();
        check();
        that.triggerEvent('onRender');
    };

    var check = function(){
        cm.forEach(that.params['versions'], function(version, browser){
            if(Com.UA.is(browser) && Com.UA.isVersion() < version){
                // Parse description string, insert browser name and version
                that.params['langs']['descr'] = that.lang('descr', {
                    '%browser%' : userAgent['full_name'],
                    '%version%' : userAgent['full_version'],
                    '%minimum_version%' : version
                });
                // Render window
                if(!that.params['remember'] || (that.params['remember'] && !that.storageRead('isShow'))){
                    render();
                }
            }
        });
    };

    var render = function(){
        // Structure
        that.nodes['container'] = cm.node('div', {'class' : 'com__oldbrowser-alert'},
            cm.node('div', {'class' : 'b-descr'},
                cm.node('p', {'innerHTML' : that.lang('descr')})
            ),
            cm.node('ul', {'class' : 'b-browsers'},
                cm.node('li', cm.node('a', {'class' : 'icon linked chrome', 'title' : 'Google Chrome', 'href' : 'http://www.google.com/chrome/', 'target' : '_blank'})),
                cm.node('li', cm.node('a', {'class' : 'icon linked firefox', 'title' : 'Mozilla Firefox', 'href' : 'http://www.mozilla.com/', 'target' : '_blank'})),
                cm.node('li', cm.node('a', {'class' : 'icon linked safari', 'title' : 'Apple Safari', 'href' : 'http://www.apple.com/safari/', 'target' : '_blank'})),
                cm.node('li', cm.node('a', {'class' : 'icon linked msie', 'title' : 'Microsoft Internet Explorer', 'href' : 'http://ie.microsoft.com/', 'target' : '_blank'}))
            ),
            cm.node('div', {'class' : 'form'},
                cm.node('div', {'class' : 'btn-wrap pull-center'},
                    that.nodes['button'] = cm.node('input', {'type' : 'button', 'value' : that.lang('continue')})
                )
            )
        );
        // Init dialog
        cm.getConstructor('Com.Dialog', function(classConstructor){
            that.components['dialog'] = new classConstructor({
                'title' : that.lang('title'),
                'content' : that.nodes['container'],
                'autoOpen' : false,
                'width' : 500,
                'events' : {
                    'onClose' : function(){
                        if(that.params['remember']){
                            that.storageWrite('isShow', true);
                        }
                    }
                }
            });
            // Add event on continue button
            cm.addEvent(that.nodes['button'], 'click', that.components['dialog'].close);
            // Open dialog
            that.components['dialog'].open();
        });
    };

    /* ******* MAIN ******* */

    init();
});

cm.define('Com.Overlay', {
    'modules' : [
        'Params',
        'Events',
        'Langs',
        'Stack'
    ],
    'events' : [
        'onRender',
        'onOpenStart',
        'onOpen',
        'onOpenEnd',
        'onCloseStart',
        'onClose',
        'onCloseEnd'
    ],
    'params' : {
        'name' : '',
        'container' : 'document.body',
        'appendMode' : 'appendChild',
        'theme' : 'default',                // transparent | default | light | solid-light | dark
        'className' : '',
        'position' : 'fixed',
        'lazy' : false,
        'delay' : 'cm._config.lazyDelay',
        'content' : null,
        'showSpinner' : true,
        'spinnerSize' : 'default',
        'showContent' : true,
        'showProgress' : false,
        'autoOpen' : true,
        'autoClose' : false,                // ToDo: implement
        'removeOnClose' : true,
        'destructOnRemove' : false,
        'transition' : 'ease',
        'duration' : 'cm._config.animDurationLong'
    }
},
function(params){
    var that = this;

    that.nodes = {};
    that.currentTheme = null;
    that.isDestructed = false;
    that.isOpen = false;
    that.isShowSpinner = false;
    that.isShowContent = false;
    that.openInterval = null;
    that.delayInterval = null;

    var init = function(){
        // Binds
        that.openHandler = that.open.bind(that);
        that.closeHandler = that.close.bind(that);
        that.toggleHandler = that.toggle.bind(that);
        // Params
        that.params['controllerEvents'] && that.bindControllerEvents(); // ToDo: move to abstract controller
        getLESSVariables();
        that.setParams(params);
        that.convertEvents(that.params['events']);
        validateParams();
        render();
        that.addToStack(that.nodes['container']);
        that.triggerEvent('onRender');
        that.params['autoOpen'] && that.open();
    };

    var getLESSVariables = function(){
        that.params['duration'] = cm.getTransitionDurationFromLESS('PtOverlay-Duration', that.params['duration']);
    };

    var validateParams = function(){
        that.params['position'] = cm.inArray(['static', 'relative', 'absolute', 'fixed'], that.params['position']) ? that.params['position'] : 'fixed';
    };

    var render = function(){
        // Structure
        that.nodes['container'] = cm.node('div', {'class' : 'com__overlay pt__overlay', 'aria-busy' : 'false', 'aria-live' : 'assertive'},
            that.nodes['spinner'] = cm.node('div', {'class' : ['overlay__spinner', ['size', that.params['spinnerSize']].join('--')]}),
            that.nodes['content'] = cm.node('div', {'class' : 'overlay__content'}),
            that.nodes['progress'] = cm.node('progress', {'class' : 'overlay__progress', 'value' : 0, 'min' : 0, 'max' : 100})
        );
        // CSS Class
        cm.addClass(that.nodes['container'], that.params['className']);
        cm.addClass(that.nodes['container'], ['transition', that.params['transition']].join('-'));
        // Set position
        that.nodes['container'].style.position = that.params['position'];
        // Set content
        !cm.isEmpty(that.params['content']) && that.setContent(that.params['content']);
        // Show spinner
        that.params['showSpinner'] && that.showSpinner();
        // Show content
        that.params['showContent'] && that.showContent();
        // Set theme
        that.setTheme(that.params['theme']);
    };

    var triggerOpenEvents = function(){
        that.triggerEvent('onOpen')
            .triggerEvent('onOpenEnd');
    };

    var triggerCloseEvents = function(){
        that.triggerEvent('onClose')
            .triggerEvent('onCloseEnd');
        if(that.params['removeOnClose']){
            that.remove();
        }
    };

    var openProcess = function(isImmediately, callback){
        that.isOpen = true;
        callback = cm.isFunction(callback) ? callback : function(){};
        // Set immediately animation hack
        if(isImmediately){
            cm.addClass(that.nodes['container'], 'is-immediately');
        }
        if(!cm.inDOM(that.nodes['container'])){
            cm[that.params['appendMode']](that.nodes['container'], that.params['container']);
        }
        that.triggerEvent('onOpenStart');
        that.nodes['container'].ariaBusy = 'true';
        cm.addClass(that.nodes['container'], 'is-open', true);
        // Remove immediately animation hack
        that.openInterval && clearTimeout(that.openInterval);
        if(isImmediately){
            that.openInterval = setTimeout(function(){
                cm.removeClass(that.nodes['container'], 'is-immediately');
                triggerOpenEvents();
                callback();
            }, 5);
        }else{
            that.openInterval = setTimeout(function(){
                triggerOpenEvents();
                callback();
            }, that.params['duration'] + 5);
        }
    };

    var closeProcess = function(isImmediately, callback){
        that.isOpen = false;
        callback = cm.isFunction(callback) ? callback : function(){};
        // Set immediately animation hack
        if(isImmediately){
            cm.addClass(that.nodes['container'], 'is-immediately');
        }
        that.triggerEvent('onCloseStart');
        that.nodes['container'].ariaBusy = 'false';
        cm.removeClass(that.nodes['container'], 'is-open');
        // Remove immediately animation hack
        that.openInterval && clearTimeout(that.openInterval);
        if(isImmediately){
            that.openInterval = setTimeout(function(){
                cm.removeClass(that.nodes['container'], 'is-immediately');
                triggerCloseEvents();
                callback();
            }, 5);
        }else{
            that.openInterval = setTimeout(function(){
                triggerCloseEvents();
                callback();
            }, that.params['duration'] + 5);
        }
    };

    /* ******* MAIN ******* */

    that.open = function(isImmediately, callback){
        if(!that.isOpen){
            if(that.params['lazy'] && !isImmediately){
                that.delayInterval && clearTimeout(that.delayInterval);
                that.delayInterval = setTimeout(function(){
                    openProcess(isImmediately, callback);
                }, that.params['delay']);
            }else{
                openProcess(isImmediately, callback);
            }
        }
        return that;
    };

    that.close = function(isImmediately, callback){
        that.openInterval && clearTimeout(that.openInterval);
        that.delayInterval && clearTimeout(that.delayInterval);
        if(that.isOpen){
            closeProcess(isImmediately, callback);
        }
        return that;
    };

    that.toggle = function(value){
        if(value){
            that.open();
        }else{
            that.close();
        }
        return that;
    };

    that.remove = function(){
        if(that.isOpen){
            that.close(function(){
                if(!that.params['removeOnClose']){
                    that.remove();
                }
            });
        }else{
            that.params['destructOnRemove'] && that.destruct();
            cm.remove(that.nodes['container']);
        }
        return that;
    };

    that.setTheme = function(theme){
        that.currentTheme && cm.removeClass(that.nodes['container'], ['theme', that.currentTheme].join('-'));
        theme && cm.addClass(that.nodes['container'], ['theme', theme].join('-'));
        that.currentTheme = theme;
        return that;
    };

    that.showSpinner = function(){
        that.isShowSpinner = true;
        cm.addClass(that.nodes['spinner'], 'is-show');
        return that;
    };

    that.hideSpinner = function(){
        that.isShowSpinner = false;
        cm.removeClass(that.nodes['spinner'], 'is-show');
        return that;
    };

    that.setContent = function(node){
        if(cm.isEmpty(node)){
            cm.clearNode(that.nodes['content']);
        }else{
            if(!cm.isNode(node)){
                node = node.toString();
                node = cm.node('div', {'class' : 'inner', 'innerHTML' : node});
            }
            cm.appendChild(node, that.nodes['content']);
        }
        return that;
    };

    that.showContent = function(){
        that.isShowContent = true;
        cm.addClass(that.nodes['content'], 'is-show');
        return that;
    };

    that.hideContent = function(){
        that.isShowContent = false;
        cm.removeClass(that.nodes['content'], 'is-show');
        return that;
    };

    that.showProgress = function(){
        cm.addClass(that.nodes['progress'], 'is-show');
        return that;
    };

    that.hideProgress = function(){
        cm.removeClass(that.nodes['progress'], 'is-show');
        return that;
    };

    that.setProgress = function(total, value){
        that.nodes['progress'].max = total;
        that.nodes['progress'].value = value;
        if(that.params['showProgress']){
            that.showProgress();
        }
        return that;
    };

    that.embed = function(node, appendMode){
        appendMode = !cm.isUndefined(appendMode) ? appendMode : that.params['appendMode'];
        if(cm.isNode(node)){
            that.params['container'] = node;
            that.params['appendMode'] = appendMode;
            if(cm.inDOM(that.nodes['container'])){
                cm[that.params['appendMode']](that.nodes['container'], that.params['container']);
            }
        }
        return that;
    };

    that.destruct = function(){
        if(!that.isDestructed){
            that.isDestructed = true;
            that.removeFromStack();
            cm.remove(that.nodes['container']);
        }
        return that;
    };

    that.bindControllerEvents = function(){
        // ToDo: refactor overlay class to abstract controller
        cm.forEach(that._raw['events'], function(name){
            if(!that[name]){
                that[name] = function(){};
            }
            if(!that[name + 'Handler']){
                that[name + 'Handler'] = that[name].bind(that);
            }
            that.addEvent(name, that[name + 'Handler']);
        });
    };

    that.getNodes = function(key){
        return that.nodes[key] || that.nodes;
    };

    init();
});

cm.define('Com.Pagination', {
    'extend' : 'Com.AbstractController',
    'events' : [
        'onRebuild',
        'onStart',
        'onAbort',
        'onError',
        'onPageRender',
        'onPageRenderEnd',
        'onPageRenderError',
        'onPageSwitched',
        'onPageReady',
        'onEnd',
        'onSetCount'
    ],
    'params' : {
        'controllerEvents' : true,
        'renderStructure' : false,                                  // Render wrapper nodes if not exists in html
        'embedStructureOnRender' : false,
        'embedStructure' : 'append',
        'scrollNode' : window,
        'data' : [],                                                // Static data
        'count' : 0,                                                // Total items
        'perPage' : 0,                                              // 0 - render all data in one page
        'startPage' : 1,                                            // Start page
        'startPageToken' : '',
        'pageCount' : 0,
        'autoSend' : true,
        'showLoader' : true,
        'loaderDelay' : 'cm._config.loadDelay',
        'barPosition' : 'bottom',                                   // top | bottom | both, require renderStructure
        'barAlign' : 'left',                                        // left | center | right, require renderStructure
        'barCountLR' : 3,
        'barCountM' : 1,                                            // 1 for drawing 3 center pagination buttons, 2 - 5, 3 - 7, etc
        'switchManually' : false,                                   // Switch pages manually
        'animateSwitch' : false,
        'animateDuration' : 'cm._config.animDuration',
        'animatePrevious' : false,                                  // Animating of hiding previous page, require animateSwitch
        'pageTag' : 'div',
        'pageAttributes' : {
            'class' : 'com__pagination__page'
        },
        'responseCountKey' : 'count',                               // Take items count from response
        'responseKey' : 'data',                                     // Instead of using filter callback, you can provide response array key
        'responseCodeKey' : 'code',
        'responseErrorsKey': 'errors',
        'responseMessageKey' : 'message',
        'responseHTML' : false,                                     // If true, html will append automatically
        'cache' : true,                                             // Cache response data
        'ajax' : {
            'type' : 'json',
            'method' : 'get',
            'url' : '',                                             // Request URL. Variables: %baseUrl%, %page%, %offset%, %token%, %perPage%, %limit%, %callback% for JSONP.
            'params' : ''                                           // Params object. Variables: %baseUrl%, %page%, %offset%, %token%, %perPage%, %limit%, %callback% for JSONP.
        },
        'overlayConstructor' : 'Com.Overlay',
        'overlayParams' : {
            'lazy' : true,
            'position' : 'absolute',
            'autoOpen' : false,
            'removeOnClose' : true
        }
    },
    'strings' : {
        'prev' : 'Previous',
        'next' : 'Next',
        'server_error' : 'An unexpected error has occurred. Please try again later.'
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractController.apply(that, arguments);
});

cm.getConstructor('Com.Pagination', function(classConstructor, className, classProto, classInherit){
    classProto.construct = function(){
        var that = this;
        // variables
        that.nodes = {
            'container' : cm.node('div'),
            'content' : cm.node('div'),
            'pages' : cm.node('div'),
            'bar' : []
        };

        that.components = {};
        that.animations = {};
        that.pages = {};
        that.ajaxHandler = null;
        that.currentAction = null;

        that.isAjax = false;
        that.isProcess = false;
        that.isRendering = false;

        that.page = null;
        that.pageToken = null;
        that.currentPage = null;
        that.previousPage = null;
        that.pageCount = 0;
        // Bind context
        that.nextHanlder = that.next.bind(that);
        that.prevHanlder = that.prev.bind(that);
        // Call parent method - renderViewModel
        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.onConstructEnd = function(){
        var that = this;
        that.params['autoSend'] && that.set(that.params['startPage']);
    };

    classProto.getLESSVariables = function(){
        var that = this;
        that.params['animateDuration'] = cm.getTransitionDurationFromLESS('ComPagination-Duration', that.params['animateDuration']);
    };

    classProto.validateParams = function(){
        var that = this;
        that.triggerEvent('onValidateParamsStart');
        that.triggerEvent('onValidateParams');
        that.triggerEvent('onValidateParamsProcess');
        // If URL parameter exists, use ajax data
        if(!cm.isEmpty(that.params['ajax']['url'])){
            that.isAjax = true;
        }else{
            if(!cm.isEmpty(that.params['data'])){
                that.params['count'] = that.params['data'].length;
            }
            that.params['showLoader'] = false;
        }
        if(that.params['pageCount'] === 0 && that.params['count'] && that.params['perPage']){
            that.pageCount = Math.ceil(that.params['count'] / that.params['perPage']);
        }else{
            that.pageCount = that.params['pageCount'];
        }
        // Set start page token
        that.setToken(that.params['startPage'], that.params['startPageToken']);
        that.triggerEvent('onValidateParamsEnd');
    };

    classProto.renderView = function(){
        var that = this;
        // Render Structure
        that.nodes['container'] = cm.node('div', {'class' : 'com__pagination'},
            that.nodes['content'] = cm.node('div', {'class' : 'com__pagination__content'},
                that.nodes['pages'] = cm.node('div', {'class' : 'com__pagination__pages'})
            )
        );
        // Bars
        if(/top|both/.test(that.params['barPosition'])){
            that.nodes['bar'].push(
                that.callbacks.renderBar(that, {
                    'align' : that.params['barAlign'],
                    'position' : 'top'
                })
            );
        }
        if(/bottom|both/.test(that.params['barPosition'])){
            that.nodes['bar'].push(
                that.callbacks.renderBar(that, {
                    'align' : that.params['barAlign'],
                    'position' : 'bottom'
                })
            );
        }
    };

    classProto.renderViewModel = function(){
        var that = this;
        // Call parent method - renderViewModel
        classInherit.prototype.renderViewModel.apply(that, arguments);
        // Reset styles and variables
        that.resetStyles();
        // Overlay
        cm.getConstructor(that.params['overlayConstructor'], function(classConstructor){
            that.components['loader'] = new classConstructor(
                cm.merge(that.params['overlayParams'], {
                    'container' : that.nodes['content']
                })
            );
        });
        // Animated
        if(that.params['animateSwitch']){
            cm.addClass(that.nodes['container'], 'is-animated');
        }
        that.animations['content'] = new cm.Animation(that.nodes['content']);
    };

    classProto.resetStyles = function(){
        var that = this;
        // Clear render pages
        cm.clearNode(that.nodes['pages']);
    };

    /* ******* CALLBACKS ******* */

    /* *** AJAX *** */

    classProto.callbacks.prepare = function(that, config){
        config = that.callbacks.beforePrepare(that, config);
        config['url'] = cm.strReplace(config['url'], {
            '%perPage%' : that.params['perPage'],
            '%limit%' : that.params['perPage'],
            '%page%' : that.page,
            '%offset%' : (that.page - 1) * that.params['perPage'],
            '%token%' : that.pageToken,
            '%baseUrl%' : cm._baseUrl
        });
        config['params'] = cm.objectReplace(config['params'], {
            '%perPage%' : that.params['perPage'],
            '%limit%' : that.params['perPage'],
            '%page%' : that.page,
            '%offset%' : (that.page - 1) * that.params['perPage'],
            '%token%' : that.pageToken,
            '%baseUrl%' : cm._baseUrl
        });
        config = that.callbacks.afterPrepare(that, config);
        return config;
    };

    classProto.callbacks.beforePrepare = function(that, config){
        return config;
    };

    classProto.callbacks.afterPrepare = function(that, config){
        return config;
    };

    classProto.callbacks.request = function(that, config){
        config = that.callbacks.prepare(that, config);
        that.currentAction = config;
        // Return ajax handler (XMLHttpRequest) to providing abort method.
        return cm.ajax(
            cm.merge(config, {
                'onStart' : function(){
                    that.callbacks.start(that);
                },
                'onSuccess' : function(response){
                    that.callbacks.response(that, config, response);
                },
                'onError' : function(response){
                    that.callbacks.error(that, config, response);
                },
                'onAbort' : function(){
                    that.callbacks.abort(that, config);
                },
                'onEnd' : function(){
                    that.callbacks.end(that);
                }
            })
        );
    };

    classProto.callbacks.filter = function(that, config, response){
        var data = [],
            errorsItem = cm.reducePath(that.params['responseErrorsKey'], response),
            dataItem = cm.reducePath(that.params['responseKey'], response),
            countItem = cm.reducePath(that.params['responseCountKey'], response);
        if(cm.isEmpty(errorsItem)){
            if(!cm.isEmpty(dataItem)){
                data = dataItem;
            }
            if(!cm.isEmpty(countItem)){
                that.setCount(countItem);
            }
        }
        return data;
    };

    classProto.callbacks.response = function(that, config, response, errors, message, code){
        // Set next page
        that.setPage();
        // Response
        if(response){
            response = that.callbacks.filter(that, config, response);
        }
        that.callbacks.render(that, response, errors, message, code);
    };

    classProto.callbacks.error = function(that, config, response){
        var code,
            errors,
            message;
        if(!cm.isEmpty(response)){
            code = cm.reducePath(that.params.responseCodeKey, response);
            errors = cm.reducePath(that.params.responseErrorsKey, response);
            message = cm.reducePath(that.params.responseMessageKey, response);
        }
        that.triggerEvent('onError', {
            'response' : response,
            'code' : code,
            'errors' : errors,
            'message' : message
        });
        that.callbacks.response(that, config, null, errors, message, code);
    };

    classProto.callbacks.abort = function(that, config){
        that.triggerEvent('onAbort');
    };

    /* *** STATIC *** */

    classProto.callbacks.data = function(that, data){
        var length, start, end, pageData;
        that.callbacks.start(that);
        that.setPage();
        if(!cm.isEmpty(data)){
            // Get page data and render
            if(that.params['perPage'] === 0){
                that.callbacks.render(that, data);
            }else if(that.params['perPage'] > 0){
                length = data.length;
                start = (that.page - 1) * that.params['perPage'];
                end = (that.page * that.params['perPage']);
                if(start < length){
                    pageData = data.slice(start , Math.min(end, length));
                    that.callbacks.render(that, pageData);
                }
            }
        }else{
            that.callbacks.render(that, data);
        }
        that.callbacks.end(that);
    };

    classProto.callbacks.cached = function(that, page){
        that.callbacks.start(that);
        that.setPage();
        that.callbacks.append(that, page);
        if(!that.params['switchManually']){
            that.callbacks.switchPage(that, page);
        }
        that.callbacks.end(that);
    };

    /* *** RENDER PAGE *** */

    classProto.callbacks.renderContainer = function(that, page){
        return cm.node(that.params['pageTag'], that.params['pageAttributes']);
    };

    classProto.callbacks.render = function(that, data, errors, message, code){
        that.isRendering = true;
        var page = {
            'page' : that.page,
            'token' : that.pageToken,
            'pages' : that.nodes['pages'],
            'container' : cm.node(that.params['pageTag']),
            'data' : data,
            'code' : code,
            'errors' : errors,
            'message' : message,
            'total' : that.getCount(),
            'isVisible' : true,
            'isRendered' : true,
            'isError' : !data
        };
        if(cm.isEmpty(page['message'])){
            page['message'] = page['errors'];
        }
        // Render page
        page['container'] = that.callbacks.renderContainer(that, page);
        that.pages[that.page] = page;
        that.triggerEvent('onPageRender', page);
        if(page['data']){
            that.callbacks.renderPage(that, page);
        }else{
            that.callbacks.renderError(that, page);
        }
        // Append page
        that.callbacks.append(that, page);
        that.triggerEvent('onPageRenderEnd', page);
        // Switch
        if(!that.params['switchManually']){
            that.callbacks.switchPage(that, page);
        }
    };

    classProto.callbacks.renderPage = function(that, page){
        var nodes;
        if(that.params['responseHTML']){
            nodes = cm.strToHTML(page['data']);
            cm.appendNodes(nodes, page['container']);
        }
    };

    classProto.callbacks.renderError = function(that, page){
        if(that.params['responseHTML']){
            page['container'].appendChild(
                cm.node('div', {'class' : 'cm__empty'}, that.lang('server_error'))
            );
        }
        that.triggerEvent('onPageRenderError', page);
    };

    classProto.callbacks.append = function(that, page){
        cm.appendChild(page['container'], that.nodes['pages']);
        cm.addClass(page['container'], 'is-visible', true);
        that.triggerEvent('onPageReady', page);
    };

    classProto.callbacks.switchPage = function(that, page){
        var contentRect = cm.getRect(that.nodes['content']),
            pageRect = cm.getRect(page['container']);
        // Hide previous page
        if(that.previousPage){
            that.callbacks.hidePage(that, that.pages[that.previousPage]);
        }
        // Show new page
        if(that.params['animateSwitch']){
            that.nodes['content'].style.overflow = 'hidden';
            that.nodes['content'].style.height = [contentRect['height'], 'px'].join('');
            that.animations['content'].go({'style' : {'height' : [pageRect['height'], 'px'].join('')}, 'duration' : that.params['animateDuration'], 'anim' : 'smooth', 'onStop' : function(){
                that.nodes['content'].style.overflow = 'visible';
                that.nodes['content'].style.height = 'auto';
                that.isRendering = false;
                that.triggerEvent('onPageSwitched', page);
            }});
        }else{
            that.isRendering = false;
            that.triggerEvent('onPageSwitched', page);
        }
    };

    classProto.callbacks.hidePage = function(that, page){
        page['isVisible'] = false;
        if(that.params['animateSwitch']){
            if(that.params['animatePrevious']){
                cm.removeClass(page['container'], 'is-visible');
                setTimeout(function(){
                    cm.remove(page['container']);
                }, that.params['animateDuration']);
            }else{
                setTimeout(function(){
                    cm.remove(page['container']);
                    cm.removeClass(page['container'], 'is-visible');
                }, that.params['animateDuration']);
            }
        }else{
            cm.remove(page['container']);
            cm.removeClass(page['container'], 'is-visible');
        }
    };

    /* *** RENDER BAR *** */

    classProto.callbacks.renderBar = function(that, params){
        params = cm.merge({
            'align' : 'left',
            'position' : 'bottom'
        }, params);
        var item = {};
        // Structure
        item['container'] = cm.node('div', {'class' : 'com__pagination__bar'},
            item['items'] = cm.node('ul')
        );
        cm.addClass(item['container'], ['pull', params['align']].join('-'));
        // Embed
        switch(params['position']){
            case 'top':
                cm.insertFirst(item['container'], that.nodes['container']);
                break;
            case 'bottom':
                cm.insertLast(item['container'], that.nodes['container']);
                break;
        }
        return item;
    };

    classProto.callbacks.rebuildBars = function(that){
        cm.forEach(that.nodes['bar'], function(item){
            that.callbacks.rebuildBar(that, item);
        });
    };

    classProto.callbacks.rebuildBar = function(that, item){
        // Clear items
        cm.clearNode(item['items']);
        // Show / Hide
        if(that.pageCount < 2){
            cm.addClass(item['container'], 'is-hidden');
        }else{
            cm.removeClass(item['container'], 'is-hidden');
            // Render items
            that.callbacks.renderBarItems(that, item);
        }
    };

    classProto.callbacks.renderBarItems = function(that, item){
        var dots = false;
        // Previous page buttons
        that.callbacks.renderBarArrow(that, item, {
            'text' : '<',
            'title' : that.lang('prev'),
            'className' : 'prev',
            'callback' : that.prevHanlder
        });
        // Page buttons
        cm.forEach(that.pageCount, function(page){
            ++page;
            if(page === that.page){
                that.callbacks.renderBarItem(that, item, {
                    'page' : page,
                    'isActive' : true
                });
                dots = true;
            }else{
                if(
                    page <= that.params['barCountLR'] ||
                    (that.currentPage && page >= that.page - that.params['barCountM'] && page <= that.page + that.params['barCountM']) ||
                    page > that.pageCount - that.params['barCountLR']
                ){
                    dots = true;
                    that.callbacks.renderBarItem(that, item, {
                        'page' : page,
                        'isActive' : false
                    });
                }else if(dots){
                    dots = false;
                    that.callbacks.renderBarPoints(that, item, {});
                }

            }
        });
        // Next page buttons
        that.callbacks.renderBarArrow(that, item, {
            'text' : '>',
            'title' : that.lang('next'),
            'className' : 'next',
            'callback' : that.nextHanlder
        });
    };

    classProto.callbacks.renderBarArrow = function(that, item, params){
        params = cm.merge({
            'text' : '',
            'title' : '',
            'className' : '',
            'callback' : function(){}
        }, params);
        // Structure
        params['container'] = cm.node('li', {'class' : params['className']},
            params['link'] = cm.node('a', {'title' : params['title']}, params['text'])
        );
        // Events
        cm.addEvent(params['link'], 'click', function(e){
            e = cm.getEvent(e);
            cm.preventDefault(e);
            params['callback']();
        });
        // Append
        item['items'].appendChild(params['container']);
    };

    classProto.callbacks.renderBarPoints = function(that, item, params){
        params = cm.merge({
            'text' : '...',
            'className' : 'points'
        }, params);
        // Structure
        params['container'] = cm.node('li', {'class' : params['className']}, params['text']);
        // Append
        item['items'].appendChild(params['container']);
    };

    classProto.callbacks.renderBarItem = function(that, item, params){
        params = cm.merge({
            'page' : null,
            'isActive' : false
        }, params);
        // Structure
        params['container'] = cm.node('li',
            params['link'] = cm.node('a', params['page'])
        );
        // Active Class
        if(params['isActive']){
            cm.addClass(params['container'], 'active');
        }
        // Events
        cm.addEvent(params['link'], 'click', function(e){
            e = cm.getEvent(e);
            cm.preventDefault(e);
            that.set(params['page']);
        });
        // Append
        item['items'].appendChild(params['container']);
    };

    /* *** HELPERS *** */

    classProto.callbacks.start = function(that){
        that.isProcess = true;
        // Show Loader
        if(that.params['showLoader']){
            that.components['loader'] && that.components['loader'].open();
        }
        cm.addClass(that.nodes['container'], 'is-loading');
        that.triggerEvent('onStart');
    };

    classProto.callbacks.end = function(that){
        that.isProcess = false;
        // Hide Loader
        if(that.params['showLoader']){
            that.components['loader'] && that.components['loader'].close();
        }
        cm.removeClass(that.nodes['container'], 'is-loading');
        that.triggerEvent('onEnd');
    };

    /* ******* PUBLIC ******* */

    classProto.rebuild = function(params){
        var that = this;
        // Cleanup
        if(that.isProcess){
            that.abort();
        }
        that.pages = {};
        that.page = null;
        that.pageToken = null;
        that.currentPage = null;
        that.previousPage = null;
        that.pageCount = 0;
        // Set new parameters
        if(!cm.isEmpty(params)){
            that.setParams(params);
        }
        that.validateParams();
        // Reset styles and variables
        that.resetStyles();
        that.triggerEvent('onRebuild');
        // Render
        that.set(that.params['startPage']);
        return that;
    };

    classProto.set = function(page){
        var that = this,
            config;
        if(that.isProcess){
            that.abort();
        }
        if((!that.pageCount || page <= that.pageCount) && !that.isProcess && !that.isRendering){
            // Preset next page and page token
            that.page = page;
            that.pageToken = that.pages[that.page]? that.pages[that.page]['token'] : '';
            // Render bars
            that.callbacks.rebuildBars(that);
            // Request
            if(!that.currentPage || page !== that.currentPage){
                if(that.params['cache'] && that.pages[that.page] && that.pages[that.page]['isRendered']){
                    that.callbacks.cached(that, that.pages[that.page]);
                }else if(that.isAjax){
                    config = cm.clone(that.params['ajax']);
                    that.ajaxHandler = that.callbacks.request(that, config);
                }else{
                    that.callbacks.data(that, that.params['data']);
                }
            }
        }
        return that;
    };

    classProto.next = function(){
        var that = this;
        that.set(that.pageCount === that.currentPage ? 1 : that.currentPage + 1);
        return that;
    };

    classProto.prev = function(){
        var that = this;
        that.set(that.currentPage - 1 || that.pageCount);
        return that;
    };

    classProto.setToken = function(page, token){
        var that = this;
        if(!that.pages[page]){
            that.pages[page] = {};
        }
        that.pages[page]['token'] = token;
        return that;
    };

    classProto.setCount = function(count){
        var that = this;
        if(!cm.isUndefined(count)){
            count = parseInt(count.toString());
        }
        if(cm.isNumber(count) && count !== that.params['count']){
            that.params['count'] = count;
            if(that.params['pageCount'] === 0 && that.params['count'] && that.params['perPage']){
                that.pageCount = Math.ceil(that.params['count'] / that.params['perPage']);
            }else{
                that.pageCount = that.params['pageCount'];
            }
            that.callbacks.rebuildBars(that);
            that.triggerEvent('onSetCount', count);
        }
        return that;
    };

    classProto.getCount = function(){
        var that = this;
        return that.params['count'];
    };

    classProto.setAction = function(o, mode, update){
        var that = this;
        mode = cm.inArray(['raw', 'update', 'current'], mode) ? mode : 'current';
        switch(mode){
            case 'raw':
                that.params['ajax'] = cm.merge(that._raw.params['ajax'], o);
                break;
            case 'current':
                that.params['ajax'] = cm.merge(that.params['ajax'], o);
                break;
            case 'update':
                that.params['ajax'] = cm.merge(that._update.params['ajax'], o);
                break;
        }
        if(update){
            that._update.params['ajax'] = cm.clone(that.params['ajax']);
        }
        that.rebuild();
        return that;
    };

    classProto.getAction = function(){
        var that = this;
        return that.params['ajax'];
    };

    classProto.getCurrentAction = function(){
        var that = this;
        return that.currentAction;
    };

    classProto.setPage = function(){
        var that = this;
        that.previousPage = that.currentPage;
        that.currentPage = that.page;
        return that;
    };

    classProto.abort = function(){
        var that = this;
        if(that.ajaxHandler && that.ajaxHandler.abort){
            that.ajaxHandler.abort();
        }
        return that;
    };

    classProto.isOwnNode = classProto.isParent = function(node, flag){
        var that = this;
        return cm.isParent(that.nodes['container'], node, flag);
    };
});

cm.define('Com.Palette', {
    'modules' : [
        'Params',
        'Events',
        'Langs',
        'Structure',
        'DataConfig',
        'Stack'
    ],
    'require' : [
        'tinycolor'
    ],
    'events' : [
        'onRenderStart',
        'onRender',
        'onDraw',
        'onSet',
        'onSelect',
        'onChange'
    ],
    'params' : {
        'node' : cm.node('div'),
        'container' : null,
        'name' : '',
        'embedStructure' : 'replace',
        'value' : 'transparent',
        'defaultValue' : 'rgb(255, 255, 255)',
        'setOnInit' : true,
        'Com.TintRange' : {
            'direction' : 'vertical',
            'theme' : 'theme--arrows',
            'setHiddenInput' : false
        },
        'Com.OpacityRange' : {
            'direction' : 'vertical',
            'theme' : 'theme--arrows',
            'setHiddenInput' : false
        }
    },
    'strings' : {
        'new' : 'new',
        'previous' : 'previous',
        'select' : 'Select',
        'hue' : 'Hue',
        'opacity' : 'Opacity',
        'hex' : 'HEX'
    }
},
function(params){
    var that = this,
        paletteContext;

    that.nodes = {};
    that.components = {};
    that.value = null;
    that.previousValue = null;

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataConfig(that.params['node']);
        that.addToStack(that.params['node']);
        that.triggerEvent('onRenderStart');
        render();
        initComponents();
        that.addToStack(that.nodes['container']);
        that.triggerEvent('onRender');
        that.params['setOnInit'] && that.set(that.params['value'], false);
    };

    var render = function(){
        // Structure
        that.nodes['container'] = cm.node('div', {'class' : 'com__palette'},
            that.nodes['inner'] = cm.node('div', {'class' : 'inner'},
                cm.node('div', {'class' : 'b-palette'},
                    that.nodes['paletteZone'] = cm.node('div', {'class' : 'inner'},
                        that.nodes['paletteDrag'] = cm.node('div', {'class' : 'drag'}),
                        that.nodes['paletteCanvas'] = cm.node('canvas', {'width' : '100%', 'height' : '100%'})
                    )
                ),
                cm.node('div', {'class' : 'b-range', 'title' : that.lang('hue')},
                    that.nodes['tintZone'] = cm.node('div', {'class' : 'inner'})
                ),
                cm.node('div', {'class' : 'b-range b-opacity', 'title' : that.lang('opacity')},
                    that.nodes['opacityZone'] = cm.node('div', {'class' : 'inner'})
                ),
                cm.node('div', {'class' : 'b-stuff'},
                    cm.node('div', {'class' : 'inner'},
                        cm.node('div', {'class' : 'b-preview-color'},
                            cm.node('div', {'class' : 'b-title'}, that.lang('new')),
                            cm.node('div', {'class' : 'b-colors'},
                                that.nodes['previewNew'] = cm.node('div', {'class' : 'b-color'}),
                                that.nodes['previewPrev'] = cm.node('div', {'class' : 'b-color'})
                            ),
                            cm.node('div', {'class' : 'b-title'}, that.lang('previous'))
                        ),
                        cm.node('div', {'class' : 'b-bottom'},
                            cm.node('div', {'class' : 'b-preview-inputs'},
                                that.nodes['inputHEX'] = cm.node('input', {'type' : 'text', 'title' : that.lang('hex')})
                            ),
                            cm.node('div', {'class' : 'b-buttons'},
                                that.nodes['buttonSelect'] = cm.node('div', {'class' : 'button button-primary is-wide'}, that.lang('select'))
                            )
                        )
                    )
                )
            )
        );
        // Render canvas
        paletteContext = that.nodes['paletteCanvas'].getContext('2d');
        // Add events
        cm.addEvent(that.nodes['inputHEX'], 'input', inputHEXHandler);
        cm.addEvent(that.nodes['inputHEX'], 'keypress', inputHEXKeypressHandler);
        cm.addEvent(that.nodes['buttonSelect'], 'click', buttonSelectHandler);
        // Append
        that.embedStructure(that.nodes['container']);
    };

    var initComponents = function(){
        that.components['paletteDrag'] = new Com.Draggable({
            'target' : that.nodes['paletteZone'],
            'node' : that.nodes['paletteDrag'],
            'limiter' : that.nodes['paletteZone'],
            'events' : {
                'onSelect' : function(my, data){
                    var dimensions = my.getDimensions();
                    that.value['v'] = cm.toFixed((100 - (100 / dimensions['limiter']['absoluteHeight']) * data['top']) / 100, 2);
                    that.value['s'] = cm.toFixed(((100 / dimensions['limiter']['absoluteWidth']) * data['left']) / 100, 2);
                    if(that.value['a'] === 0){
                        that.value['a'] = 1;
                    }
                    setColor();
                    setOpacityDrag();
                }
            }
        });
        // Tint Range
        cm.getConstructor('Com.TintRange', function(classConstructor, className){
            that.components['tint'] = new classConstructor(
                cm.merge(that.params[className], {
                    'container' : that.nodes['tintZone']
                })
            );
            that.components['tint'].addEvent('onSelect', function(my, data){
                that.value['h'] = data;
                if(that.value['a'] === 0){
                    that.value['a'] = 1;
                }
                setColor();
                setOpacityDrag();
                renderPaletteCanvas();
            });
        });
        // Opacity Range
        cm.getConstructor('Com.OpacityRange', function(classConstructor, className){
            that.components['opacity'] = new classConstructor(
                cm.merge(that.params[className], {
                    'container' : that.nodes['opacityZone']
                })
            );
            that.components['opacity'].addEvent('onSelect', function(my, data){
                that.value['a'] = cm.toFixed(data / 100, 2);
                setColor();
            });
        });
    };

    /* *** COLORS *** */

    var setPaletteDrag = function(){
        var dimensions = that.components['paletteDrag'].getDimensions(),
            position = {
                'left' : (dimensions['limiter']['absoluteWidth'] / 100) * (that.value['s'] * 100),
                'top' : dimensions['limiter']['absoluteHeight'] - (dimensions['limiter']['absoluteHeight'] / 100) * (that.value['v'] * 100)
            };
        that.components['paletteDrag'].setPosition(position, false);
    };

    var setTintRange = function(){
        var value = cm.toFixed(that.value['h'], 0);
        that.components['tint'].set(value, false);
        that.components['tint'].redraw();
    };

    var setOpacityDrag = function(){
        var color = that.get();
        var value = cm.toFixed(that.value['a'] * 100, 0);
        that.components['opacity'].setColor(color);
        that.components['opacity'].set(value, false);
        that.components['opacity'].redraw();
    };

    var inputHEXHandler = function(){
        var value = that.nodes['inputHEX'].value;
        var color = cm.removeSpaces(value);
        // Check for sharp
        color = (!/^#/.test(color) ? '#' : '') + color;
        // Reduce length
        color = cm.reduceText(color, 7, false);
        // Set
        that.nodes['inputHEX'].value = color;
        set(color, true, {'setInput' : false});
    };

    var inputHEXKeypressHandler = function(e){
        var color;
        e = cm.getEvent(e);
        if(e.keyCode == 13){
            color = that.nodes['inputHEX'].value;
            set(color, true);
            buttonSelectHandler();
        }
    };

    var buttonSelectHandler = function(){
        setColorPrev();
        that.triggerEvent('onSelect', that.value);
        eventOnChange();
    };

    var set = function(color, triggerEvent, params){
        if(cm.isEmpty(color)){
            color = that.params['defaultValue'];
        }else if(color == 'transparent'){
            color = {'h' : 360,  's' : 0,  'v' : 1, 'a' : 0};
        }
        that.value = tinycolor(color).toHsv();
        that.redraw(true, params);
        // Trigger onSet event
        if(triggerEvent){
            that.triggerEvent('onSet', that.value);
        }
    };
    
    var setColor = function(){
        setPreviewNew();
        setPreviewInputs();
        setPaletteDragColor();
        that.triggerEvent('onSet', that.value);
    };

    var setColorPrev = function(){
        if(that.value){
            that.previousValue = cm.clone(that.value);
        }else{
            if(!cm.isEmpty(that.params['value'])){
                that.previousValue = tinycolor(that.params['value']).toHsv();
            }else{
                that.previousValue = tinycolor(that.params['defaultValue']).toHsv();
            }
        }
        setPreviewPrev();
    };

    var setPaletteDragColor = function(){
        var color = tinycolor(cm.clone(that.value));
        if(color.isDark()){
            cm.replaceClass(that.nodes['paletteDrag'], 'is-light', 'is-dark');
        }else{
            cm.replaceClass(that.nodes['paletteDrag'], 'is-dark', 'is-light');
        }
    };

    var setPreviewNew = function(){
        var color = tinycolor(cm.clone(that.value));
        that.nodes['previewNew'].style.backgroundColor = color.toHslString();
    };

    var setPreviewPrev = function(){
        var color = tinycolor(cm.clone(that.previousValue));
        that.nodes['previewPrev'].style.backgroundColor = color.toHslString();
    };

    var setPreviewInputs = function(){
        var color = tinycolor(cm.clone(that.value));
        that.nodes['inputHEX'].value = color.toHexString();
    };

    var eventOnChange = function(){
        if(JSON.stringify(that.value) === JSON.stringify(that.previousValue) ){
            that.triggerEvent('onChange', that.value);
        }
    };

    /* *** CANVAS *** */

    var renderPaletteCanvas = function(){
        var gradient;
        // Fill color
        paletteContext.rect(0, 0, 100, 100);
        paletteContext.fillStyle = 'hsl(' +that.value['h']+', 100%, 50%)';
        paletteContext.fill();
        // Fill saturation
        gradient = paletteContext.createLinearGradient(0, 0, 100, 0);
        paletteContext.fillStyle = gradient;
        gradient.addColorStop(0, 'rgba(255, 255, 255, 1)');
        gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');
        paletteContext.fillRect(0, 0, 100, 100);
        // Fill brightness
        gradient = paletteContext.createLinearGradient(0, 0, 0, 100);
        paletteContext.fillStyle = gradient;
        gradient.addColorStop(0, 'rgba(0, 0, 0, 0)');
        gradient.addColorStop(1, 'rgba(0, 0, 0, 1)');
        paletteContext.fillRect(0, 0, 100, 100);
    };

    /* ******* MAIN ******* */

    that.set = function(color, triggerEvent, params){
        triggerEvent = cm.isUndefined(triggerEvent) ? true : triggerEvent;
        params = cm.isUndefined(triggerEvent) ? {} : params;
        // Render new color
        set(color, triggerEvent, params);
        // Render previous color
        setColorPrev();
        return that;
    };

    that.get = function(method){
        var color = tinycolor(cm.clone(that.value));
        switch(method){
            case 'rgb':
                color = color.toRgbString();
                break;
            case 'hsl':
                color = color.toHslString();
                break;
            case 'hsv':
            case 'hsb':
                color = color.toHsvString();
                break;
            case 'hex':
            default:
                color = color.toHexString();
                break;
        }
        return color;
    };

    that.getRaw = function(method){
        var color = tinycolor(cm.clone(that.value));
        switch(method){
            case 'hsl':
                color = color.toHsl();
                break;
            case 'hsv':
            case 'hsb':
            default:
                // Color already in HSV
                break;
        }
        return color;
    };

    that.redraw = function(triggerEvent, params){
        triggerEvent = cm.isUndefined(triggerEvent) ? true : triggerEvent;
        params = cm.isUndefined(triggerEvent) ? {} : params;
        params = cm.merge({
            'setInput' : true
        }, params);
        setOpacityDrag();
        setTintRange();
        setPaletteDrag();
        setPreviewNew();
        setPaletteDragColor();
        renderPaletteCanvas();
        if(params['setInput']){
            setPreviewInputs();
        }
        if(triggerEvent){
            that.triggerEvent('onDraw');
        }
        return that;
    };

    that.isLight = function(){
        var color = tinycolor(cm.clone(that.value));
        return color.isLight();
    };

    that.isDark = function(){
        var color = tinycolor(cm.clone(that.value));
        return color.isDark();
    };

    init();
});
cm.define('Com.Request', {
    'modules' : [
        'Params',
        'Events',
        'Langs',
        'Stack',
        'Structure'
    ],
    'events' : [
        'onRenderStart',
        'onRender',
        'onStart',
        'onEnd',
        'onError',
        'onAbort',
        'onSuccess',
        'onContentRenderStart',
        'onContentRender',
        'onContentRenderEnd'
    ],
    'params' : {
        'node' : cm.node('div'),
        'container' : null,
        'name' : '',
        'embedStructure' : 'append',
        'wrapContent' : true,
        'swapContentOnError' : true,
        'renderContentOnSuccess' : true,
        'className' : '',
        'autoSend' : false,
        'promise' : false,
        'successOnEmptyData': false,
        'responseKey' : 'data',
        'responseErrorsKey' : 'errors',
        'responseMessageKey' : 'message',
        'responseCodeKey' : 'code',
        'responseHTML' : true,
        'responseHTMLKey' : 'data',
        'responseStatusKey' : 'data.success',
        'responseContainer' : null,
        'showLoader' : true,
        'ajax' : {
            'type' : 'json',
            'method' : 'get',
            'variables' : {},
            'variablesMap' : {},
            'url' : '',                                 // Request URL. Variables: %baseUrl%, %callback%.
            'params' : ''                               // Params object. Variables: %baseUrl%, %callback%.
        },
        'animateDuration' : 'cm._config.animDuration',
        'overlayContainer' : 'document.body',
        'overlayConstructor' : 'Com.Overlay',
        'overlayParams' : {
            'lazy' : true,
            'autoOpen' : false,
            'removeOnClose' : true,
            'showSpinner' : true,
            'showContent' : false,
            'position' : 'absolute',
            'theme' : 'light'
        }
    },
    'strings' : {
        'server_error' : 'An unexpected error has occurred. Please try again later.'
    }
},
function(params){
    var that = this;
    that.nodes = {};
    that.animations = {};
    that.components = {};
    that.requestData = {};
    that.responseData = {};
    that.previousResponseData = {};
    that.isProcess = false;
    that.isError = false;
    that.isRendering = false;
    that.construct(params);
});

cm.getConstructor('Com.Request', function(classConstructor, className, classProto){
    classProto.construct = function(params){
        var that = this;
        that.destructHandler = that.destruct.bind(that);
        that.requestHandler = that.request.bind(that);
        that.sendHandler = that.send.bind(that);
        that.setParams(params);
        that.convertEvents(that.params.events);
        that.validateParams();
        that.addToStack(that.params.node);
        that.triggerEvent('onRenderStart');
        that.render();
        that.addToStack(that.nodes.container);
        that.triggerEvent('onRender');
        that.params.autoSend && that.send();
        return that;
    };

    classProto.validateParams = function(){
        var that = this;
        // Legacy parameter name
        if(!cm.isUndefined(that.params.showOverlay)){
            that.params.showLoader = that.params.showOverlay;
        }
    };

    classProto.destruct = function(){
        var that = this;
        if(!that.isDestructed){
            that.isDestructed = true;
            that.components.overlay && that.components.overlay.destruct();
            that.removeFromStack();
        }
        return that;
    };

    classProto.send = function(){
        var that = this;
        if(that.isProcess){
            that.abort();
        }
        if(!that.isProcess && !that.isRendering){
            if(that.params.promise){
                return new Promise(that.requestHandler);
            }
            that.request();
        }
        return that;
    };

    classProto.get = function(){
        var that = this;
        return that.responseData;
    };

    classProto.render = function(){
        var that = this;
        // Keys
        if(cm.isEmpty(that.params.responseHTMLKey)){
            that.params.responseHTMLKey = that.params.responseKey;
        }
        // Structure
        that.renderView();
        if(that.params.wrapContent && cm.isNode(that.params.container)){
            cm.appendNodes(that.params.container.childNodes, that.nodes.inner);
        }
        // Attributes
        that.setAttributes();
        // Overlay
        if(that.params.responseHTML){
            that.params.overlayParams.container =
                that.params.overlayParams.container ||
                that.params.overlayContainer ||
                that.nodes.container ||
                document.body;
        }else{
            that.params.overlayParams.container =
                that.params.overlayParams.container ||
                that.params.overlayContainer ||
                document.body;
        }
        if(that.params.showLoader){
            cm.getConstructor(that.params.overlayConstructor, function(classConstructor){
                that.components.overlay = new classConstructor(that.params.overlayParams);
            });
        }
        // Append
        that.embedStructure(that.nodes.container);
        return that;
    };

    classProto.renderView = function(){
        var that = this;
        that.nodes.container = cm.node('div', {'class' : 'com__request'},
            that.nodes.inner = cm.node('div', {'class' : 'inner'})
        );
        return that;
    };

    classProto.setAttributes = function(){
        var that = this;
        // CSS Class
        cm.addClass(that.nodes.container, that.params.className);
        // Animations
        that.animations.container = new cm.Animation(that.nodes.container);
        return that;
    };

    classProto.setAction = function(o, mode, update){
        var that = this;
        mode = cm.inArray(['raw', 'update', 'current'], mode)? mode : 'current';
        switch(mode){
            case 'raw':
                that.params.ajax = cm.merge(that._raw.params.ajax, o);
                break;
            case 'current':
                that.params.ajax = cm.merge(that.params.ajax, o);
                break;
            case 'update':
                that.params.ajax = cm.merge(that._update.params.ajax, o);
                break;
        }
        if(update){
            that._update.params.ajax = cm.clone(that.params.ajax);
        }
        return that;
    };

    classProto.setVariables = function(o, mode, update){
        var that = this;
        mode = cm.inArray(['raw', 'update', 'current'], mode)? mode : 'current';
        switch(mode){
            case 'raw':
                that.params.ajax.variables = cm.merge(that._raw.params.ajax.variables, o);
                break;
            case 'current':
                that.params.ajax.variables = cm.merge(that.params.ajax.variables, o);
                break;
            case 'update':
                that.params.ajax.variables = cm.merge(that._update.params.ajax.variables, o);
                break;
        }
        if(update){
            that._update.params.ajax.variables = cm.clone(that.params.ajax.variables);
        }
        return that;
    };

    /* *** REQUEST *** */

    classProto.request = function(resolve, reject){
        var that = this;
        that.prepare();
        that.components.ajax = cm.ajax(
            cm.merge(that.requestData, {
                'onStart' : function(){
                    that.start();
                },
                'onSuccess' : function(data, event){
                    event = data instanceof ProgressEvent ? data : event;
                    that.response('success', data, event, resolve);
                },
                'onError' : function(data, event){
                    event = data instanceof ProgressEvent ? data : event;
                    that.response('error', data, event, reject);
                },
                'onAbort' : function(){
                    that.aborted();
                },
                'onEnd' : function(){
                    that.end();
                }
            })
        );
        return that;
    };

    classProto.prepare = function(){
        var that = this;
        that.isError = false;
        // Request data
        that.requestData = cm.clone(that.params.ajax);
        that.requestData.url = cm.strReplace(that.requestData.url, that.params.variables);
        that.requestData.params = cm.objectReplace(that.requestData.params, that.params.variables);
        that.previousResponseData = cm.clone(that.responseData);
        // Response data
        that.responseData = {
            'request' : that.requestData
        };
        return that;
    };

    classProto.abort = function(){
        var that = this;
        if(that.components.ajax && that.components.ajax.abort){
            that.components.ajax.abort();
        }
        return that;
    };

    classProto.start = function(){
        var that = this;
        that.isProcess = true;
        // Show Overlay
        if(that.params.showLoader){
            that.components.overlay && that.components.overlay.open();
        }
        that.triggerEvent('onStart');
        return that;
    };

    classProto.end = function(){
        var that = this;
        that.isProcess = false;
        // Hide Overlay
        if(that.params.showLoader){
            that.components.overlay && that.components.overlay.close();
        }
        that.triggerEvent('onEnd');
        return that;
    };

    classProto.filter = function(){
        var that = this;
        if(!cm.isEmpty(that.responseData.response)){
            that.responseData.errors = cm.reducePath(that.params.responseErrorsKey, that.responseData.response);
            that.responseData.message = cm.reducePath(that.params.responseMessageKey, that.responseData.response);
            that.responseData.code = cm.reducePath(that.params.responseCodeKey, that.responseData.response);
            that.responseData.status = cm.reducePath(that.params.responseStatusKey, that.responseData.response);
            that.responseData.data = cm.reducePath(that.params.responseKey, that.responseData.response);
            that.responseData.html = cm.reducePath(that.params.responseHTMLKey, that.responseData.response);
        }
        // Validate
        if(cm.isEmpty(that.responseData.status)){
            that.responseData.status = false;
        }
        if(cm.isEmpty(that.responseData.data)){
            that.responseData.data = [];
        }
        that.responseData.filtered = that.responseData.data;
    };

    classProto.response = function(status, data, event, callback){
        var that = this;
        if(event instanceof ProgressEvent){
            that.responseData.target = event.target;
        }
        that.responseData.response = data;
        that.responseData.callback = callback;
        that.filter();
        if(
            status === 'success' &&
            (that.params.successOnEmptyData || !cm.isEmpty(that.responseData.data) || that.responseData.status)
        ){
            that.success();
        }else{
            that.error();
        }
        return that;
    };

    classProto.error = function(){
        var that = this;
        that.isError = true;
        that.responseData.isError = true;
        that.renderError();
        that.triggerEvent('onError', that.responseData);
        // Promise callback
        if(cm.isFunction(that.responseData.callback)){
            that.responseData.callback(that.responseData);
        }
        return that;
    };

    classProto.success = function(){
        var that = this;
        that.isError = false;
        that.responseData.isError = false;
        if(!that.responseData.status || (that.responseData.status && that.params.renderContentOnSuccess)){
            that.renderResponse();
        }
        that.triggerEvent('onSuccess', that.responseData);
        // Promise callback
        if(cm.isFunction(that.responseData.callback)){
            that.responseData.callback(that.responseData);
        }
        return that;
    };

    classProto.aborted = function(){
        var that = this;
        that.triggerEvent('onAbort');
        return that;
    };

    /* *** RENDER *** */

    classProto.renderTemporary = function(visible){
        var node = cm.node('div', {'class' : 'com__request__temporary'});
        if(visible){
            cm.addClass(node, 'is-show');
        }
        return node;
    };

    classProto.renderResponse = function(){
        var that = this,
            nodes;
        if(that.params.responseHTML){
            nodes = cm.strToHTML(that.responseData.html);
            that.renderContent(nodes);
        }
        return that;
    };

    classProto.renderContent = function(nodes){
        var that = this,
            temporary;
        if(cm.isNode(that.params.responseContainer)){
            that.triggerEvent('onContentRenderStart', nodes);
            cm.clearNode(that.params.responseContainer);
            cm.appendNodes(nodes, that.params.responseContainer);
            that.triggerEvent('onContentRender', nodes);
            that.triggerEvent('onContentRenderEnd', nodes);
        }else if(cm.isNode(that.params.container)){
            temporary = that.renderTemporary(false);
            cm.appendNodes(nodes, temporary);
            that.appendResponse(temporary);
        }else{
            that.triggerEvent('onContentRenderStart', nodes);
            that.triggerEvent('onContentRender', nodes);
            that.triggerEvent('onContentRenderEnd', nodes);
        }
        return that;
    };

    classProto.renderError = function(){
        var that = this,
            temporary,
            node;
        if(that.params.responseHTML){
            node = cm.node('div', {'class' : 'cm__empty'}, that.lang('server_error'));
            // Append
            if(cm.isNode(that.params.responseContainer)){
                that.triggerEvent('onContentRenderStart', node);
                if(that.params.swapContentOnError){
                    cm.clearNode(that.params.responseContainer);
                    cm.appendChild(node, that.params.responseContainer);
                }else{
                    cm.remove(that.nodes.error);
                    that.nodes.error = node;
                    cm.insertFirst(that.nodes.error, that.params.responseContainer);
                }
                that.triggerEvent('onContentRender', node);
                that.triggerEvent('onContentRenderEnd', node);
            }else if(cm.isNode(that.params.container)){
                temporary = that.renderTemporary();
                cm.appendChild(node, temporary);
                if(that.params.swapContentOnError){
                    that.appendResponse(temporary);
                }else{
                    that.appendError(temporary);
                }
            }else{
                that.triggerEvent('onContentRenderStart', node);
                that.triggerEvent('onContentRender', node);
                that.triggerEvent('onContentRenderEnd', node);
            }
        }
        return that;
    };

    classProto.appendError = function(temporary){
        var that = this;
        that.isRendering = true;
        that.triggerEvent('onContentRenderStart', temporary);
        cm.remove(that.nodes.error);
        that.nodes.error = temporary;
        cm.addClass(that.nodes.error, 'is-show');
        if(that.nodes.temporary){
            cm.insertFirst(that.nodes.error, that.nodes.temporary);
        }else{
            cm.insertFirst(that.nodes.error, that.nodes.inner);
        }
        cm.addClass(that.nodes.container, 'is-show is-loaded', true);
        that.isRendering = false;
        that.triggerEvent('onContentRender', temporary);
        that.triggerEvent('onContentRenderEnd', temporary);
        return that;
    };

    classProto.appendResponse = function(temporary){
        var that = this,
            height;
        that.isRendering = true;
        that.triggerEvent('onContentRenderStart', temporary);
        // Wrap old content
        if(!that.nodes.temporary){
            that.nodes.temporary = that.renderTemporary(false);
            cm.appendNodes(that.nodes.inner.childNodes, that.nodes.temporary);
            cm.appendChild(that.nodes.temporary, that.nodes.inner);
            cm.customEvent.trigger(that.nodes.temporary, 'destruct', {
                'direction' : 'child',
                'self' : false
            });
        }
        cm.removeClass(that.nodes.temporary, 'is-show', true);
        // Append temporary
        cm.appendChild(temporary, that.nodes.inner);
        cm.addClass(temporary, 'is-show', true);
        // Show container
        cm.removeClass(that.nodes.container, 'is-loaded', true);
        cm.addClass(that.nodes.container, 'is-show', true);
        that.triggerEvent('onContentRender', that.nodes.temporary);
        // Animate
        height = temporary.offsetHeight;
        that.animations.container.go({
            'style' : {'height' : [height, 'px'].join('')},
            'duration' : that.params.animateDuration,
            'anim' : 'smooth',
            'onStop' : function(){
                // Remove old temporary
                cm.remove(that.nodes.temporary);
                // Apply new temporary
                that.nodes.temporary = temporary;
                that.nodes.container.style.height = '';
                cm.addClass(that.nodes.container, 'is-loaded', true);
                that.isRendering = false;
                that.triggerEvent('onContentRenderEnd', that.nodes.temporary);
            }
        });
        return that;
    };
});

cm.define('Com.Router', {
    'extend': 'Com.AbstractController',
    'events': [
        'onChangeStart',
        'onChange',
        'onChangeEnd'
    ],
    'params': {
        'renderStructure': false,
        'embedStructureOnRender': false,
        'controllerEvents': true,
        'customEvents': true,
        'route': null,
        'addLeadPoint': true,
        'catchRouteErrors': false,
        'summonRouteOnError': false,
    },
    'strings': {
        'errors': {
            'constructor_error': 'An error has occurred in the route "{route}" constructor "{constructor}".',
            'constructor_not_found': 'Route "{route}" constructor "{constructor}" is not defined.',
        },
    },
},
function() {
    Com.AbstractController.apply(this, arguments);
});

cm.getConstructor('Com.Router', function(classConstructor, className, classProto, classInherit){
    classProto.construct = function(){
        var that = this;
        // Variables
        that.routes = {};
        that.routesBinds = {};
        that.dataStorage = {};
        that.current = null;
        that.previous = null;
        // Bind
        that.windowClickEventHandler = that.windowClickEvent.bind(that);
        that.popstateEventHandler = that.popstateEvent.bind(that);
        that.hashchangeEventHandler = that.hashchangeEvent.bind(that);
        // Call parent method
        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.onSetEvents = function(){
        var that = this;
        cm.addEvent(window, 'click', that.windowClickEventHandler);
        cm.addEvent(window, 'popstate', that.popstateEventHandler);
        cm.addEvent(window, 'hashchange', that.hashchangeEventHandler);
    };

    classProto.onUnsetEvents = function(){
        var that = this;
        cm.removeEvent(window, 'click', that.windowClickEventHandler);
        cm.removeEvent(window, 'popstate', that.popstateEventHandler);
        cm.removeEvent(window, 'hashchange', that.hashchangeEventHandler);
    };

    /* *** PROCESS EVENTS *** */

    classProto.windowClickEvent = function(e){
        var that = this,
            target;
        // Process route only on LMB without pressed ctrl or meta keys
        if(e.button || e.metaKey || e.ctrlKey){
            return;
        }
        // Get event target
        target = cm.getEventTarget(e);
        target = that.getTargetLink(target);
        // Process route only on inner link
        if(cm.isTagName(target, 'a')){
            cm.preventDefault(e);
            that.processLink(target);
        }
    };

    classProto.getTargetLink = function(el){
        var that = this;
        if(!cm.isElementNode(el)){
            return false;
        }
        if(
            el.tagName.toLowerCase() === 'a' &&
            el.target !== "_blank" &&
            that.prepareUrl(el.href).indexOf(that.prepareBaseUrl()) !== -1
        ){
            return el;
        }
        el = that.getTargetLink(el.parentNode);
        if(!cm.isElementNode(el)){
            return false;
        }
        return el;
    };

    classProto.popstateEvent = function(e){
        var that = this,
            state = e.state;
        if(state){
            that.processRoute(state);
        }
    };

    classProto.hashchangeEvent = function(e){
        var that = this,
            hash = !cm.isEmpty(window.location.hash) ? window.location.hash.slice(1) : null;
        // Check hash
        that.current.hash = hash;
        that.current.href = !cm.isEmpty(hash) ? [that.current.location, that.current.hash].join('#') : that.current.location;
        that.current.state = cm.clone(that.current.state);
        that.current.state.hash = hash;
        that.current.state.href = that.current.href;
        // Restore route state after somebody change hash
        window.history.replaceState(that.current.state, '', that.current.state.href);
    };

    /* *** PROCESS ROUTE *** */

    classProto.processLink = function(el){
        var that = this,
            href = el.getAttribute('href'),
            preventDefault = el.dataset.preventDefault;
        if(!cm.isEmpty(href) && preventDefault !== 'true'){
            var route = that.prepareRoute(href);
            that.pushRoute(route);
        }
    };

    classProto.pushRoute = function(route, params){
        var that = this,
            state;
        // Validate state
        if(cm.isEmpty(route)){
            route = that.current.route;
        }
        state = {
            'route' : route.route,
            'hash' : route.hash,
            'parameters' : route.parameters,
            'location' : that.prepareHref(route.route, route.parameters),
            'match' : [],
            'params' : cm.merge({
                'processRoute' : true,
                'pushState' : true,
                'replaceState' : false,
            }, params)
        };
        // Check hash
        state.href = !cm.isEmpty(state.hash) ? [state.location, state.hash].join('#') : state.location;
        // Parse parameters
        try {
            state.parameters = Object.fromEntries(
                new URLSearchParams(state.parameters)
            );
        } catch (e) {}
        // Check data storage
        state.data = that.getStorageData(state.route, state, state.params.data);
        // Set scroll
        cm.setBodyScrollTop(0);
        // Set Window URL
        if(state.params.replaceState){
            window.history.replaceState(state, '', state.location);
        }else if(state.params.pushState){
            window.history.pushState(state, '', state.location);
        }
        // Process route
        if(state.params.processRoute){
            that.processRoute(state);
        }
        // Process hash
        if(!cm.isEmpty(state.hash)){
            window.location.hash = state.hash;
        }
    };

    classProto.processRoute = function(state){
        var that = this,
            routeItem = cm.clone(state),
            matchedRouteData;

        // Destruct old route
        that.destructRoute(that.current);

        // Match route
        matchedRouteData = that.getStateMatchedRoute(routeItem);
        // Is not found matched route
        if(cm.isEmpty(matchedRouteData)){
            matchedRouteData = {
                'hasAccess': true,
                'route': 'error',
                'item': that.get('error'),
            };
        }

        // Process route
        routeItem = cm.merge(matchedRouteData.item, routeItem);
        routeItem.state = state;
        if(matchedRouteData.match){
            routeItem.captures = that.mapCaptures(routeItem.map, matchedRouteData.match);
        }

        // Handle route redirect or route
        if(!cm.isEmpty(matchedRouteData.redirect)){
            if(cm.isArray(matchedRouteData.redirect)){
                that.redirect.apply(that, matchedRouteData.redirect);
            }else{
                that.redirect(matchedRouteData.redirect, null, {
                    'urlParams' : routeItem.urlParams,
                    'captures' : routeItem.captures,
                    'data' : routeItem.data
                });
            }
        }else{
            that.constructRoute(routeItem);
        }
    };

    classProto.getStateMatchedRoute = function(routeState){
        var that = this,
            matchedRouteData;
        // Match routes
        cm.forEach(that.routes, function(routeItem, route){
            var match = routeState.route.match(routeItem.regexp);
            if(match){
                routeItem = cm.clone(routeItem);
                routeState.match.push(routeItem);
                var routeData = {
                    'roure': route,
                    'item' : routeItem,
                    'match' : match,
                    'redirect' : that.getRouteRedirect(routeItem),
                    'access' : that.checkRouteAccess(routeItem)
                };
                if(routeData.redirect || routeData.access){
                    matchedRouteData = routeData
                }
            }
        });
        return matchedRouteData;
    };

    classProto.destructRoute = function(routeItem){
        var that = this;
        // Export
        that.previous = routeItem;
        // Callbacks
        if(routeItem){
            if(routeItem.constructor){
                routeItem.controller && routeItem.controller.destruct && routeItem.controller.destruct();
            }else{
                routeItem.onDestruct(routeItem);
                routeItem.callback(routeItem);
            }
        }
        return that;
    };

    classProto.constructRoute = function(routeItem){
        var that = this,
            constructor;
        that.triggerEvent('onChangeStart', routeItem);
        // Export
        that.current = routeItem;
        // Callbacks
        if(!cm.isEmpty(routeItem.constructor)){
            if(cm.isObject(routeItem.constructor)){
                cm.forEach(routeItem.constructor, function(item, key){
                    if(that.checkRoleAccess(key)){
                        constructor = item;
                    }
                });
            }else{
                constructor = routeItem.constructor;
            }
        }
        if(constructor){
            that.constructRouteController(routeItem, constructor);
        }else{
            routeItem.onConstruct(routeItem);
            routeItem.callback(routeItem);
        }
        that.triggerEvent('onChange', routeItem);
        that.triggerEvent('onChangeEnd', routeItem);
        return that;
    };

    classProto.constructRouteController = function(routeItem, constructor) {
        var that = this;

        // Bypass errors
        if (!that.params.catchRouteErrors) {
            cm.getConstructor(constructor, function(classConstructor) {
                routeItem.controller = new classConstructor(
                    cm.merge(routeItem.constructorParams, {
                        'container': that.params.container,
                        'route': routeItem
                    })
                );
                routeItem.controller.triggerEvent('onConstructComplete');
            });
            return;
        }

        // Catch errors
        var errorDetails;
        var errorMessage;
        var errorMessageData = {
            '{route}': routeItem.route,
            '{constructor}': constructor,
        };
        var classConstructor = cm.getConstructor(constructor, function(classConstructor) {
            try {
                routeItem.controller = new classConstructor(
                    cm.merge(routeItem.constructorParams, {
                        'container': that.params.container,
                        'route': routeItem
                    })
                );
                routeItem.controller.triggerEvent('onConstructComplete');
            } catch (err) {
                errorDetails = err;
                errorMessage = that.msg('errors.constructor_error', errorMessageData);
            }
        });
        if (cm.isEmpty(classConstructor)) {
            errorMessage = that.msg('errors.constructor_not_found', errorMessageData);
        }
        if (!cm.isEmpty(errorMessage)) {
            cm.errorLog({
                'type': 'error',
                'name': 'Com.Router',
                'message': errorMessage,
            });
            console.error(errorDetails);
            if (that.params.summonRouteOnError) {
                that.summon('error', null, {
                    'data': {
                        'code': 1404,
                        'message': errorMessage,
                        'error': errorDetails,
                    },
                });
            }
        }
    };

    classProto.getRouteRedirect = function(routeItem){
        var that = this,
            routeRedirect;
        if(!cm.isEmpty(routeItem.redirectTo)){
            if(cm.isObject(routeItem.redirectTo)){
                cm.forEach(routeItem.redirectTo, function(item, role){
                    if(that.checkRoleAccess(role)){
                        routeRedirect = item;
                    }
                });
            }else{
                routeRedirect = routeItem.redirectTo;
            }
        }
        if(cm.isFunction(routeRedirect)){
            routeRedirect = routeRedirect(routeItem);
        }
        return routeRedirect;
    };

    /* *** HELPERS *** */

    classProto.prepareUrl = function(url){
        var that = this;
        url = url
            .replace(new RegExp('^(http|https):'), '')
            .replace(new RegExp('^//www\\.'), '//');
        return url;
    };

    classProto.prepareBaseUrl = function(www){
        var that = this,
            hasWWW = new RegExp('^www.').test(window.location.host),
            baseUrl = that.prepareUrl(cm._baseUrl);
        if(www && hasWWW){
            baseUrl = baseUrl.replace(new RegExp('^//'), '//www.');
        }
        return baseUrl;
    };

    classProto.prepareRoute = function(route){
        var that = this,
            baseUrl = that.prepareBaseUrl();
        route = that.prepareUrl(route)
            .replace(new RegExp('^' + baseUrl), '')
            .replace(new RegExp('^\\.'), '');
        // Add lead slash if not exists
        if(!/^(\/|\.\/)/.test(route)){
            route = '/' + route;
        }
        // Split hash
        var parts = route.split('#');
        var url = parts[0].split('?');
        return {
            route: url[0],
            parameters: url[1],
            hash: parts[1],
        };
    };

    classProto.prepareHref = function(route, parameters){
        var that = this,
            baseUrl = that.prepareBaseUrl(true);
        // Remove lead point
        route = route.replace(new RegExp('^\\.'), '');
        // Prepare url
        var url =  window.location.protocol + baseUrl + route;
        if (!cm.isEmpty(parameters)) {
            url = [url,parameters ].join('?')
        }
        return url;
    };

    classProto.prepareExternalHref = function(route, hash, urlParams){
        var that = this;
        // Fill url params
        route = that.fillCaptures(route, urlParams);
        // Add hash
        if(!cm.isEmpty(hash)){
            route = [route, hash].join('#');
        }
        return route;
    };

    classProto.getMap = function(route){
        var machRX = /({(\w+)})/g,
            map = {},
            count = 0,
            match;
        while(match = machRX.exec(route)){
            count++;
            if(match[2]){
                map[count] = match[2];
            }
        }
        return map;
    };

    classProto.mapCaptures = function(map, captures) {
        var result = {};
        cm.forEach(map, function(id, key){
            result[id] = captures[key];
        });
        return result;
    };

    classProto.fillCaptures = function(route, params){
        return cm.fillVariables(route, params);
    };

    classProto.checkRouteAccess = function(route){
        var that = this;
        return route ? that.checkRoleAccess(route.access) : false;
    };

    classProto.checkRoleAccess = function(role){
        var that = this;
        return true;
    };

    classProto.getStorageData = function(route, routeItem, paramsData){
        var that = this,
            data = {};
        // Get default route data
        if(routeItem){
            data = cm.merge(data, routeItem.data);
        }
        // Check data storage
        if(that.dataStorage[route]){
            data = cm.merge(data, that.dataStorage[route]);
            that.dataStorage = {};
        }
        // Override data
        data = cm.merge(data, paramsData);
        return data;
    };

    /* *** PUBLIC *** */

    classProto.embed = function(node){
        var that = this;
        that.params.container = node;
    };

    classProto.add = function(route, params){
        var that = this,
            item = cm.merge({
                'type' : 'internal',        // internal | external
                'route' : route,
                'originRoute' : route,
                'name' : null,
                'access' : 'all',
                'pattern' : '([^\\/]+?)',
                'regexp' : null,
                'map' : [],
                'captures' : {},
                'href' : null,
                'redirectTo' : null,
                'data' : {},
                'urlParams' : {},
                //'pushState' : true,
                //'replaceState' : false,
                'constructor' : false,
                'constructorParams' : {},
                'callback' : function(){},
                'onConstruct' : function(){},
                'onDestruct' : function(){}
            }, params);
        // RegExp
        item.regexp = new RegExp('^' + route.replace(/({\w+})/g, item.pattern) + '$');
        item.map = that.getMap(route);
        // Binds
        if(cm.isString(item.name)){
            that.routesBinds[item.name] = route;
        }else if(cm.isArray(item.name)){
            cm.forEach(item.name, function(name){
                that.routesBinds[name] = route;
            });
        }
        // Export
        that.routes[route] = item;
        return that;
    };

    classProto.get = function(route){
        var that = this;
        if(that.routesBinds[route]){
            route = that.routesBinds[route];
        }
        return that.routes[route];
    };

    classProto.getURL = function(route, hash, urlParams, data){
        var that = this;
        if(cm.isEmpty(route)){
            return;
        }
        // Check a route type
        var item = that.get(route);
        if(item){
            if(item.type === 'external'){
                route = item.href;
                return that.prepareExternalHref(route, hash, urlParams);
            }else{
                route = item.route;
            }
        }
        // Fill url params
        route = that.fillCaptures(route, urlParams);
        // Save into data storage
        that.dataStorage[route] = data;
        // Add lead slash if not exists
        if(!/^(\/|\.\/)/.test(route)){
            route = '/' + route;
        }
        // Add lead point if not exists
        if(that.params.addLeadPoint && !/^\./.test(route)){
            route = '.' + route;
        }
        // Add hash
        if(!cm.isEmpty(hash)){
            route = [route, hash].join('#');
        }
        return route;
    };

    classProto.getFullURL = function(route, hash, urlParams, data){
        var that = this;
        return that.prepareHref(that.getURL(route, hash, urlParams, data));
    };

    classProto.getRedirect = function(route){
        var that = this,
            item = that.get(route),
            redirect;
        if(item){
            redirect = that.getRouteRedirect(item);
        }
        return redirect;
    };

    classProto.getCurrent = function(){
        var that = this;
        return that.current;
    };

    classProto.getPrevious = function(){
        var that = this;
        return that.previous;
    };

    classProto.checkAccess = function(route){
        var that = this,
            item = that.get(route);
        return that.checkRouteAccess(item);
    };

    classProto.set = function(route, hash, params){
        var that = this;
        // Validate params
        params = cm.merge({
            urlParams: null,
            captures: null,
            assignLocation: false,
            replaceLocation: false,
        }, params);
        // Get route item
        var routeItem = that.get(route);
        if(routeItem && routeItem.type === 'external'){
            params.assignLocation = true;
        }
        // Get route url
        var urlParams = !cm.isEmpty(params.urlParams) ? params.urlParams : params.captures;
        var url = that.getURL(route, hash, urlParams);
        that.setURL(url, hash, params);
        return that;
    };

    classProto.setURL = function(url, hash, params){
        var that = this;
        // Validate params
        params = cm.merge({
            assignLocation: false,
            replaceLocation: false,
        }, params);
        // Assign new location or push/replace history state
        if(params.replaceLocation) {
            window.history.replaceState(that.current.state, '', url);
        }else if(params.assignLocation){
            window.location.assign(url);
        }else{
            var route = that.prepareRoute(url);
            that.pushRoute(route, params);
        }
        return that;
    };

    classProto.summon = function(route, hash, params){
        var that = this,
            state,
            item;
        // Params
        params = cm.merge({
            'data' : {}
        }, params);
        // Get route
        if(that.routesBinds[route]){
            route = that.routesBinds[route];
        }
        // Get item
        if(that.routes[route]){
            item = that.routes[route];
            // Process state
            state = cm.clone(item);
            state.params = cm.merge(state.params, params);
            state.data = that.getStorageData(state.route, state, params.data);
            // Process route
            that.destructRoute(that.current);
            that.constructRoute(state);
        }
        return that;
    };

    classProto.redirect = function(route, hash, params){
        var that = this;
        // Override push / replace state
        params = cm.merge(params, {
            'pushState' : false,
            'replaceState' : true
        });
        that.set(route, hash, params);
        return that;
    };

    classProto.remove = function(route){
        var that = this,
            item;
        if(that.routesBinds[route]){
            route = that.routesBinds[route];
        }
        if(that.routes[route]){
            item = that.routes[route];
            if(cm.isString(item.name)){
                delete that.routesBinds[item.name];
            }else if(cm.isArray(item.name)){
                cm.forEach(item.name, function(name){
                    delete that.routesBinds[name];
                });
            }
            delete that.routes[route];
        }
        return that;
    };

    classProto.start = function(route, hash, params){
        var that = this;
        route = !cm.isUndefined(route) ? route : that.params.route;
        params = cm.merge({
            'pushState' : false,
            'replaceState' : true
        }, params);
        if(!cm.isEmpty(route)){
            that.set(route, hash, params);
        }else{
            that.setURL(window.location.href, hash, params);
        }
        return that;
    };
});

cm.define('Com.Scroll', {
    extend: 'Com.AbstractController',
    events: [
        'onScroll',
        'onScrollStart',
        'onScrollEnd',
    ],
    params: {
        controllerEvents: true,
        renderStructure: false,
        embedStructureOnRender: false,

        step: 15,
        time: 50,
        duration: 300,
    },
},
function() {
    Com.AbstractController.apply(this, arguments);
});

cm.getConstructor('Com.Scroll', function(classConstructor, className, classProto, classInherit) {
    classProto.construct = function () {
        const that = this;

        // Pre-define nodes
        that.nodes = {
            left: cm.node('div'),
            right: cm.node('div'),
            up: cm.node('div'),
            down: cm.node('div'),
            scroll: cm.node('div'),
        };

        // Call parent method
        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.renderViewModel = function() {
        const that = this;
        // Call parent method
        classInherit.prototype.renderViewModel.apply(that, arguments);

        // Init animation
        that.components.animation = new cm.Animation(that.nodes.scroll);
        
        // Reset scroll
        that.nodes.scroll.scrollTop = 0;
        that.nodes.scroll.scrollLeft = 0;
        
        // Add target events
        cm.addEvent(that.nodes.up, 'mousedown', that.startMoveUp.bind(that));
        cm.addEvent(that.nodes.up, 'mouseup', that.endAnimation.bind(that));
        cm.addEvent(that.nodes.up, 'mouseout', that.endAnimation.bind(that));
        cm.addEvent(that.nodes.down, 'mousedown', that.startMoveDown.bind(that));
        cm.addEvent(that.nodes.down, 'mouseup', that.endAnimation.bind(that));
        cm.addEvent(that.nodes.down, 'mouseout', that.endAnimation.bind(that));
        cm.addEvent(that.nodes.left, 'mousedown', that.startMoveLeft.bind(that));
        cm.addEvent(that.nodes.left, 'mouseup', that.endAnimation.bind(that));
        cm.addEvent(that.nodes.left, 'mouseout', that.endAnimation.bind(that));
        cm.addEvent(that.nodes.right, 'mousedown', that.startMoveRight.bind(that));
        cm.addEvent(that.nodes.right, 'mouseup', that.endAnimation.bind(that));
        cm.addEvent(that.nodes.right, 'mouseout', that.endAnimation.bind(that));
    };

    /******* DIRECTIONS *******/

    classProto.startMoveUp = function(){
        const that = this;
        that.endAnimation();
        that.animationInterval = setInterval(that.moveUp.bind(that), that.params.time);
        that.moveUp();
    };

    classProto.startMoveDown = function(){
        const that = this;
        that.endAnimation();
        that.animationInterval = setInterval(that.moveDown.bind(that), that.params.time);
        that.moveDown();
    };

    classProto.startMoveLeft = function(){
        const that = this;
        that.endAnimation();
        that.animationInterval = setInterval(that.moveLeft.bind(that), that.params.time);
        that.moveLeft();
    };

    classProto.startMoveRight = function(){
        const that = this;
        that.endAnimation();
        that.animationInterval = setInterval(that.moveRight.bind(that), that.params.time);
        that.moveRight();
    };

    classProto.endAnimation = function(){
        const that = this;
        that.animationInterval && clearInterval(that.animationInterval);
    };

    classProto.moveUp = function(){
        const that = this;
        const top = Math.max((that.nodes.scroll.scrollTop - that.params.step), 0);
        that.components.animation.go({style: {scrollTop: top}, duration: that.params.time, anim: 'simple'});
    };

    classProto.moveDown = function(){
        const that = this;
        const top = Math.min((that.nodes.scroll.scrollTop + that.params.step), (that.nodes.scroll.scrollHeight - that.nodes.scroll.offsetHeight));
        that.components.animation.go({style: {scrollTop: top}, duration: that.params.time, anim: 'simple'});
    };

    classProto.moveLeft = function(){
        const that = this;
        const left = Math.max((that.nodes.scroll.scrollLeft - that.params.step), 0);
        that.components.animation.go({style: {scrollLeft: left}, duration: that.params.time, anim: 'simple'});
    };

    classProto.moveRight = function(){
        const that = this;
        const left = Math.min((that.nodes.scroll.scrollLeft + that.params.step), (that.nodes.scroll.scrollWidth - that.nodes.scroll.offsetWidth));
        that.components.animation.go({style: {scrollLeft: left}, duration: that.params.time, anim: 'simple'});
    };

    /******* PUBLIC *******/

    classProto.scrollY = function(num){
        const that = this;
        const top = Math.max(Math.min(num, that.nodes.scroll.scrollHeight - that.nodes.scroll.offsetHeight), 0);
        that.components.animation.go({style: {scrollTop: top}, duration: that.params.duration, anim: 'smooth'});
        return that;
    };

    classProto.scrollX = function(num){
        const that = this;
        const left = Math.max(Math.min(num, that.nodes.scroll.scrollWidth - that.nodes.scroll.offsetWidth), 0);
        that.components.animation.go({style: {scrollLeft: left}, duration: that.params.duration, anim: 'smooth'});
        return that;
    };
});
cm.define('Com.Slider', {
    modules: [
        'Params',
        'Langs',
        'Events',
        'DataConfig',
        'DataNodes',
        'Structure',
        'Stack'
    ],
    events: [
        'onRender',
        'onChangeStart',
        'onChange',
        'onPause',
        'onStart',
        'onEnableEditing',
        'onEnableEditable',
        'onDisableEditing',
        'onDisableEditable',
    ],
    params: {
        node: cm.node('div'),
        name: '',
        container: false,
        className: null,
        customEvents: true,
        renderStructure: false,
        isEditing: false,

        time: 500,                   // Fade time
        delay: 4000,                 // Delay between slides, 0 - stop slideshow
        effect: 'fade',              // none | edit | fade | fade-out | push | pull | pull-parallax | pull-overlap
        transition: 'smooth',        // smooth | simple | acceleration | inhibition
        height: 'auto',              // auto | max | slide
        minHeight: 48,               // Set min-height of slider, work with calculateMaxHeight parameter

        items: [],
        slideshow: true,             // Enable \ disable slideshow
        cycle: true,
        direction: 'forward',        // Slideshow direction: forward | backward | random

        pauseOnHover: true,
        pauseOnScroll: true,
        setInitial: true,            // Boolean: auto mode | number: slide index | string: random
        setOnClick: false,
        fadePrevious: false,         // Fade out previous slide, needed when using transparency slides

        controlsType: 'partial',     // full | partial | small | null
        controlsClasses: [],
        buttons: true,               // Display buttons, can hide exists buttons
        numericButtons: false,       // Render slide index on button
        arrows: true,                // Display arrows, can hide exists arrows

        hasBar: false,
        barDirection: 'horizontal',  // horizontal | vertical

        scroller: {
            constructor: 'Com.Scroll',
            constructorParams: {
                step: 25,
                time: 25
            },
        },
    },
    strings: {
        prev: 'Previous',
        next: 'Next'
    }
},
function (params) {
    var that = this,
        components = {},
        slideshowInterval,
        minHeightDimension;

    that.nodes = {
        container: cm.node('div'),
        inner: cm.node('div'),
        slides: cm.node('div'),
        slidesInner: cm.node('ul'),
        next: cm.node('div'),
        prev: cm.node('div'),
        buttonsBar: cm.node('div'),
        buttons: cm.node('ul'),
        items: [],
        'layout-inner': cm.node('div'),
        'bar-inner': cm.node('div'),
        'bar-items': []
    };

    that.anim = {};
    that.items = [];
    that.itemsLength = 0;

    that.effect = null;
    that.direction = 'next';
    that.current = null;
    that.previous = null;
    that.paused = false;
    that.pausedOutside = false;
    that.isProcess = false;
    that.isEditing = null;
    that.isDestructed = null;

    var init = function () {
        that.redrawHandler = that.redraw.bind(that);
        that.scrollHandler = that.scroll.bind(that);
        that.destructHandler = that.destruct.bind(that);
        that.enableEditingHandler = that.enableEditing.bind(that);
        that.disableEditingHandler = that.disableEditing.bind(that);
        getLESSVariables();
        that.setParams(params);
        that.convertEvents(that.params.events);
        that.getDataNodes(that.params.node);
        that.getDataConfig(that.params.node);
        validateParams();
        renderView();
        renderBar();
        setEvents();
        that.setEffect(that.params.effect);
        that.addToStack(that.nodes.container);
        that.params.isEditing && that.enableEditing();
        that.triggerEvent('onRender');
    };

    var getLESSVariables = function () {
        that.params.time = cm.getTransitionDurationFromLESS('ComSlider-Duration', that.params.time);
    };

    var validateParams = function () {
        // Check if slider in the editing mode
        if (cm.isNode(that.params.node)) {
            that.params.name = that.params.node.getAttribute('name') || that.params.name;
            that.isEditing = cm.hasClass(that.params.node, 'is-editing');
        }

        // Validate available effects and slideshow params
        that.params.effect = Com.SliderEffects[that.params.effect] ? that.params.effect : 'fade';
        that.params.transition = cm.inArray(['smooth', 'simple', 'acceleration', 'inhibition'], that.params.transition) ? that.params.transition : 'smooth';
        that.params.direction = cm.inArray(['forward', 'backward', 'random'], that.params.direction) ? that.params.direction : 'forward';

        // Show a first slide randomly when a slideshow direction is "random"
        if (that.params.setInitial === true && that.params.direction === 'random') {
            that.params.setInitial = 'random';
        }

        // Disable slideshow when delay between slides is 0 or less (for some reason)
        if (!that.params.delay || that.params.delay <= 0) {
            that.params.slideshow = false;
        }

        // Calculate height params
        that.params.height = cm.inArray(['auto', 'max', 'slide'], that.params.height) ? that.params.height : 'auto';
        if (that.params.minHeight && isNaN(that.params.minHeight)) {
            minHeightDimension = getDimension(that.params.minHeight);
            that.params.minHeight = parseFloat(that.params.minHeight);
        }
    };

    var renderView = function () {
        // Render Structure
        if (that.params.renderStructure) {
            renderStructure();
        } else {
            if (!cm.isNode(that.nodes.container)) {
                that.nodes.container = that.params.node;
            }
        }
        cm.addClass(that.nodes.container, that.params.className);

        // Collect items
        cm.forEach(that.nodes.items, collectItem);
        cm.forEach(that.params.items, collectItem);

        // Controls
        if (cm.inArray(['full', 'partial', 'small'], that.params.controlsType)) {
            cm.addClass(that.nodes.controls, ['is', that.params.controlsType].join('-'));
        }
        cm.addClass(that.nodes.controls, that.params.controlsClasses);

        // Arrows
        if (that.params.arrows) {
            cm.click.add(that.nodes.next, function (event) {
                cm.preventDefault(event);
                that.next();
            });
            cm.click.add(that.nodes.prev, function (event) {
                cm.preventDefault(event);
                that.prev();
            });
        }
        setArrows(that.params.arrows);

        // Buttons
        if (that.params.buttons) {
            cm.forEach(that.items, renderButton);
        }
        if (!that.params.buttons || that.itemsLength < 2) {
            cm.addClass(that.nodes.buttonsBar, 'is-hidden');
            that.nodes.buttonsBar.setAttribute('aria-hidden', true);
        }

        // Height Type Parameters
        that.nodes.inner.style.transition = [that.params.time, 'ms'].join('');
        if (/max|slide/.test(that.params.height)) {
            cm.addClass(that.nodes.container, 'is-adaptive-content');
        }

        // Pause slider when it hovered
        if (that.params.slideshow && that.params.pauseOnHover) {
            cm.addEvent(that.nodes.container, 'mouseover', function (e) {
                e = cm.getEvent(e);
                var target = cm.getObjToEvent(e);
                if (!cm.isParent(that.nodes.container, target, true)) {
                    stopSlideshow();
                }
            });
            cm.addEvent(that.nodes.container, 'mouseout', function (e) {
                e = cm.getEvent(e);
                var target = cm.getObjToEvent(e);
                if (!cm.isParent(that.nodes.container, target, true)) {
                    startSlideshow();
                }
            });
        }

        // Pause slider when in not in screen range
        scrollPauseHandler();

        // Init animations
        that.anim.slides = new cm.Animation(that.nodes.slides);
        that.anim.slidesInner = new cm.Animation(that.nodes.slidesInner);
    };

    var renderStructure = function () {
        that.nodes.container = cm.node('div', {classes: 'com__slider'},
            that.nodes.inner = cm.node('div', {classes: 'inner'},
                that.nodes.size = cm.node('div', {classes: 'size'}),
                that.nodes.slides = cm.node('div', {classes: 'slides'},
                    that.nodes.slidesInner = cm.node('ul')
                ),
                that.nodes.controls = cm.node('div', {classes: 'com__gallery-controls'},
                    cm.node('div', {classes: 'inner'},
                        that.nodes.prev = cm.node('div', {
                                classes: 'bar-arrow prev',
                                title: that.msg('prev'),
                                role: 'button',
                                tabindex: 0
                            },
                            cm.node('div', {classes: 'icon default prev'})
                        ),
                        that.nodes.next = cm.node('div', {
                                classes: 'bar-arrow next',
                                title: that.msg('next'),
                                role: 'button',
                                tabindex: 0
                            },
                            cm.node('div', {classes: 'icon default next'})
                        ),
                        that.nodes.buttonsBar = cm.node('div', {classes: 'bar-buttons'},
                            that.nodes.buttons = cm.node('ul')
                        )
                    )
                )
            )
        );

        // Embed
        that.embedStructure(that.nodes.container);
    };

    var setEvents = function () {
        // Resize events
        cm.addEvent(window, 'resize', that.redrawHandler);
        cm.addEvent(window, 'scroll', that.scrollHandler);
        // Add custom event
        if (that.params.customEvents) {
            cm.customEvent.add(that.nodes.container, 'redraw', that.redrawHandler);
            cm.customEvent.add(that.nodes.container, 'enableEditable', that.enableEditingHandler);
            cm.customEvent.add(that.nodes.container, 'disableEditable', that.disableEditingHandler);
            cm.customEvent.add(that.nodes.container, 'destruct', that.destructHandler);
        }
    };

    var unsetEvents = function () {
        // Resize events
        cm.removeEvent(window, 'resize', that.redrawHandler);
        cm.removeEvent(window, 'scroll', that.scrollHandler);
        // Add custom event
        if (that.params.customEvents) {
            cm.customEvent.remove(that.nodes.container, 'redraw', that.redrawHandler);
            cm.customEvent.remove(that.nodes.container, 'enableEditable', that.enableEditingHandler);
            cm.customEvent.remove(that.nodes.container, 'disableEditable', that.disableEditingHandler);
            cm.customEvent.remove(that.nodes.container, 'destruct', that.destructHandler);
        }
    };

    var renderBar = function () {
        if (!that.params.hasBar) {
            return;
        }

        // ToDo: fix data-nodes for gallery layout / slider layout views
        that.nodes.ComScroll = cm.getNodes(that.params.node).ComScroll;
        cm.getConstructor(that.params.scroller.constructor, function (classConstructor) {
            components.scroll = new classConstructor(
                cm.merge(that.params.scroller.constructorParams, {
                    nodes: that.nodes.ComScroll
                })
            );
        });
    };

    var calculateHeight = function () {
        switch (that.params.height) {
            case 'max':
                calculateMaxHeight();
                break;

            case 'slide':
                calculateSlideHeight();
                break;
        }
    };

    var calculateMaxHeight = function () {
        var height = 0;
        cm.forEach(that.items, function (item) {
            height = Math.max(height, cm.getRealHeight(item.nodes.container, 'offsetRelative'));
            if (item.nodes.inner) {
                height = Math.max(height, cm.getRealHeight(item.nodes.inner, 'offsetRelative'));
            }
        });
        if (minHeightDimension === '%') {
            height = Math.max(height, (that.nodes.inner.offsetWidth / 100 * that.params.minHeight));
        } else {
            height = Math.max(height, that.params.minHeight);
        }
        if (height !== that.nodes.inner.offsetHeight) {
            that.nodes.inner.style.height = [height, 'px'].join('');
        }
    };

    var calculateSlideHeight = function () {
        var item,
            height = 0;
        if (that.current !== null) {
            item = that.items[that.current];
            height = Math.max(height, cm.getRealHeight(item.nodes.container, 'offsetRelative'));
            if (item.nodes.inner) {
                height = Math.max(height, cm.getRealHeight(item.nodes.inner, 'offsetRelative'));
            }
        }
        if (minHeightDimension === '%') {
            height = Math.max(height, (that.nodes.inner.offsetWidth / 100 * that.params.minHeight));
        } else {
            height = Math.max(height, that.params.minHeight);
        }
        if (height !== that.nodes.inner.offsetHeight) {
            that.nodes.inner.style.height = [height, 'px'].join('');
        }
    };

    var collectItem = function (item) {
        // Configuration
        item = {
            index: that.items.length,
            nodes: item
        };

        // Get data-image if provided
        if (cm.isEmpty(item.image)) {
            item.image = cm.getData(item.nodes.container, 'image');
        }

        // Bar
        if (that.params.hasBar) {
            item.bar = that.nodes['bar-items'][item.index];
            item.bar.title = item.bar.link ? item.bar.link.getAttribute('title') || '' : '';
            item.bar.src = item.bar.link ? item.bar.link.getAttribute('href') || '' : '';
        }

        // Process item
        processItem(item);
    };

    var processItem = function (item) {
        // Configuration
        item = cm.merge({
            isImageSet: true,
            index: that.items.length,
            image: null,
            nodes: {
                container: cm.node('li'),
                inner: null
            }
        }, item);

        // Validate
        if (!cm.isEmpty(item.image)) {
            item.isImageSet = false;
        }

        // Attributes
        item.nodes.container.setAttribute('aria-hidden', true);
        cm.addClass(item.nodes.container, 'is-ready');

        // Bar
        if (that.params.hasBar) {
            // Set image on thumb click
            cm.click.add(item.bar.link, function (event) {
                cm.preventDefault(event);
                set(item.index);
            });
        }

        // Init animation
        item.anim = new cm.Animation(item.nodes.container);

        // Set image on slide click
        if (that.params.setOnClick) {
            cm.click.add(item.nodes.container, function (event) {
                cm.preventDefault(event);
                set(item.index);
            });
        }

        // Embed
        if (that.params.renderStructure || !cm.hasParentNode(item.nodes.container)) {
            cm.appendChild(item.nodes.container, that.nodes.slidesInner);
        }

        // Push to the items array
        that.items.push(item);
        that.itemsLength = that.items.length;
    };

    var resetStyles = function () {
        that.nodes.slidesInner.scrollLeft = 0;
        cm.forEach(that.items, function (item) {
            item.nodes.container.style.display = '';
            item.nodes.container.style.opacity = '';
            item.nodes.container.style.left = '';
            item.nodes.container.style.zIndex = '';
        });
    };

    var renderButton = function (item) {
        // Structure
        that.nodes.buttons.appendChild(
            item.nodes.button = cm.node('li')
        );
        if (that.params.numericButtons) {
            item.nodes.button.innerHTML = item.index + 1;
        }
        // Event
        cm.click.add(item.nodes.button, function (event) {
            cm.preventDefault(event);
            that.direction = item.index <= that.current ? 'next' : 'prev';
            set(item.index);
        });
    };

    var set = function (index) {
        if (!that.isProcess) {
            that.isProcess = true;
            // Renew slideshow delay
            that.params.slideshow && renewSlideshow();
            // Set current active slide
            var current = that.items[index],
                previous = that.items[that.current];
            that.previous = that.current;
            that.current = index;
            // API onChangeStart event
            that.triggerEvent('onChangeStart', {
                current: current,
                previous: previous
            });
            // Reset active slide
            if (previous) {
                if (that.params.buttons) {
                    cm.removeClass(previous.nodes.button, 'active');
                }
            }
            // Set image
            if (!current.isImageSet && !cm.isEmpty(current.image)) {
                current.isImageSet = true;
                current.nodes.container.style.backgroundImage = 'url("' + current.image + '")';
            }
            // Set active slide
            if (that.params.buttons) {
                cm.addClass(current.nodes.button, 'active');
            }
            // Set arrows
            if (that.params.arrows) {
                setArrows();
            }
            // Set bar item
            if (that.params.hasBar) {
                setBarItem(current, previous);
            }
            // Transition effect and callback
            Com.SliderEffects[that.effect](that, current, previous, function () {
                that.isProcess = false;
                // API onChange event
                that.triggerEvent('onChange', {
                    current: current,
                    previous: previous
                });
                // Trigger custom event
                cm.customEvent.trigger(current.nodes.container, 'redraw', {
                    direction: 'child',
                    self: false
                });
            });
            // Recalculate slider height dependence of a height type
            calculateHeight();
        }
    };

    var setArrows = function (toggle) {
        var showPrev = toggle === false
            ? false
            : that.params.cycle || that.itemsLength < 2 ? that.itemsLength > 1 : that.current > 0;
        that.nodes.prev.disabled = !showPrev;
        that.nodes.prev.setAttribute('aria-hidden', !showPrev);
        cm.toggleClass(that.nodes.prev, 'is-hidden', !showPrev);

        var showNext = toggle === false
            ? false
            : that.params.cycle || that.itemsLength < 2 ? that.itemsLength > 1 : that.current < that.itemsLength - 1;
        that.nodes.next.disabled = !showNext;
        that.nodes.next.setAttribute('aria-hidden', !showNext);
        cm.toggleClass(that.nodes.next, 'is-hidden', !showNext);
    };

    var setBarItem = function (current, previous) {
        var left,
            top;
        // Thumbs classes
        if (previous) {
            cm.removeClass(previous.bar.container, 'active');
        }
        cm.addClass(current.bar.container, 'active');
        // Move bar
        if (that.params.barDirection === 'vertical') {
            top = current.bar.container.offsetTop - (that.nodes['layout-inner'].offsetHeight / 2) + (current.bar.container.offsetHeight / 2);
            components.scroll.scrollY(top);
        } else {
            left = current.bar.container.offsetLeft - (that.nodes['layout-inner'].offsetWidth / 2) + (current.bar.container.offsetWidth / 2);
            components.scroll.scrollX(left);
        }
    };

    /* *** SLIDESHOW *** */

    var startSlideshow = function () {
        if (that.paused && !that.pausedOutside) {
            that.paused = false;
            slideshowInterval = setTimeout(function () {
                switch (that.params.direction) {
                    case 'random':
                        set(that.getRandomIndex());
                        break;

                    case 'backward':
                        that.prev();
                        break;

                    case 'forward':
                        that.next();
                        break;
                }
            }, that.params.delay);
            that.triggerEvent('onStart');
        }
    };

    var stopSlideshow = function () {
        if (!that.paused) {
            that.paused = true;
            slideshowInterval && clearTimeout(slideshowInterval);
            that.triggerEvent('onPause');
        }
    };

    var renewSlideshow = function () {
        if (!that.paused && !that.pausedOutside) {
            stopSlideshow();
            startSlideshow();
        }
    };

    /* *** HELPERS *** */

    var resizeHandler = function () {
        // Recalculate slider height dependence of a height type
        calculateHeight();
        // Pause slider when in not in screen range
        scrollPauseHandler();
    };

    var scrollHandler = function () {
        // Pause slider when in not in screen range
        scrollPauseHandler();
    };

    var scrollPauseHandler = function () {
        if (that.params.slideshow && that.params.pauseOnScroll) {
            var rect = cm.getRect(that.nodes.container);
            if (cm.inRange(0, cm._pageSize.winHeight, rect.top, rect.bottom)) {
                startSlideshow();
            } else {
                stopSlideshow();
            }
        }
    };

    var getDimension = function (value) {
        var pure = value.match(/\d+(\D*)/);
        return pure ? pure[1] : '';
    };

    /* ******* MAIN ******* */

    that.enableEditing = function () {
        if (typeof that.isEditing !== 'boolean' || !that.isEditing) {
            that.isEditing = true;
            cm.addClass(that.nodes.container, 'is-editing is-editable');
            that.enableEditMode();
            that.triggerEvent('onEnableEditing');
            that.triggerEvent('onEnableEditable');
        }
        return that;
    };

    that.disableEditing = function () {
        if (typeof that.isEditing !== 'boolean' || that.isEditing) {
            that.isEditing = false;
            cm.removeClass(that.nodes.container, 'is-editing is-editable');
            that.disableEditMode();
            that.triggerEvent('onDisableEditing');
            that.triggerEvent('onDisableEditable');
        }
        return that;
    };

    that.destruct = function () {
        var that = this;
        if (!that.isDestructed) {
            that.isDestructed = true;
            unsetEvents();
            that.removeFromStack();
        }
        return that;
    };

    that.redraw = function () {
        animFrame(resizeHandler);
        return that;
    };

    that.scroll = function () {
        animFrame(scrollHandler);
        return that;
    };

    that.set = function (index) {
        if (that.items[index]) {
            set(index);
        }
        return that;
    };

    that.setInitial = function(index) {
        if (cm.isNumber(index)) {
            index = that.items[index] ? index : 0;
        } else if (cm.isString(index) && index === 'random') {
            index = that.getRandomIndex();
        } else {
            index = 0;
        }
        that.set(index);
        return that;
    };

    that.get = function (index) {
        return that.items[index] ? that.items[index] : null;
    };

    that.getRandomIndex = function () {
        if (that.items.length <= 1) {
            return 0;
        }
        var index = 0;
        do {
            index = cm.rand(0, that.items.length - 1);
        } while (index === that.current);
        return index;
    };

    that.next = function () {
        that.direction = 'next';
        var i = ((that.current + 1) === that.items.length) ? 0 : (that.current + 1);
        set(i);
        return that;
    };

    that.prev = function () {
        that.direction = 'prev';
        var i = (that.current === 0) ? (that.items.length - 1) : (that.current - 1);
        set(i);
        return that;
    };

    that.pause = function () {
        that.pausedOutside = true;
        stopSlideshow();
        return that;
    };

    that.start = function () {
        that.pausedOutside = false;
        startSlideshow();
        return that;
    };

    that.enableEditMode = function () {
        that.pause();
        cm.addClass(that.nodes.container, 'is-editable');
        that.setEffect('edit');
    };

    that.disableEditMode = function () {
        that.start();
        cm.removeClass(that.nodes.container, 'is-editable');
        that.restoreEffect();
    };

    that.setEffect = function (effect) {
        // Reset slider
        that.current = null;
        that.previous = null;
        // Reset slides styles after previous effect
        cm.removeClass(that.nodes.slides, ['effect', that.effect].join('-'));
        resetStyles();
        // Set new effect
        that.effect = Com.SliderEffects[effect] ? effect : 'fade';
        cm.addClass(that.nodes.slides, ['effect', that.effect].join('-'));
        // Set initial slide
        if (that.isEditing) {
            that.setInitial(0);
        } else if (that.params.setInitial !== false) {
            that.setInitial(that.params.setInitial);
        }
        // Recalculate slider height
        calculateHeight();
        return that;
    };

    that.restoreEffect = function () {
        that.setEffect(that.params.effect);
        return that;
    };

    init();
});

/******* SLIDER EFFECTS *******/

Com.SliderEffects = {};

/*** NONE ***/

Com.SliderEffects.none = function (slider, current, previous, callback) {
    if (previous && current !== previous) {
        previous.nodes.container.setAttribute('aria-hidden', true);
        previous.nodes.container.style.display = 'none';
        previous.nodes.container.style.zIndex = 1;
    }
    current.nodes.container.setAttribute('aria-hidden', false);
    current.nodes.container.style.zIndex = 2;
    current.nodes.container.style.display = 'block';
    callback();
};

/*** EDIT ***/

Com.SliderEffects.edit = function (slider, current, previous, callback) {
    if (previous && current !== previous) {
        previous.nodes.container.setAttribute('aria-hidden', true);
        previous.nodes.container.style.display = 'none';
        previous.nodes.container.style.zIndex = 1;
    }
    current.nodes.container.setAttribute('aria-hidden', false);
    current.nodes.container.style.zIndex = 2;
    current.nodes.container.style.display = 'block';
    callback();
};

/*** FADE ***/

Com.SliderEffects.fade = function (slider, current, previous, callback) {
    const hide = (item) => {
        item.nodes.container.style.display = 'none';
        item.nodes.container.style.zIndex = 1;
        item.nodes.container.style.opacity = 0;
        item.nodes.container.setAttribute('aria-hidden', true);
    };

    const show = (item) => {
        item.nodes.container.style.zIndex = 2;
        item.nodes.container.style.opacity = 1;
        item.nodes.container.style.display = 'block';
        item.nodes.container.setAttribute('aria-hidden', false);
    };

    if (previous && current !== previous) {
        // Hide previous slide
        if (previous) {
            previous.nodes.container.setAttribute('aria-hidden', true);
            previous.nodes.container.style.zIndex = 1;
            if (slider.params.fadePrevious) {
                previous.anim.go({
                    style: {opacity: 0},
                    duration: slider.params.time,
                    anim: slider.params.transition,
                    onStop: () => hide(previous),
                });
            } else {
                setTimeout(() => hide(previous), slider.params.time);
            }
        }
        
        // Show new slide and animate it
        show(current);
        current.nodes.container.style.opacity = 0;
        current.anim.go({
            style: {opacity: 1},
            duration: slider.params.time,
            anim: slider.params.transition,
            onStop: callback
        });
    } else {
        show(current);
        callback();
    }
};

/* *** FADE *** */

Com.SliderEffects['fade-out'] = function (slider, current, previous, callback) {
    const hide = (item) => {
        item.nodes.container.style.display = 'none';
        item.nodes.container.style.zIndex = 1;
        item.nodes.container.style.opacity = 0;
        item.nodes.container.setAttribute('aria-hidden', true);
    };

    const show = (item) => {
        item.nodes.container.style.zIndex = 2;
        item.nodes.container.style.opacity = 1;
        item.nodes.container.style.display = 'block';
        item.nodes.container.setAttribute('aria-hidden', false);
    };

    if (previous && current !== previous) {
        // Hide previous slide
        if (previous) {
            previous.nodes.container.setAttribute('aria-hidden', true);
            previous.nodes.container.style.zIndex = 1;
            previous.anim.go({
                style: {opacity: 0},
                duration: slider.params.time,
                anim: slider.params.transition,
                onStop: () => hide(previous),
            });
        }
        // Show new slide and animate it
        show(current);
        current.nodes.container.style.opacity = 0;
        current.anim.go({
            style: {opacity: 1},
            duration: slider.params.time,
            anim: slider.params.transition,
            onStop: callback
        });
    } else {
        show(current);
        callback();
    }
};

/* *** PUSH *** */

Com.SliderEffects.push = function (slider, current, previous, callback) {
    if (previous && current !== previous) {
        previous.nodes.container.setAttribute('aria-hidden', true);
    }
    current.nodes.container.setAttribute('aria-hidden', false);
    slider.anim.slidesInner.go({
        style: {scrollLeft: current.nodes.container.offsetLeft},
        duration: slider.params.time,
        anim: slider.params.transition,
        onStop: callback
    });
};

/* *** PULL *** */

Com.SliderEffects.pull = function (slider, current, previous, callback) {
    const hide = (item) => {
        item.nodes.container.style.zIndex = 1;
        item.nodes.container.style.left = '100%';
        item.nodes.container.style.display = 'none';
        item.nodes.container.setAttribute('aria-hidden', true);
    };

    const show = (item) => {
        item.nodes.container.style.zIndex = 2;
        item.nodes.container.style.left = 0;
        item.nodes.container.style.display = 'block';
        item.nodes.container.setAttribute('aria-hidden', false);
    };

    if (previous && current !== previous) {
        // Hide previous slide
        if (previous) {
            previous.nodes.container.setAttribute('aria-hidden', true);
            previous.nodes.container.style.zIndex = 1;
            previous.anim.go({
                style: {left: slider.direction === 'next' ? '-100%' : '100%'},
                duration: slider.params.time,
                anim: slider.params.transition,
                onStop: () => hide(previous),
            });
        }

        // Show new slide and animate it
        show(current);
        if (slider.direction === 'next') {
            current.nodes.container.style.left = '100%';
        } else if (slider.direction === 'prev') {
            current.nodes.container.style.left = '-100%';
        }
        current.anim.go({
            style: {left: '0%'},
            duration: slider.params.time,
            anim: slider.params.transition,
            onStop: callback
        });
    } else {
        show(current);
        callback();
    }
};

/* *** PULL OVERLAP *** */

Com.SliderEffects['pull-overlap'] = function (slider, current, previous, callback) {
    const hide = (item) => {
        item.nodes.container.style.zIndex = 1;
        item.nodes.container.style.left = '100%';
        item.nodes.container.style.display = 'none';
        item.nodes.container.setAttribute('aria-hidden', true);
    };

    const show = (item) => {
        item.nodes.container.style.zIndex = 2;
        item.nodes.container.style.left = 0;
        item.nodes.container.style.display = 'block';
        item.nodes.container.setAttribute('aria-hidden', false);
    };

    if (previous && current !== previous) {
        // Hide previous slide
        if (previous) {
            previous.nodes.container.setAttribute('aria-hidden', true);
            previous.nodes.container.style.zIndex = 1;
            setTimeout(() => hide(previous), slider.params.time);
        }

        // Show new slide and animate it
        show(current);
        if (slider.direction === 'next') {
            current.nodes.container.style.left = '100%';
        } else if (slider.direction === 'prev') {
            current.nodes.container.style.left = '-100%';
        }
        current.anim.go({
            style: {left: '0%'},
            duration: slider.params.time,
            anim: slider.params.transition,
            onStop: callback
        });
    } else {
        show(current);
        callback();
    }
};

/* *** PULL PARALLAX *** */

Com.SliderEffects['pull-parallax'] = function (slider, current, previous, callback) {
    const hide = (item) => {
        item.nodes.container.style.zIndex = 1;
        item.nodes.container.style.left = '100%';
        item.nodes.container.style.display = 'none';
        item.nodes.container.setAttribute('aria-hidden', true);
    };

    const show = (item) => {
        item.nodes.container.style.zIndex = 2;
        item.nodes.container.style.left = 0;
        item.nodes.container.style.display = 'block';
        item.nodes.container.setAttribute('aria-hidden', false);
    };

    if (previous && current !== previous) {
        // Hide previous slide
        if (previous) {
            previous.nodes.container.setAttribute('aria-hidden', true);
            previous.nodes.container.style.zIndex = 1;
            previous.anim.go({
                style: {left: slider.direction === 'next' ? '-50%' : '50%'},
                duration: slider.params.time,
                anim: slider.params.transition,
                onStop: () => hide(previous),
            });
        }

        // Show new slide and animate it
        show(current);
        if (slider.direction === 'next') {
            current.nodes.container.style.left = '100%';
        } else if (slider.direction === 'prev') {
            current.nodes.container.style.left = '-100%';
        }
        current.anim.go({
            style: {left: '0%'},
            duration: slider.params.time,
            anim: slider.params.transition,
            onStop: callback
        });
    } else {
        show(current);
        callback();
    }
};

Com.SliderEffects['pull-parallax-css'] = function (slider, current, previous, callback) {
    const hide = (item) => {
        item.nodes.container.style.zIndex = 1;
        cm.setCSSTranslate(item.nodes.container, '100%', 0, 0);
        item.nodes.container.style.display = 'none';
        item.nodes.container.setAttribute('aria-hidden', true);
    };

    const show = (item) => {
        item.nodes.container.style.zIndex = 2;
        cm.setCSSTranslate(item.nodes.container, '0%', 0, 0);
        item.nodes.container.style.display = 'block';
        item.nodes.container.setAttribute('aria-hidden', false);
    };

    if (previous && current !== previous) {
        // Hide previous slide
        if (previous) {
            previous.nodes.container.setAttribute('aria-hidden', true);
            previous.nodes.container.style.zIndex = 1;
            cm.transition(previous.nodes.container, {
                properties: {
                    transform: 'translateX(' + (slider.direction === 'next' ? '-50%' : '50%') + ')'
                },
                duration: slider.params.time,
                delayOut: 30,
                onStop: () => hide(previous),
            });
        }

        // Show new slide and animate it
        show(current);
        if (slider.direction === 'next') {
            cm.setCSSTranslate(current.nodes.container, '100%', 0, 0);
        } else if (slider.direction === 'prev') {
            cm.setCSSTranslate(current.nodes.container, '-100%', 0, 0);
        }
        cm.transition(current.nodes.container, {
            properties: {
                transform: 'translateX(0%)'
            },
            duration: slider.params.time,
            delayOut: 30,
            onStop: callback
        });
    } else {
        show(current);
        callback();
    }
};

Com.SliderEffects.custom = function (slider, current, previous, callback) {
    const show = (item) => {
        cm.addClass(item.nodes.container, 'active', true);
        cm.removeClass(item.nodes.container, 'show', true);
        cm.removeClass(item.nodes.container, slider.direction, true);
        item.nodes.container.setAttribute('aria-hidden', false);
    };

    if (previous && current !== previous) {
        // Hide previous
        if (previous) {
            previous.nodes.container.setAttribute('aria-hidden', true);
            cm.addClass(previous.nodes.container, 'hide', true);
            cm.addClass(previous.nodes.container, slider.direction, true);
        }
        // Show current
        if (previous) {
            cm.addClass(current.nodes.container, 'show');
            cm.addClass(current.nodes.container, slider.direction);
        }
        show(current);
        // Delays
        setTimeout( () => {
            // Previous
            if (previous) {
                cm.removeClass(previous.nodes.container, slider.direction);
                cm.removeClass(previous.nodes.container, 'active hide');
            }
            // Callback
            callback();
        }, slider.params.time);
    } else {
        show(current);
        callback();
    }
};

cm.define('Com.Sortable', {
    'modules' : [
        'Params',
        'Events',
        'DataConfig',
        'DataNodes'
    ],
    'events' : [
        'onRender',
        'onRemove',
        'onStart',
        'onSort'
    ],
    'params' : {
        'node' : cm.node('div'),
        'process' : true,
        'Com.Draganddrop' : {
            'draggableContainer' : 'selfParent',
            'direction' : 'vertical',
            'limit' : true,
            'scroll' : false,
            'animateRemove' : false,
            'removeNode' : false
        }
    }
},
function(params){
    var that = this;

    that.components = {};
    that.nodes = {
        'groups' : []
    };

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataNodes(that.params['node']);
        that.getDataConfig(that.params['node']);
        render();
    };

    var render = function(){
        // Init drag'n'drop class
        that.components['dd'] = new Com.Draganddrop(that.params['Com.Draganddrop'])
            .addEvent('onDragStart', onStart)
            .addEvent('onRemove', onRemove)
            .addEvent('onDrop', onSort);
        // Process items
        if(that.params['process']){
            cm.forEach(that.nodes['groups'], process);
        }
        // Trigger render event
        that.triggerEvent('onRender');
    };

    var onStart = function(dd, widget){
        that.triggerEvent('onStart', widget);
    };

    var onRemove = function(dd, widget){
        that.triggerEvent('onRemove', widget);
    };

    var onSort = function(dd, widget){
        that.triggerEvent('onSort', widget);
    };

    var process = function(group){
        if(group['container']){
            // Register group node
            that.addGroup(group['container']);
            // Register group's items
            if(group['items']){
                cm.forEach(group['items'], function(item){
                    processItem(item, group);
                });
            }
        }
    };

    var processItem = function(item, group){
        // Register item
        that.addItem(item['container'], group['container']);
        // Register sub groups
        if(item['groups']){
            cm.forEach(item['groups'], process);
        }
    };

    /* ******* MAIN ******* */

    that.addGroup = function(group){
        that.components['dd'].registerArea(group);
        return that;
    };

    that.removeGroup = function(group){
        that.components['dd'].removeArea(group);
        return that;
    };

    that.addItem = function(item, group){
        var nodes = cm.getNodes(item);
        if(nodes['items'][0]['drag']){
            nodes['items'][0]['drag'].setAttribute('data-com-draganddrop', 'drag');
        }
        that.components['dd'].registerDraggable(item, group);
        return that;
    };

    that.removeItem = function(item){
        that.components['dd'].removeDraggable(item);
        return that;
    };

    init();
});

cm.define('Com.Spacer', {
    'modules' : [
        'Params',
        'Events',
        'DataConfig',
        'Stack'
    ],
    'required' : [
        'Com.Draggable'
    ],
    'events' : [
        'onRender',
        'onChange',
        'onResize',
        'onEnableEditing',
        'onEnableEditable',
        'onDisableEditing',
        'onDisableEditable',
    ],
    'params' : {
        'node' : cm.node('div'),
        'name' : '',
        'height' : 0,
        'minHeight' : 0,
        'isEditing' : true,
        'customEvents' : true,
        'Com.Draggable' : {
            'direction' : 'vertical'
        }
    }
},
function(params){
    var that = this;

    that.isEditing = null;
    that.components = {};
    that.nodes = {};
    that.value = 0;

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataConfig(that.params['node']);
        validateParams();
        render();
        setLogic();
        set(parseFloat(that.params['height']), false);
        that.params['isEditing'] && that.enableEditing();
        that.addToStack(that.params['node']);
        that.triggerEvent('onRender');
    };

    var validateParams = function(){
        if(cm.isNode(that.params['node'])){
            that.params['name'] = that.params['node'].getAttribute('name') || that.params['name'];
        }
        that.params['Com.Draggable']['minY'] = that.params['minHeight'];
    };

    var render = function(){
        // Chassis Structure
        that.nodes['dragContainer'] = cm.node('div', {'class' : 'com__spacer__chassis'},
            that.nodes['drag'] = cm.node('div', {'class' : 'pt__drag is-vertical'},
                cm.node('div', {'class' : 'line'}),
                cm.node('div', {'class' : 'drag'},
                    cm.node('div', {'class' : 'icon draggable'})
                )
            )
        );
        // Ruler Structure
        that.nodes['rulerContainer'] = cm.node('div', {'class' : 'com__spacer__ruler'},
            that.nodes['ruler'] = cm.node('div', {'class' : 'pt__ruler is-vertical is-small'},
                cm.node('div', {'class' : 'line line-top'}),
                that.nodes['rulerCounter'] = cm.node('div', {'class' : 'counter'}),
                cm.node('div', {'class' : 'line line-bottom'})
            )
        );
        // Embed
        that.params['node'].appendChild(that.nodes['dragContainer']);
        that.params['node'].appendChild(that.nodes['rulerContainer']);
        // Add window event
        cm.addEvent(window, 'resize', function(){
            that.redraw();
        });
        // Add custom event
        if(that.params['customEvents']){
            cm.customEvent.add(that.params['node'], 'redraw', function(){
                that.redraw();
            });
            cm.customEvent.add(that.params['node'], 'enableEditable', function(){
                that.enableEditing();
            });
            cm.customEvent.add(that.params['node'], 'disableEditable', function(){
                that.disableEditing();
            });
        }
    };

    var setLogic = function(){
        that.components['draggable'] = new Com.Draggable(
            cm.merge(that.params['Com.Draggable'], {
                'node': that.nodes['dragContainer'],
                'events' : {
                    'onStart' : start,
                    'onSelect' : function(my, data){
                        that.value = data['top'];
                        move();
                    },
                    'onStop' : stop
                }
            })
        );
    };

    var start = function(){
        cm.addClass(document.body, 'pt__drag__body--vertical');
        cm.addClass(that.params['node'], 'is-active');
        cm.addClass(that.nodes['drag'], 'is-active');
        cm.addClass(that.nodes['ruler'], 'is-active');
    };

    var move = function(){
        that.params['node'].style.height = [that.value, 'px'].join('');
        setRulerCounter();
        that.triggerEvent('onChange', {
            'height' : that.value
        });
    };

    var stop = function(){
        cm.removeClass(document.body, 'pt__drag__body--vertical');
        cm.removeClass(that.params['node'], 'is-active');
        cm.removeClass(that.nodes['drag'], 'is-active');
        cm.removeClass(that.nodes['ruler'], 'is-active');
        that.triggerEvent('onResize', {
            'height' : that.value
        });
    };

    var set = function(height, triggerEvents){
        that.value = Math.max(height, that.params['minHeight']);
        setHeight();
        setRulerCounter();
        if(triggerEvents){
            that.triggerEvent('onChange', {
                'height' : that.value
            });
            that.triggerEvent('onResize', {
                'height' : that.value
            });
        }
    };

    var setRulerCounter = function(){
        that.nodes['rulerCounter'].innerHTML = [that.value, ' px'].join('');
    };

    var setHeight = function(){
        that.params['node'].style.height = [that.value, 'px'].join('');
        that.nodes['dragContainer'].style.top = [that.params['node'].offsetHeight, 'px'].join('');
    };

    /* ******* PUBLIC ******* */

    that.enableEditing = function(){
        if(typeof that.isEditing !== 'boolean' || !that.isEditing){
            that.isEditing = true;
            cm.addClass(that.params['node'], 'is-editing is-editable');
            that.redraw();
            that.triggerEvent('onEnableEditing');
            that.triggerEvent('onEnableEditable');
        }
        return that;
    };

    that.disableEditing = function(){
        if(typeof that.isEditing !== 'boolean' || that.isEditing){
            that.isEditing = false;
            cm.removeClass(that.params['node'], 'is-editing is-editable');
            that.triggerEvent('onDisableEditing');
            that.triggerEvent('onDisableEditable');
        }
        return that;
    };

    that.redraw = function(){
        setHeight();
        return that;
    };

    that.set = function(height, triggerEvents){
        triggerEvents = typeof triggerEvents != 'undefined'? triggerEvents : true;
        if(!isNaN(height)){
            set(height, triggerEvents);
        }
        return that;
    };

    that.get = function(){
        return that.value;
    };

    init();
});

/* ******* COMPONENTS: TABSET ******* */

Com.Elements['Tabset'] = {};

Com['GetTabset'] = function(id){
    return Com.Elements.Tabset[id] || null;
};

cm.define('Com.Tabset', {
    'modules' : [
        'Params',
        'Events',
        'DataConfig',
        'DataNodes',
        'Stack',
        'Structure'
    ],
    'events' : [
        'onRender',
        'onTabShowStart',
        'onTabShow',
        'onTabHideStart',
        'onTabHide'
    ],
    'params' : {
        'node' : cm.node('div'),                // Tabs contained node
        'container' : null,
        'name' : '',
        'embedStructure' : 'replace',
        'toggleOnHashChange' : true,
        'renderOnInit' : true,
        'removeOnDestruct' : true,
        'customEvents' : true,
        'setInitialTab' : true,                 // Set possible initial tab even if "active" is not defined
        'setInitialTabImmediately' : true,      // Set initial tab without animation
        'unsetOnReClick' : false,
        'active' : null,
        'className' : '',
        'adaptive' : true,
        'tabsAlign' : 'left',                   // left | center | right | justify
        'tabsPosition' : 'top',                 // top | right | bottom | left
        'tabsFlexible' : false,
        'tabsWidth' : 256,                      // Only for tabsPosition left or right
        'showTabs' : true,
        'showTabsTitle' : true,                 // Show title tooltip
        'animateSwitch' : true,
        'calculateMaxHeight' : false,
        'animateDuration' : 'cm._config.animDuration',
        'tabs' : [],
        'icons' : {
            'menu' : 'icon default linked'
        }
    }
},
function(params){
    var that = this,
        hashInterval,
        resizeInterval;

    that.nodes = {
        'tabs' : []
    };
    that.anim = {};
    that.tabs = {};
    that.tabsListing = [];
    that.active = false;
    that.previous = false;
    that.isInitial = null;
    that.isProcess = false;
    that.isDestructed = false;
    that.isMenuShown = false;

    var init = function(){
        getLESSVariables();
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataNodes(that.params['node'], that.params['nodesDataMarker'], false);
        that.getDataConfig(that.params['node']);
        validateParams();
        // Render tabset view
        renderView();
        // Render active tab
        that.params['renderOnInit'] && render();
    };

    var getLESSVariables = function(){
        that.params['animateDuration'] = cm.getTransitionDurationFromLESS('ComTabset-Duration', that.params['animateDuration']);
        that.params['tabsWidth'] = cm.getLESSVariable('ComTabset-Column-Width', that.params['tabsWidth'], true);
    };

    var validateParams = function(){
        if(!cm.inArray(['top', 'right', 'bottom', 'left'], that.params['tabsPosition'])){
            that.params['tabsPosition'] = 'top';
        }
        if(!cm.inArray(['left', 'center', 'right', 'justify'], that.params['tabsAlign'])){
            that.params['tabsAlign'] = 'left';
        }
        if(cm.isNumber(that.params['tabsWidth'])){
            that.params['tabsWidth'] = [that.params['tabsWidth'], 'px'].join('');
        }
    };

    var render = function(){
        // Init hash change handler
        that.params['toggleOnHashChange'] && cm.addEvent(window, 'hashchange', hashHandler);
        // Set initial tab
        setInitial();
    };

    var renderView = function(){
        /* *** STRUCTURE *** */
        that.nodes['container'] = cm.node('div', {'class' : 'com__tabset'},
            that.nodes['content'] = cm.node('div', {'class' : 'com__tabset__content'},
                that.nodes['contentUL'] = cm.node('ul')
            )
        );
        that.nodes['headerTitle'] = cm.node('div', {'class' : 'com__tabset__head-title'},
            that.nodes['headerTitleText'] = cm.node('div', {'class' : 'com__tabset__head-text'}),
            that.nodes['headerMenu'] = cm.node('div', {'class' : 'com__tabset__head-menu pt__menu is-manual is-hide'},
                that.nodes['headerMenuButton'] = cm.node('div', {'class' : that.params['icons']['menu']}),
                that.nodes['headerMenuUL'] = cm.node('ul', {'class' : 'pt__menu-dropdown'})
            )
        );
        that.nodes['headerTabs'] = cm.node('div', {'class' : 'com__tabset__head-tabs'},
            that.nodes['headerUL'] = cm.node('ul')
        );
        if(that.params['adaptive']){
            cm.addClass(that.nodes['container'], 'is-adaptive');
        }
        if(that.params['animateSwitch']){
            cm.addClass(that.nodes['content'], 'is-animated');
        }
        cm.addEvent(that.nodes['headerMenuButton'], 'click', toggleHeaderMenu);
        // Set Tabs Width
        if(/left|right/.test(that.params['tabsPosition'])){
            that.nodes['headerTabs'].style.width = that.params['tabsWidth'];
            that.nodes['content'].style.width = ['calc(100% - ', that.params['tabsWidth'], ')'].join('');
        }
        // Embed Tabs
        if(that.params['showTabs']){
            cm.insertBefore(that.nodes['headerTitle'], that.nodes['content']);
            if(/bottom|right/.test(that.params['tabsPosition'])){
                cm.insertAfter(that.nodes['headerTabs'], that.nodes['content']);
            }else{
                cm.insertBefore(that.nodes['headerTabs'], that.nodes['content']);
            }
        }
        /* *** RENDER TABS *** */
        cm.forEach(that.nodes['tabs'], function(item){
            renderTab(
                cm.merge({'content' : item['container']}, that.getNodeDataConfig(item['container']))
            );
        });
        cm.forEach(that.params['tabs'], function(item){
            renderTab(item);
        });
        /* *** ATTRIBUTES *** */
        // CSS
        cm.addClass(that.nodes['container'], ['is-tabs', that.params['tabsPosition']].join('-'));
        if(/top|bottom/.test(that.params['tabsPosition'])){
            cm.addClass(that.nodes['container'], ['is-tabs-pull', that.params['tabsAlign']].join('-'));
        }
        if(that.params['tabsFlexible']){
            cm.addClass(that.nodes['container'], 'is-tabs-flexible');
        }
        if(!cm.isEmpty(that.params['className'])){
            cm.addClass(that.nodes['container'], that.params['className']);
        }
        // ID
        if(that.params['node'].id){
            that.nodes['container'].id = that.params['node'].id;
        }
        /* *** INSERT INTO DOM *** */
        that.embedStructure(that.nodes['container']);
        /* *** EVENTS *** */
        cm.addEvent(window, 'resize', resizeHandler);
        cm.addEvent(window, 'click', clickHandler);
        that.addToStack(that.nodes['container']);
        if(that.params['customEvents']){
            cm.customEvent.add(that.nodes['container'], 'destruct', that.destruct);
        }
        that.triggerEvent('onRender');
    };

    var renderTab = function(item){
        // Check for exists
        if(that.tabs[item['id']]){
            removeTab(that.tabs[item['id']]);
        }
        // Config
        item = cm.merge({
            'id' : '',
            'title' : '',
            'content' : cm.node('li'),
            'image' : null,
            'isHide' : true,
            'constructor' : false,
            'constructorParams' : {},
            'onShowStart' : function(that, tab){},
            'onShow' : function(that, tab){},
            'onHideStart' : function(that, tab){},
            'onHide' : function(that, tab){}
        }, item);
        if(!cm.isEmpty(item['image']) && !cm.isNode(item['image'])){
            item['image'] = cm.strReplace(item['image'], {
                '%baseUrl%' : cm._baseUrl
            });
        }
        // Structure
        item['tab'] = renderTabLink(item, true);
        item['menu'] = renderTabLink(item, false);
        // Remove active tab class if exists
        cm.removeClass(item['content'], 'active');
        // Append tab
        that.nodes['headerUL'].appendChild(item['tab']['container']);
        that.nodes['headerMenuUL'].appendChild(item['menu']['container']);
        that.nodes['contentUL'].appendChild(item['content']);
        // Push
        that.tabsListing.push(item);
        that.tabs[item['id']] = item;
    };

    var renderTabLink = function(tab, image){
        var item = {};
        // Structure
        item['container'] = cm.node('li',
            item['a'] = cm.node('a',
                item['title'] = cm.node('div', {'class' : 'title'}, tab['title'])
            )
        );
        // Image
        if(image){
            if(cm.isNode(tab['image'])){
                item['image'] = tab['image'];
            }else if(!cm.isEmpty(tab['image'])){
                item['image'] = cm.node('div', {'class' : 'image'},
                    cm.node('img', {'src' : tab['image'], 'alt' : ''})
                );
            }
            if(item['image']){
                cm.insertFirst(item['image'], item['a']);
            }
            if(that.params['showTabsTitle']){
                item['a'].setAttribute('title', cm.cutHTML(tab['title']));
            }
        }
        // Add click event
        cm.addEvent(item['a'], 'click', function(e){
            e = cm.getEvent(e);
            cm.preventDefault(e);
            if(that.params['unsetOnReClick'] && that.active === tab['id']){
                that.unset();
            }else{
                if(that.params['toggleOnHashChange']){
                    window.location.hash = tab['id'];
                }else{
                    set(tab['id']);
                }
            }
            hideHeaderMenu();
        });
        return item;
    };

    var removeTab = function(item){
        // Set new active tab, if current active is nominated for remove
        if(item['id'] === that.active && that.tabsListing[0]){
            set(that.tabsListing[0]);
        }
        // Remove tab from list and array
        cm.remove(item['tab']['container']);
        cm.remove(item['menu']['container']);
        cm.remove(item['content']);
        that.tabsListing = cm.arrayRemove(that.tabsListing, item);
        delete that.tabs[item['id']];
    };

    var setInitial = function(){
        var id;
        // Set default active tab
        if(that.params['setInitialTab']){
            id = getInitialID();
        }else{
            id = that.params['active']
        }
        if(isValidID(id)){
            set(id);
        }
    };

    var set = function(id){
        var item = that.tabs[id];
        if(item && id !== that.active && !that.isProcess){
            that.isProcess = true;
            // Hide Previous Tab
            unsetTab(that.active);
            that.previous = that.active;
            that.active = id;
            // Initial tab
            if(!cm.isBoolean(that.isInitial)){
                that.isInitial = !that.previous && that.params['setInitialTabImmediately'] && that.params['setInitialTab'];
            }else{
                that.isInitial = false;
            }
            // Show New Tab
            item['isHide'] = false;
            item['onShowStart'](that, item);
            that.triggerEvent('onTabShowStart', item);
            // Controller
            if(item['constructor']){
                if(item['controller']){
                    item['controller'].refresh && item['controller'].refresh();
                }else{
                    cm.getConstructor(item['constructor'], function(classConstructor){
                        item['controller'] = new classConstructor(
                            cm.merge(item['constructorParams'], {
                                'container' : item['content']
                            })
                        );
                    });
                }
            }
            // Show
            switchTabHandler(item);
        }
    };

    var switchTabHandler = function(item){
        // Show active tab
        item['content'].style.display = 'block';
        cm.addClass(item['tab']['container'], 'active');
        cm.addClass(item['menu']['container'], 'active');
        cm.addClass(item['content'], 'active', true);
        that.nodes['headerTitleText'].innerHTML = item['title'];
        // Animate
        if(!that.isInitial && that.params['animateSwitch'] && !that.params['calculateMaxHeight']){
            animateSwitch();
        }else{
            if(that.params['calculateMaxHeight']){
                calculateMaxHeight();
            }
            if(that.previous){
                that.tabs[that.previous]['content'].style.display = 'none';
            }
            showActiveTab();
        }
    };

    var unsetTab = function(id){
        var item = that.tabs[id];
        if(item){
            // Hide Start Event
            item['onHideStart'](that, item);
            that.triggerEvent('onTabHideStart', item);
            item['isHide'] = true;
            // Hide
            cm.removeClass(item['tab']['container'], 'active');
            cm.removeClass(item['menu']['container'], 'active');
            cm.removeClass(item['content'], 'active');
            // Hide End Event
            item['onHide'](that, item);
            that.triggerEvent('onTabHide', item);
        }
    };

    var showActiveTab = function(){
        var item = that.tabs[that.active];
        // Show End Event
        if(item){
            item['onShow'](that, item);
            that.triggerEvent('onTabShow', item);
            that.isProcess = false;
            // Trigger custom event
            cm.customEvent.trigger(item['content'], 'redraw', {
                'direction' : 'child',
                'self' : false
            });
        }else{
            that.isProcess = false;
        }
    };

    var toggleHeaderMenu = function(){
        if(that.isMenuShown){
            hideHeaderMenu();
        }else{
            showHeaderMenu();
        }
    };

    var showHeaderMenu = function(){
        that.isMenuShown = true;
        cm.replaceClass(that.nodes['headerMenu'], 'is-hide', 'is-show');
    };

    var hideHeaderMenu = function(){
        that.isMenuShown = false;
        cm.replaceClass(that.nodes['headerMenu'], 'is-show', 'is-hide');
    };

    /* *** HELPERS *** */

    var animateSwitch = function(){
        var previousHeight = 0,
            currentHeight = 0;
        // Get height
        if(that.previous){
            previousHeight = cm.getRealHeight(that.tabs[that.previous]['content'], 'offsetRelative');
        }
        if(that.active){
            currentHeight = cm.getRealHeight(that.tabs[that.active]['content'], 'offsetRelative');
        }
        // Animate
        that.nodes['contentUL'].style.overflow = 'hidden';
        that.nodes['contentUL'].style.height = [previousHeight, 'px'].join('');
        cm.onSchedule(function(){
            that.nodes['contentUL'].style.height = [currentHeight, 'px'].join('');
            setTimeout(function(){
                if(that.previous){
                    that.tabs[that.previous]['content'].style.display = 'none';
                }
                that.nodes['contentUL'].style.overflow = 'visible';
                that.nodes['contentUL'].style.height = 'auto';
                showActiveTab();
            }, that.params['animateDuration']);
        });
    };

    var hashHandler = function(){
        var id = window.location.hash.slice(1);
        if(isValidID(id)){
            set(id);
        }
    };

    var getInitialID = function(){
        var id;
        if(cm.isEmpty(that.tabsListing) || cm.isEmpty(that.tabs)){
            return null;
        }
        // Get tab from hash is exists
        if(that.params['toggleOnHashChange']){
            id = window.location.hash.slice(1);
            if(isValidID(id)){
                return id;
            }
        }
        // Get tab from parameters if exists
        id = that.params['active'];
        if(isValidID(id)){
            return id;
        }
        // Get first tab in list
        return that.tabsListing[0]['id'];
    };

    var getTabByID = function(id){
        if(id && that.tabs[id]){
            return that.tabs[id];
        }
    };

    var isValidID = function(id){
        return !!getTabByID(id);
    };

    var calculateMaxHeight = function(){
        var height = 0;
        cm.forEach(that.tabs, function(item){
            height = Math.max(height, cm.getRealHeight(item['content'], 'offsetRelative'));
        });
        if(height !== that.nodes['contentUL'].offsetHeight){
            that.nodes['contentUL'].style.minHeight = [height, 'px'].join('');
            cm.forEach(that.tabs, function(item){
                item['content'].style.minHeight = [height, 'px'].join('');
            });
        }
    };

    var resizeHandler = function(){
        // Recalculate slider height
        if(that.params['calculateMaxHeight']){
            calculateMaxHeight();
        }
    };

    var clickHandler = function(e){
        var target = cm.getEventTarget(e);
        if(!cm.isParent(that.nodes['headerMenu'], target, true)){
            hideHeaderMenu();
        }
    };

    /* ******* MAIN ******* */

    that.render = function(){
        render();
        return that;
    };

    that.reset = function(){
        setInitial();
        return that;
    };

    that.destruct = function(){
        if(!that.isDestructed){
            that.isDestructed = true;
            cm.customEvent.trigger(that.nodes['container'], 'destruct', {
                'direction' : 'child',
                'self' : false
            });
            if(that.params['customEvents']){
                cm.customEvent.remove(that.nodes['container'], 'destruct', that.destruct);
            }
            that.params['removeOnDestruct'] && that.remove();
            that.removeFromStack();
        }
        return that;
    };

    that.set = function(id){
        if(isValidID(id)){
            set(id);
        }
        return that;
    };

    that.setByIndex = function(index){
        var item;
        if(item = that.tabsListing[index]){
            set(item['id']);
        }
        return that;
    };

    that.unset = function(){
        that.previous = that.active;
        that.active = null;
        unsetTab(that.previous);
        animateSwitch();
        // Reset
        that.previous = null;
        that.active = null;
        if(that.params['toggleOnHashChange']){
            window.location.hash = '';
        }
        return that;
    };

    that.reset = function(){
        setInitial();
        return that;
    };

    that.get = function(id){
        return getTabByID(id);
    };

    that.getTabs = function(){
        return that.tabs;
    };

    that.getActiveTab = function(){
        return that.tabs[that.active];
    };

    that.addTab = function(item){
        if(item && item['id']){
            renderTab(item);
        }
        return that;
    };

    that.addTabs = function(o){
        if(cm.isArray(o) || cm.isObject(o)){
            cm.forEach(o, that.addTab);
        }
        return that;
    };

    that.removeTab = function(id){
        if(id && that.tabs[id]){
            removeTab(that.tabs[id]);
        }
        return that;
    };

    that.setEvents = function(o){
        if(o){
            that.tabs = cm.merge(that.tabs, o);
        }
        return that;
    };

    that.remove = function(){
        cm.removeEvent(window, 'hashchange', hashHandler);
        cm.removeEvent(window, 'resize', resizeHandler);
        cm.removeEvent(window, 'click', clickHandler);
        hashInterval && clearInterval(hashInterval);
        resizeInterval && clearInterval(resizeInterval);
        cm.remove(that.nodes['container']);
        return that;
    };

    that.getNodes = function(key){
        return that.nodes[key] || that.nodes;
    };

    init();
});

cm.define('Com.Tabset2', {
    extend: 'Com.TabsetHelper',
    params: {
        controllerEvents: true,
        renderStructure: true,
        embedStructureOnRender: true,
        embedStructure: 'replace',
        removeOnDestruct: true,
        toggleOnHashChange: true,                                // URL hash change handler
        targetEvent: 'click',                                    // click | hover | none
        documentNode: window,

        /* ITEMS */

        items: [],
        active: null,
        setInitialTab: true,                                     // Set possible initial tab even if "active" is not defined
        setInitialTabImmediately: true,                          // Set initial tab without animation
        hidePreviousTab: ['onTabShowEnd', 'onUnset'],
        processTabs: false,

        /* TABS */

        showMenu: true,
        renderTabView: true,
        tabsHolderTagName: 'ul',
        tabsAlign: 'left',                                       // left | center | right | justify
        tabsPosition: 'top',                                     // top | right | bottom | left
        tabsFlexible: false,
        tabsWidth: 256,                                          // Only for tabsPosition left or right
        showTabs: true,
        showTabsTitle: true,                                     // Show title tooltip
        setTabsHash: false,

        /* CONTENT */

        showContent: true,
        switchManually: false,                                   // Change tab manually, not implemented yet
        animateSwitch: true,
        animateHeight: true,
        animateDuration: 'cm._config.animateDuration',
        calculateMaxHeight: false,                               // ToDo: implement

        /* AJAX */

        showLoader: true,
        responseKey: 'data',                                     // Instead of using filter callback, you can provide response array key
        responseHTML: true,                                      // If true, html will append automatically
        cache: false,                                            // Cache ajax tab content
        ajax: {
            type: 'json',
            method: 'get',
            url: '',                                             // Request URL. Variables: %baseUrl%, %tab%, %callback% for JSONP.
            params: ''                                           // Params object. %tab%, %baseUrl%, %callback% for JSONP.
        },

        /* STYLES */

        adaptive: true,
        className: '',
        icons: {
            menu: 'icon default linked'
        },

        /* CONSTRUCTORS */

        overlayConstructor: 'Com.Overlay',
        overlayParams: {
            position: 'absolute',
            lazy: true,
            autoOpen: false,
            removeOnClose: true
        }
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.TabsetHelper.apply(that, arguments);
});

cm.getConstructor('Com.Tabset2', function(classConstructor, className, classProto, classInherit){
    classProto.onConstructStart = function(){
        var that = this;
        that.isMenuShown = false;
        that.toggleMenuHandler = that.toggleMenu.bind(that);
        that.windowClickHandler = that.windowClick.bind(that);
    };

    classProto.onGetLESSVariablesProcess = function(){
        var that = this;
        that.params.animateDuration = cm.getTransitionDurationFromLESS('ComTabset-Duration', that.params.animateDuration);
        that.params.tabsWidth = cm.getLESSVariable('ComTabset-Column-Width', that.params.tabsWidth, true);
    };

    classProto.onValidateParams = function(){
        var that = this;

        // Get tabs from nodes
        if(cm.isNode(that.params.node)){
            that.collectTabs();
        }
    };

    classProto.onSetEvents = function(){
        var that = this;

        // Call parent method
        classInherit.prototype.onSetEvents.apply(that, arguments);
        cm.addEvent(that.params.documentNode, 'click', that.windowClickHandler);
    };

    classProto.onUnsetEvents = function(){
        var that = this;

        // Call parent method
        classInherit.prototype.onUnsetEvents.apply(that, arguments);
        cm.removeEvent(that.params.documentNode, 'click', that.windowClickHandler);
    };

    classProto.renderView = function(){
        var that = this;

        // Structure
        that.triggerEvent('onRenderViewStart');
        that.renderViewStructure();
        that.triggerEvent('onRenderViewProcess');

        // Adaptive
        if(that.params.adaptive){
            cm.addClass(that.nodes.container, 'is-adaptive');
        }

        // Set Tabs Width
        if(/left|right/.test(that.params.tabsPosition)){
            that.nodes.headerTabs.style.width = that.params.tabsWidth;
            that.nodes.content.style.width = ['calc(100% - ', that.params.tabsWidth, ')'].join('');
        }

        // Tabs positions
        cm.addClass(that.nodes.container, ['is-tabs', that.params.tabsPosition].join('-'));
        if(/top|bottom/.test(that.params.tabsPosition)){
            cm.addClass(that.nodes.container, ['is-tabs-pull', that.params.tabsAlign].join('-'));
        }
        if(that.params.tabsFlexible){
            cm.addClass(that.nodes.container, 'is-tabs-flexible');
        }

        // Animate
        if(that.params.animateSwitch){
            cm.addClass(that.nodes.content, ['is-animated', 'is-animated2']);
        }

        // Append Content
        if(that.params.showContent){
            cm.appendChild(that.nodes.content, that.nodes.inner);
        }

        // Append Tabs
        if(that.params.showTabs){
            if(that.params.showContent){
                if(that.params.showMenu){
                    cm.insertBefore(that.nodes.headerTitle, that.nodes.content);
                }
                if(/bottom|right/.test(that.params.tabsPosition)){
                    cm.insertAfter(that.nodes.headerTabs, that.nodes.content);
                }else{
                    cm.insertBefore(that.nodes.headerTabs, that.nodes.content);
                }
            }else{
                if(that.params.showMenu) {
                    cm.appendChild(that.nodes.headerTitle, that.nodes.inner);
                }
                cm.appendChild(that.nodes.headerTabs, that.nodes.inner);
            }
        }
        that.triggerEvent('onRenderViewEnd');
    };

    classProto.renderViewStructure = function() {
        var that = this;
        that.nodes.container = that.nodes.inner = cm.node('div', {classes: 'com__tabset'});
        that.nodes.content = cm.node('div', {classes: 'com__tabset__content'},
            that.nodes.contentUL = cm.node('ul', {classes: 'inner'})
        );
        that.nodes.headerTitle = cm.node('div', {classes: 'com__tabset__head-title'},
            that.nodes.headerTitleText = cm.node('div', {classes: 'com__tabset__head-text'}),
            that.nodes.headerMenu = cm.node('div', {classes: 'com__tabset__head-menu pt__menu is-manual is-hide'},
                that.nodes.headerMenuButton = cm.node('div', {classes: that.params.icons.menu}),
                that.nodes.headerMenuUL = cm.node('ul', {classes: 'pt__menu-dropdown', role: 'tablist'})
            )
        );
        that.nodes.headerTabs = cm.node('div', {classes: 'com__tabset__head-tabs'},
            that.nodes.headerUL = cm.node(that.params.tabsHolderTagName, {classes: 'inner', role: 'tablist'})
        );
    };

    classProto.renderViewModel = function(){
        var that = this;

        // Call parent method
        classInherit.prototype.renderViewModel.apply(that, arguments);

        // Add menu actions
        cm.addEvent(that.nodes.headerMenuButton, 'click', that.toggleMenuHandler);
    };

    /******* TABS *******/

    classProto.collectTabs = function(){
        var that = this;
        cm.forEach(that.nodes.tabs, function(item){
            if(cm.isNode(item.container)){
                cm.removeClass(item.content, 'active');
                that.params.items.push(
                    cm.merge({content: item.container}, that.getNodeDataConfig(item.container))
                )
            }
        });
    };

    classProto.renderTabView = function(item){
        var that = this;

        // Render structure
        item.label = that.renderTabLink(item, 'label');
        item.menu = that.renderTabLink(item, 'menu');
        item.tab = that.renderTabContent(item);

        // Set attributes
        that.setTabLinkAttributes(item, item.label);
        that.setTabLinkAttributes(item, item.menu);
        that.setTabContentAttributes(item, item.tab);

        // Append
        cm.appendChild(item.label.container, that.nodes.headerUL);
        cm.appendChild(item.menu.container, that.nodes.headerMenuUL);
        cm.appendChild(item.tab.container, that.nodes.contentUL);
    };

    classProto.renderTabContent = function(item){
        var that = this,
            nodes = {};
        // Structure
        nodes.container = cm.node('li',
            nodes.inner = cm.node('div', {classes: 'com__tabset__panel'}, item.content)
        );
        return nodes;
    };

    classProto.setTabContentAttributes = function(item, nodes) {
        nodes.container.setAttribute('id', item.tabName);
        nodes.container.setAttribute('role', 'tabpanel');
        nodes.container.setAttribute('tabindex', '0');
        nodes.container.setAttribute('aria-labelledby', item.labelName);
        nodes.container.setAttribute('hidden', false);
    };

    classProto.renderTabLink = function(item, type){
        var that = this;

        // Structure
        var nodes = {};
        nodes.container = cm.node('li',
            nodes.link = cm.node('a',
                nodes.title = cm.node('div', {classes: 'title'})
            )
        );

        // Title
        if(cm.isNode(item.title)){
            item.title = cm.clone(item.title, true);
            cm.appendChild(item.title, nodes.title);
        }else{
            nodes.title.innerHTML = item.title;
        }

        // Image
        if(type === 'label'){
            if(cm.isNode(item.image)){
                nodes.image = item.image;
            }else if(!cm.isEmpty(item.image)){
                nodes.image = cm.node('div', {classes: 'image'},
                    cm.node('img', {src: item.image, alt: ''})
                );
            }
            if(nodes.image){
                cm.insertFirst(nodes.image, nodes.link);
            }
        }
        return nodes;
    };

    classProto.setTabLinkAttributes = function(item, nodes) {
        var that = this;

        nodes.container.setAttribute('id', item.labelName);
        nodes.container.setAttribute('role', 'tab');
        nodes.container.setAttribute('tabindex', '0');
        nodes.container.setAttribute('aria-controls', item.tabName);
        nodes.container.setAttribute('aria-selected', 'false');

        if (that.params.showTabsTitle) {
            nodes.container.title = cm.cutHTML(item.title);
        }

        if (nodes.link) {
            nodes.link.setAttribute('role', 'presentation');
            nodes.link.setAttribute('tabindex', '-1');
            if (that.params.setTabsHash) {
                var url = new URL(window.location);
                url.hash = item.id;
                nodes.link.href = url.href;
                nodes.link.setAttribute('data-prevent-default', 'true');
            }
        }
    };

    /*** MENU ***/

    classProto.toggleMenu = function(){
        var that = this;
        if(that.isMenuShown){
            that.hideMenu();
        }else{
            that.showMenu();
        }
    };

    classProto.showMenu = function(){
        var that = this;
        if(!that.isMenuShown){
            that.isMenuShown = true;
            cm.replaceClass(that.nodes.headerMenu, 'is-hide', 'is-show');
        }
    };

    classProto.hideMenu = function(){
        var that = this;
        if(that.isMenuShown){
            that.isMenuShown = false;
            cm.replaceClass(that.nodes.headerMenu, 'is-show', 'is-hide');
        }
    }

    /*** TOGGLE ***/

    classProto.onLabelTarget = function(that, item){
        that.hideMenu();
    };

    classProto.tabChangeStart = function(item){
        var that = this;
        var previous = that.current;
        var previousItem = that.items[previous];

        // Clear animate interval
        clearTimeout(item.switchInt);

        // Unset previous tab
        if(previousItem){
            if(that.params.animateSwitch){
                that.nodes.contentUL.style.overflow = 'clip';
                if(that.params.animateHeight) {
                    that.nodes.contentUL.style.height = previousItem.tab.inner.offsetHeight + 'px';
                }
            }
            previousItem.menu.container.setAttribute('aria-selected', 'false');
            previousItem.label.container.setAttribute('aria-selected', 'false');
        }

        // Set current tab
        that.nodes.headerTitleText.innerHTML = item.title;
        item.menu.container.setAttribute('aria-selected', 'true');
        item.label.container.setAttribute('aria-selected', 'true');
        item.tab.container.hidden = false;
        item.tab.container.style.display = 'block';

        // Call parent method
        classInherit.prototype.tabChangeStart.apply(that, arguments);
    };

    classProto.tabShowEnd = function(item, params) {
        var that = this;
        if (item.id !== that.current) {
            return;
        }

        // Validate params
        params = cm.merge({
            redrawContent: true,
            triggerEvents: true,
        }, params);

        var previous = that.previous;
        var previousItem = that.items[previous];

        if(previousItem && previousItem.id !== item.id){
            if(that.params.animateSwitch){
                // Redraw tab content before animation ends
                that.redrawTabContent(item);

                if(that.params.animateHeight){
                    that.nodes.contentUL.style.height = item.tab.inner.offsetHeight + 'px';
                }
                previousItem.switchInt = setTimeout(function(){
                    // Hide previous tab
                    that.tabHideEnd(previousItem, {action: 'onTabShowEnd'});

                    // Unset animation styles
                    that.nodes.contentUL.style.overflow = '';
                    that.nodes.contentUL.style.height = '';

                    // Call parent method, but disable redrawing tab content
                    params.redrawContent = false;
                    classInherit.prototype.tabShowEnd.call(that, item, params);
                }, that.params.animateDuration);
            }else{
                // Hide previous tab
                that.tabHideEnd(previousItem, {action: 'onTabShowEnd'});

                // Call parent method
                classInherit.prototype.tabShowEnd.call(that, item, params);
            }
        }else{
            // Call parent method
            classInherit.prototype.tabShowEnd.call(that, item, params);
        }
    };

    classProto.tabHideEnd = function(item, params) {
        var that = this;
        if (
            that.params.hidePreviousTab === true ||
            cm.inArray(that.params.hidePreviousTab, params.action)
        ) {
            item.tab.container.hidden = true;
            item.tab.container.style.display = 'none';

            // Call parent method
            classInherit.prototype.tabHideEnd.apply(that, arguments);
        }
    };

    /*** SERVICE ***/

    classProto.windowClick = function(e){
        var that = this,
            target = cm.getEventTarget(e);
        if(!cm.isParent(that.nodes.headerMenu, target, true)){
            that.hideMenu();
        }
    };

    /******* PUBLIC *******/

    classProto.reset = function(){
        var that = this;
        that.setInitialTab();
        return that;
    };
});

cm.define('Com.Timer', {
    'modules' : [
        'Params',
        'Events'
    ],
    'events' : [
        'onRender',
        'onStart',
        'onTick',
        'onEnd'
    ],
    'params' : {
        'count' : 0                 // ms
    }
},
function(params){
    var that = this;

    that.left = 0;
    that.pass = 0;

    that.isProcess = false;

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        render();
        that.triggerEvent('onRender');
    };

    var render = function(){
        that.left = that.params['count'];
        that.start();
    };

    var getLeftTime = function(){
        var o = {};
        o['d_total'] = Math.floor(that.left / 1000 / 60 / 60 / 24);
        o['h_total'] = Math.floor(that.left / 1000 / 60 / 60);
        o['m_total'] = Math.floor(that.left / 1000 / 60);
        o['s_total'] = Math.floor(that.left / 1000);
        o['d'] = Math.floor(o['d_total']);
        o['h'] = Math.floor(o['h_total'] - (o['d'] * 24));
        o['m'] = Math.floor(o['m_total'] - (o['d'] * 24 * 60) - (o['h'] * 60));
        o['s'] = Math.floor(o['s_total'] - (o['d'] * 24 * 60 * 60) - (o['h'] * 60 * 60) - (o['m'] * 60));
        return o;
    };

    /* ******* PUBLIC ******* */

    that.start = function(){
        var o = getLeftTime(),
            left = that.left,
            startTime = Date.now(),
            currentTime;
        that.isProcess = true;
        that.triggerEvent('onStart', o);
        // Process
        (function process(){
            if(that.isProcess){
                currentTime = Date.now();
                that.left = Math.max(left - (currentTime - startTime), 0);
                that.pass = that.params['count'] - that.left;
                o = getLeftTime();
                that.triggerEvent('onTick', o);
                if(that.left === 0){
                    that.stop();
                    that.triggerEvent('onEnd', o);
                }else{
                    animFrame(process);
                }
            }
        })();
        return that;
    };

    that.stop = function(){
        that.isProcess = false;
        return that;
    };

    init();
});
cm.define('Com.ToggleBox', {
    modules: [
        'Params',
        'Events',
        'Langs',
        'Structure',
        'DataConfig',
        'DataNodes',
        'Storage',
        'Stack'
    ],
    events: [
        'onRender',
        'onShowStart',
        'onShow',
        'onHideStart',
        'onHide'
    ],
    params: {
        node: cm.node('div'),
        name: '',
        renderStructure: false,
        embedStructure: 'replace',
        duration: 'cm._config.animDurationLong',
        remember: false,                                 // Remember toggle state
        toggleTitle: false,                              // Change title on toggle
        container: false,
        title: false,
        content: false,
        className: 'has-title-bg is-base is-hide',
        eventNode: 'title'                               // button | title
    },
    strings: {
        show: 'Show',
        hide: 'Hide'
    }
},
function(params) {
    var that = this;

    that.nodes = {
        container: cm.node('div'),
        button: cm.node('div'),
        target: cm.node('div'),
        title: cm.node('div')
    };
    that.animations = {};

    that.isCollapsed = false;
    that.isProcess = false;

    var init = function() {
        that.setParams(params);
        that.convertEvents(that.params.events);
        that.getDataNodes(that.params.node);
        that.getDataConfig(that.params.node);
        validateParams();
        render();
        that.addToStack(that.nodes.container);
        that.triggerEvent('onRender');
    };

    var validateParams = function() {
        if (that.params.renderStructure) {
            if (!that.params.title) {
                that.params.title = '';
                that.params.toggleTitle = true;
            }
        }
    };

    var render = function() {
        // Render Structure
        if (that.params.renderStructure) {
            that.nodes.container = cm.node('dl', {classes: 'com__togglebox'},
                that.nodes.titleContainer = cm.node('dt',
                    that.nodes.button = cm.node('span', {classes: 'icon default linked'}),
                    that.nodes.title = cm.node('span', {classes: 'title'})
                ),
                that.nodes.target = cm.node('dd',
                    that.nodes.content = cm.node('div', {classes: 'inner'})
                )
            );

            // Classes
            if (that.params.eventNode === 'button') {
                cm.addClass(that.nodes.container, 'has-hover-icon');
            }
            cm.addClass(that.nodes.container, that.params.className);

            // Append title
            that.setTitle(that.params.title);

            // Append structure before the content for cases where the toggle box wraps the content inside
            that.embedStructure(that.nodes.container);

            // Append content
            if (that.params.content) {
                that.setContent(that.params.content);
            } else {
                that.setContent(that.params.node);
            }
        }

        // Set events
        that.nodes.toggle = (that.params.eventNode === 'title' && that.nodes.titleContainer) ? that.nodes.titleContainer : that.nodes.button;
        cm.click.add(that.nodes.toggle, that.toggle);

        // Set accessibility
        that.nodes.container.setAttribute('role', 'group');
        that.nodes.toggle.setAttribute('tabindex', '0');
        that.nodes.toggle.setAttribute('role', 'button');

        // Check state
        that.isCollapsed = cm.isClass(that.nodes.container, 'is-hide') || !cm.isClass(that.nodes.container, 'is-show');

        // Check storage state
        if (that.params.remember) {
            var storageCollapsed = that.storageRead('isCollapsed');
            that.isCollapsed = storageCollapsed !== null ? storageCollapsed : that.isCollapsed;
        }

        // Animation
        that.animations.target = new cm.Animation(that.nodes.target);

        // Trigger collapse event
        if (that.isCollapsed) {
            that.collapse(true);
        } else {
            that.expand(true);
        }
    };

    var expandEnd = function() {
        that.isProcess = false;
        that.nodes.target.style.opacity = 1;
        that.nodes.target.style.height = 'auto';
        that.nodes.target.style.overflow = 'visible';
        // Trigger events
        cm.customEvent.trigger(that.nodes.target, 'redraw', {
            direction: 'child',
            self: false
        });
        that.triggerEvent('onShow');
    };

    var collapseEnd = function() {
        that.isProcess = false;
        that.nodes.target.style.opacity = 0;
        that.nodes.target.style.height = 0;
        that.nodes.target.style.display = 'none';
        that.triggerEvent('onHide');
    };

    /* ******* PUBLIC ******* */

    that.setTitle = function(node) {
        cm.clearNode(that.nodes.title);
        if (cm.isString(node) || cm.isNumber(node)) {
            that.nodes.title.innerHTML = node;
        } else {
            cm.appendNodes(node, that.nodes.title);
        }
        return that;
    };

    that.setContent = function(node) {
        var parent = that.nodes.content || that.nodes.target;
        cm.clearNode(parent);
        if (cm.isString(node) || cm.isNumber(node)) {
            parent.innerHTML = node;
        } else {
            cm.appendNodes(node, parent);
        }
        return that;
    };

    that.toggle = function() {
        if (that.isCollapsed) {
            that.expand();
        } else {
            that.collapse();
        }
    };

    that.expand = function(isImmediately) {
        if (!isImmediately && (!that.isCollapsed || that.isProcess)) {
            return;
        }

        that.isCollapsed = false;
        that.isProcess = 'show';
        that.triggerEvent('onShowStart');

        // Write storage
        if (that.params.remember) {
            that.storageWrite('isCollapsed', false);
        }

        // Set title
        if (that.params.toggleTitle) {
            that.setTitle(that.lang('hide'));
        }

        // Set accessibility
        that.nodes.toggle.setAttribute('aria-expanded', true);
        that.nodes.target.setAttribute('aria-hidden', false);

        // Set classes
        cm.replaceClass(that.nodes.container, 'is-hide', 'is-show');

        // Animate
        if (isImmediately) {
            expandEnd();
        } else {
            // Redraw inner content
            that.nodes.target.style.height = 'auto';
            that.nodes.target.style.display = 'block';

            // Trigger events
            cm.customEvent.trigger(that.nodes.target, 'redraw', {
                direction: 'child',
                self: false
            });

            // Prepare animation
            that.nodes.target.style.height = 0;
            that.nodes.target.style.overflow = 'hidden';
            if (!that.nodes.target.style.opacity) {
                that.nodes.target.style.opacity = 0;
            }
            that.animations.target.go({
                style: {
                    height: [cm.getRealHeight(that.nodes.target, 'offset', 'current'), 'px'].join(''),
                    opacity: 1
                },
                anim: 'smooth',
                duration: that.params.duration,
                onStop: expandEnd
            });
        }
    };

    that.collapse = function(isImmediately) {
        if (!isImmediately && (that.isCollapsed || that.isProcess)) {
            return;
        }

        that.isCollapsed = true;
        that.isProcess = 'hide';
        that.triggerEvent('onHideStart');

        // Write storage
        if (that.params.remember) {
            that.storageWrite('isCollapsed', true);
        }

        // Set title
        if (that.params.toggleTitle) {
            that.setTitle(that.lang('show'));
        }

        // Set accessibility
        that.nodes.toggle.setAttribute('aria-expanded', false);
        that.nodes.target.setAttribute('aria-hidden', true);

        // Set classes
        cm.replaceClass(that.nodes.container, 'is-show', 'is-hide');

        // Animate
        that.nodes.target.style.overflow = 'hidden';
        if (!that.nodes.target.style.opacity) {
            that.nodes.target.style.opacity = 1;
        }
        if (isImmediately) {
            collapseEnd();
        } else {
            that.animations.target.go({
                style: {
                    height: '0px',
                    opacity: 0
                },
                anim: 'smooth',
                duration: that.params.duration,
                onStop: collapseEnd
            });
        }
    };

    init();
});

cm.define('Com.Toolbar', {
    'modules' : [
        'Params',
        'Events',
        'Langs',
        'Structure',
        'DataConfig',
        'DataNodes',
        'Stack'
    ],
    'events' : [
        'onRenderStart',
        'onRender',
        'onProcessEnd'
    ],
    'params' : {
        'node' : cm.node('div'),
        'container' : null,
        'name' : '',
        'embedStructure' : 'append',
        'adaptive' : true,
        'flex' : false,
        'className' : null,
        'positions': ['left', 'right']
    }
},
function(params){
    var that = this;

    that.nodes = {};
    that.groups = {};
    that.items = [];
    that.isHidden = true;

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataNodes(that.params['node']);
        that.getDataConfig(that.params['node']);
        that.addToStack(that.params['node']);
        that.triggerEvent('onRenderStart');
        render();
        that.addToStack(that.nodes['container']);
        that.triggerEvent('onRender');
    };

    var render = function(){
        // Structure
        that.nodes['container'] = cm.node('div', {'class' : 'com__toolbar is-hidden'},
            that.nodes['toolbar'] = cm.node('div', {'class' : 'pt__toolbar'},
                that.nodes['inner'] = cm.node('div', {'class' : 'inner'})
            )
        );

        // Positions
        cm.forEach(that.params['positions'], function(position){
            that.nodes[position] = cm.node('div', {'class' : position});
            cm.appendChild(that.nodes[position], that.nodes['inner']);
        });

        // Classes
        if(that.params['adaptive']){
            cm.addClass(that.nodes['toolbar'], 'is-adaptive');
        }else{
            cm.addClass(that.nodes['toolbar'], 'is-not-adaptive');
        }
        if(that.params['flex']){
            cm.addClass(that.nodes['toolbar'], 'is-flex');
        }
        that.params['className'] && cm.addClass(that.nodes['toolbar'], that.params['className']);

        // Append
        that.embedStructure(that.nodes['container']);
    };

    /* ******* PUBLIC ******* */

    that.clear = function(){
        cm.forEach(that.groups, function(group){
            that.removeGroup(group);
        });
        that.triggerEvent('onProcessEnd');
        return that;
    };

    that.addGroup = function(item){
        item = cm.merge({
            'name' : '',
            'position' : 'left',            // left | center | right | justify
            'hidden' : false,
            'container' : cm.node('ul', {'class' : 'group'}),
            'node' : null,
            'adaptive' : true,
            'flex' : false,
            'justify': null,
            'title': null,
            'items' : {}
        }, item);
        if(!that.groups[item['name']]){
            if(!item['node']){
                item['node'] = item['container'];
            }
            item['adaptive'] && cm.addClass(item['container'], 'is-adaptive');
            item['flex'] && cm.addClass(item['container'], 'is-flex');
            item['hidden'] && cm.addClass(item['container'], 'is-hidden');
            item['justify'] && cm.addClass(item['container'], ['pull', item.justify].join('-'));
            // Label
            if(!cm.isEmpty(item['title'])){
                item['container'].setAttribute('aria-label', item['title']);
            }
            // Position
            if(/left|center|right/.test(item['position'])){
                cm.appendChild(item['container'], that.nodes[item['position']]);
            }else if(item['position'] === 'justify'){
                cm.appendChild(item['container'], that.nodes['inner']);
            }
            that.groups[item['name']] = item;
        }
        that.triggerEvent('onProcessEnd');
        return that;
    };

    that.removeGroup = function(name){
        var item;
        if(cm.isObject(arguments[0])){
            item = name;
        }else{
            item = that.getGroup(name);
        }
        if(item){
            cm.remove(item['container']);
            delete that.groups[item['name']];
        }
        that.triggerEvent('onProcessEnd');
        return that;
    };

    that.getGroup = function(name){
        return that.groups[name];
    };

    that.showGroup = function(name){
        var item = that.getGroup(name);
        if(item){
            item['hidden'] = false;
            cm.removeClass(item['container'], 'is-hidden');
        }
        return that;
    };

    that.hideGroup = function(name){
        var item = that.getGroup(name);
        if(item){
            item['hidden'] = true;
            cm.addClass(item['container'], 'is-hidden');
        }
        return that;
    };

    that.isGroupEmpty = function(name){
        var item = that.getGroup(name);
        if(item){
            return cm.getLength(item.items) === 0;
        }
        return true;
    };

    that.toggleGroupVisibility = function(name){
        if(that.isGroupEmpty(name)){
            that.hideGroup(name);
        }else{
            that.showGroup(name);
        }
        return that;
    };

    that.addField = function(item){
        var group;
        item = cm.merge({
            'name' : '',
            'hidden' : false,
            'container' : cm.node('li'),
            'node' : null,
            'size' : null,
            'classes' : [],
            'group' : null,
            'constructor' : false,
            'constructorParams' : {}
        }, item);
        group = that.groups[item['group']];
        // Render
        if(group && !group.items[item['name']]){
            // Styles
            item['size'] && cm.addClass(item['container'], item['size']);
            item['classes'] && cm.addClass(item['container'], item['classes']);
            item['hidden'] && cm.addClass(item['container'], 'is-hidden')
            // Controller
            if(item['constructor']){
                cm.getConstructor(item['constructor'], function(classConstructor){
                    item['controller'] = new classConstructor(
                        cm.merge(item['constructorParams'], {
                            'container' : item['container']
                        })
                    );
                });
            }
            // Embed
            if(cm.isNode(item['node'])){
                cm.appendChild(item['node'], item['container']);
            }
            cm.appendChild(item['container'], group['node']);
            group.items[item['name']] = item;
            that.items = cm.arrayAdd(that.items, item);
            that.toggleVisibility();
        }
        that.triggerEvent('onProcessEnd');
        return that;
    };

    that.showField = function(name, groupName){
        var item = that.getField(name, groupName);
        if(item){
            item['hidden'] = false;
            cm.removeClass(item['container'], 'is-hidden');
        }
        return that;
    };

    that.hideField = function(name, groupName){
        var item = that.getField(name, groupName);
        if(item){
            item['hidden'] = true;
            cm.addClass(item['container'], 'is-hidden');
        }
        return that;
    };

    that.addButton = function(item){
        var group;
        item = cm.merge({
            'container' : cm.node('li'),
            'node' : null,
            'type' : 'primary',             // primary, secondary, success, danger, warning
            'name' : '',
            'label' : '',
            'title' : '',
            'group' : '',
            'access' : true,
            'disabled' : false,
            'hidden' : false,
            'tagName': 'a',
            'className' : '',
            'attr' : {},
            'preventDefault' : true,
            'constructor' : false,
            'constructorParams' : {},
            'callback' : function(){}
        }, item);
        group = that.groups[item['group']];
        // Validate
        if(cm.isEmpty(item['name'])){
            item['name'] = item['label'];
        }
        // Render
        if(item['access'] && group && !group.items[item['name']]){
            // Structure
            if (!cm.isNode(item['node'])) {
                item['node'] = cm.node(item['tagName'], item['attr']);
                // Styles
                cm.addClass(item['node'], 'button');
                cm.addClass(item['node'], ['button', item['type']].join('-'));
                cm.addClass(item['node'], item['className']);
                // Label and title
                item['node'].innerHTML = item['label'];
                item['node'].setAttribute('title', item['title']);
                item['node'].setAttribute('aria-label', item['title']);
            }
            // States
            item['disabled'] && cm.addClass(item['node'], 'button-disabled');
            item['hidden'] && cm.addClass(item['container'], 'is-hidden');
            // Callbacks
            if(item['constructor']){
                cm.getConstructor(item['constructor'], function(classConstructor){
                    item['controller'] = new classConstructor(
                        cm.merge(item['constructorParams'], {
                            'node' : item['node']
                        })
                    );
                });
            }else{
                cm.click.add(item['node'], function(e){
                    item['preventDefault'] && cm.preventDefault(e);
                    !item['disabled'] && item['callback'](e, item);
                });
            }
            cm.appendChild(item['node'], item['container']);
            cm.appendChild(item['container'], group['node']);
            group.items[item['name']] = item;
            that.items = cm.arrayAdd(that.items, item);
            that.toggleVisibility();
        }
        that.triggerEvent('onProcessEnd');
        return that;
    };

    that.enableButton = function(name, groupName){
        var item = that.getButton(name, groupName);
        if(item){
            item['disabled'] = false;
            cm.removeClass(item['node'], 'button-disabled');
        }
        return that;
    };

    that.disableButton = function(name, groupName){
        var item = that.getButton(name, groupName);
        if(item){
            item['disabled'] = true;
            cm.addClass(item['node'], 'button-disabled');
        }
        return that;
    };

    that.showButton = function(name, groupName){
        var item = that.getButton(name, groupName);
        if(item){
            item['hidden'] = false;
            cm.removeClass(item['container'], 'is-hidden');
        }
        return that;
    };

    that.hideButton = function(name, groupName){
        var item = that.getButton(name, groupName);
        if(item){
            item['hidden'] = true;
            cm.addClass(item['container'], 'is-hidden');
        }
        return that;
    };

    that.addLabel = function(item){
        var group;
        item = cm.merge({
            'container' : cm.node('li', {'class' : 'label'}),
            'node' : null,
            'name' : '',
            'label' : '',
            'size' : null,
            'hidden' : false,
            'group' : null
        }, item);
        group = that.groups[item['group']];
        // Render
        if(group && !group.items[item['name']]){
            // Structure
            item['node'] = cm.node('div', {'innerHTML' : item['label']});
            // Styles
            item['size'] && cm.addClass(item['container'], item['size']);
            item['hidden'] && cm.addClass(item['container'], 'is-hidden');
            // Embed
            if(cm.isNode(item['node'])){
                cm.appendChild(item['node'], item['container']);
            }
            cm.appendChild(item['container'], group['node']);
            group.items[item['name']] = item;
            that.items = cm.arrayAdd(that.items, item);
            that.toggleVisibility();
        }
        that.triggerEvent('onProcessEnd');
        return that;
    };

    that.getField = that.getButton = that.getLabel = function(name, groupName){
        var group = that.groups[groupName],
            item;
        if(group){
            item = group.items[name];
        }
        return item;
    };

    that.removeField = that.removeButton = that.removeLabel = function(name, groupName){
        var item, group;
        if(cm.isObject(arguments[0])){
            item = arguments[0];
            group = that.groups[item['group']];
        }else{
            group = that.groups[groupName];
            if(group){
                item = group.items[name];
            }
        }
        if(item){
            cm.remove(item['container']);
            delete group.items[item['name']];
            that.items = cm.arrayRemove(that.items, item);
            that.toggleVisibility();
        }
        that.triggerEvent('onProcessEnd');
        return that;
    };

    that.isEmpty = function(){
        return that.items.length === 0;
    };

    that.hide = function(){
        if(!that.isHidden){
            that.isHidden = true;
            cm.addClass(that.nodes['container'], 'is-hidden');
        }
        return that;
    };

    that.show = function(){
        if(that.isHidden){
            that.isHidden = false;
            cm.removeClass(that.nodes['container'], 'is-hidden');
        }
        return that;
    };

    that.toggleVisibility = function(){
        if(that.isEmpty()){
            that.hide();
        }else{
            that.show();
        }
        return that;
    };

    that.getNodes = function(key){
        return that.nodes[key] || that.nodes;
    };

    init();
});

cm.define('Com.Tooltip', {
    'modules': [
        'Params',
        'Events',
        'Langs',
        'Stack'
    ],
    'events': [
        'onValidateParams',
        'onRender',
        'onShowStart',
        'onShow',
        'onShowEnd',
        'onHideStart',
        'onHide',
        'onHideEnd'
    ],
    'params': {
        'customEvents': true,
        'controllerEvents': false,
        'name': '',
        'target': cm.node('div'),
        'targetEvent': 'hover',                        // hover | click | none
        'hideOnReClick': false,                        // Hide tooltip when re-clicking on the target, requires setting value 'targetEvent': 'click'
        'hideOnSelfClick': false,                      // Hide tooltip when clicked on own content
        'hideOnOut': true,                             // Hide content when clicked / mouseover outside own content
        'autoHide': false,
        'autoHideDelay': 'cm._config.autoHideDelay',
        'hold': false,                                 // After close hold content in specified node from 'holdTarget' parameter
        'holdTarget': false,
        'preventClickEvent': false,                    // Prevent default click event on the target, requires setting value 'targetEvent': 'click'
        'positionTarget': false,                       // Override target node for calculation position and dimensions
        'top': 0,                                      // Supported properties: targetHeight, selfHeight, screenHeight, number
        'left': 0,                                     // Supported properties: targetWidth, selfWidth, screenWidth, number
        'width': 'auto',                               // Supported properties: targetWidth, screenWidth, auto, number
        'height': 'auto',
        'minWidth': 0,
        'adaptiveFrom': null,
        'adaptiveTop': null,
        'adaptiveLeft': null,
        'adaptiveWidth': null,
        'adaptiveHeight': null,
        'scroll': 'auto',                              // auto, scroll, visible
        'duration': 'cm._config.animDurationShort',
        'delay': 0,
        'resizeInterval': 5,
        'disabled': false,
        'position': 'absolute',
        'className': '',
        'theme': 'theme-default',
        'animate': false,
        'arrow': false,
        'adaptive': true,
        'adaptiveX': true,
        'adaptiveY': true,
        'ariaRole': 'tooltip',
        'title': '',
        'titleTag': 'h3',
        'content': cm.node('div'),
        'container': 'document.body',
    },
},
function(params) {
    var that = this;

    that.nodes = {};
    that.container = null;
    that.animation = null;
    that.delayInterval = null;
    that.resizeInterval = null;
    that.autoHideInterval = null;

    that.isDestructed = false;
    that.isHideProcess = false;
    that.isShowProcess = false;
    that.isShow = false;
    that.isWindowEvent = false;
    that.disabled = false;

    var init = function() {
        // Bind context
        that.windowEventHandler = windowEvent.bind(that);
        that.targetEventHandler = targetEvent.bind(that);
        that.destructHandler = that.destruct.bind(that);

        // Params
        that.params.controllerEvents && bindControllerEvents();
        that.setParams(params);
        that.convertEvents(that.params.events);
        validateParams();
        render();
        that.addToStack(that.nodes.container);
        setMiscEvents();
        that.triggerEvent('onRender');
    };

    var bindControllerEvents = function() {
        cm.forEach(that._raw.events, function(name) {
            if (!that[name]) {
                that[name] = function() {};
            }
            if (!that[`${name}Handler`]) {
                that[`${name}Handler`] = that[name].bind(that);
            }
            that.addEvent(name, that[`${name}Handler`]);
        });
    };

    var validateParams = function() {
        that.setContainer(that.params.container || that.params.holdTarget || that.params.target);
        if (!cm.isArray(that.params.targetEvent)) {
            that.params.targetEvent = [that.params.targetEvent];
        }
        if (!that.params.adaptive) {
            that.params.adaptiveX = false;
            that.params.adaptiveY = false;
        }
        that.params.position = cm.inArray(['absolute', 'fixed'], that.params.position) ? that.params.position : 'absolute';
        that.triggerEvent('onValidateParams');
    };

    var render = function() {
        // Structure
        that.nodes.container = cm.node('div', {'class': 'com__tooltip', 'role': that.params.ariaRole},
            that.nodes.inner = cm.node('div', {'class': 'inner'},
                that.nodes.content = cm.node('div', {'class': 'scroll'})
            )
        );
        cm.isString(that.params.scroll) && cm.addClass(that.nodes.content, ['is', that.params.scroll].join('-'));
        // Add position style
        that.nodes.container.style.position = that.params.position;
        // Add theme CSS class
        !cm.isEmpty(that.params.theme) && cm.addClass(that.nodes.container, that.params.theme);
        !cm.isEmpty(that.params.animate) && cm.addClass(that.nodes.container, ['animate', that.params.animate].join('--'));
        !cm.isEmpty(that.params.arrow) && cm.addClass(that.nodes.container, ['arrow', that.params.arrow].join('--'));
        // Add CSS class
        !cm.isEmpty(that.params.className) && cm.addClass(that.nodes.container, that.params.className);
        // Set title
        renderTitle(that.params.title);
        // Embed content
        renderContent(that.params.content);
        // Disabled / Enabled
        if (that.params.disabled) {
            that.disable();
        } else {
            that.enable();
        }
    };

    var renderTitle = function(title) {
        cm.remove(that.nodes.title);
        if (!cm.isEmpty(title)) {
            that.nodes.title = cm.node('div', {'class': 'title'},
                cm.node(that.params.titleTag, title)
            );
            cm.insertFirst(that.nodes.title, that.nodes.inner);
        }
    };

    var renderContent = function(node) {
        cm.clearNode(that.nodes.content);
        if (node) {
            that.nodes.content.appendChild(node);
        }
    };

    var setMiscEvents = function() {
        // Init animation
        that.animation = new cm.Animation(that.nodes.container);

        // Hide on self-click
        if (that.params.hideOnSelfClick) {
            cm.addEvent(that.nodes.container, 'click', function() {
                that.hide();
            });
        }

        // Add custom events
        if (that.params.customEvents) {
            cm.customEvent.add(that.getStackNode(), 'destruct', that.destructHandler);
        }
        setTargetEvent();
    };

    var targetEvent = function(event) {
        if (cm.inArray(that.params.targetEvent, 'click') && that.params.preventClickEvent) {
            cm.preventDefault(event);
        }
        if (!that.disabled) {
            if (that.isShow && cm.inArray(that.params.targetEvent, 'click') && that.params.hideOnReClick) {
                hide();
            } else {
                show();
            }
        }
    };

    var setTargetEvent = function() {
        // Hold
        if (that.params.hold) {
            var holdTarget = that.params.holdTarget || that.params.target;
            cm.appendChild(that.nodes.container, holdTarget);
        }

        // Event
        if (cm.inArray(that.params.targetEvent, 'hover')) {
            cm.addEvent(that.params.target, 'mouseover', that.targetEventHandler, true);
        }
        if (cm.inArray(that.params.targetEvent, 'click')) {
            cm.click.add(that.params.target, that.targetEventHandler, true);
        }
    };

    var removeTargetEvent = function() {
        if (cm.inArray(that.params.targetEvent, 'hover')) {
            cm.removeEvent(that.params.target, 'mouseover', that.targetEventHandler, true);
        }
        if (cm.inArray(that.params.targetEvent, 'click')) {
            cm.click.remove(that.params.target, that.targetEventHandler, true);
        }
    };

    var show = function(immediately) {
        if ((!that.isShow && !that.isShowProcess) || that.isHideProcess) {
            that.isShowProcess = true;
            setWindowEvent();

            // Show Handler
            clearDelayInterval();
            clearAutoHideInterval();
            if (immediately) {
                showHandler(immediately);
            } else if (that.params.delay && !that.isHideProcess) {
                that.delayInterval = setTimeout(showHandler, that.params.delay);
            } else {
                showHandler();
            }
        }

        // Reset auto hide delay
        if (that.isShow && !that.isShowProcess) {
            autoHideHandler();
        }
    };

    var showHandler = function(immediately) {
        // Append
        that.container.appendChild(that.nodes.container);
        that.nodes.container.style.display = 'block';
        resizeHelper();
        that.triggerEvent('onShowStart');

        // Animate
        cm.replaceClass(that.nodes.container, 'id-hide', 'is-show', true);
        if (immediately || !that.params.duration) {
            showHandlerEnd();
        } else {
            that.animation.stop();
            that.animation.go({
                style: {opacity: 1},
                duration: that.params.duration,
                anim: 'smooth',
                onStop: showHandlerEnd
            });
        }
    };

    var showHandlerEnd = function() {
        that.nodes.container.style.opacity = 1;
        that.isShow = true;
        that.isShowProcess = false;
        that.isHideProcess = false;
        autoHideHandler();
        that.triggerEvent('onShow');
        that.triggerEvent('onShowEnd');
    };

    var hide = function(immediately) {
        if ((that.isShow || that.isShowProcess) && !that.isHideProcess) {
            that.isHideProcess = true;

            // Hide Handler
            clearDelayInterval();
            clearAutoHideInterval();
            if (immediately) {
                hideHandler(immediately);
            } else if (that.params.delay && !that.isShowProcess) {
                that.delayInterval = setTimeout(hideHandler, that.params.delay);
            } else {
                hideHandler(false);
            }
        }
    };

    var hideHandler = function(immediately) {
        that.triggerEvent('onHideStart');

        // Animate
        cm.replaceClass(that.nodes.container, 'is-show', 'id-hide', true);
        if (immediately || !that.params.duration) {
            hideHandlerEnd();
        } else {
            that.animation.go({
                style: {opacity: 0},
                duration: that.params.duration,
                anim: 'smooth',
                onStop: hideHandlerEnd
            });
        }
    };

    var hideHandlerEnd = function() {
        clearResizeInterval();
        removeWindowEvent();
        that.nodes.container.style.display = 'none';
        if (that.params.hold) {
            var holdTarget = that.params.holdTarget || that.params.target;
            cm.appendChild(that.nodes.container, holdTarget);
        } else {
            cm.remove(that.nodes.container);
        }
        that.isShow = false;
        that.isShowProcess = false;
        that.isHideProcess = false;
        that.triggerEvent('onHide');
        that.triggerEvent('onHideEnd');
    };

    var autoHideHandler = function() {
        if (that.params.autoHide) {
            clearAutoHideInterval();
            that.autoHideInterval = setTimeout(hide, that.params.autoHideDelay);
        }
    };

    var resizeHelper = function() {
        resize();
        clearResizeInterval();
        that.resizeInterval = setTimeout(resizeHelper, that.params.resizeInterval);
    };

    var resize = function() {
        var target = that.params.positionTarget || that.params.target,
            targetWidth = target.offsetWidth,
            targetHeight = target.offsetHeight,
            selfHeight = that.nodes.container.offsetHeight,
            selfWidth = that.nodes.container.offsetWidth,
            pageSize = cm.getPageSize(),
            screenWidth = pageSize.winWidth,
            screenHeight = pageSize.winHeight,
            scrollTop = cm.getScrollTop(window),
            scrollLeft = cm.getScrollLeft(window),
            paramsTop = that.params.top,
            paramsLeft = that.params.left,
            paramsWidth = that.params.width,
            paramsHeight = that.params.height;

        // Validate
        if (!cm.isEmpty(that.params.adaptiveFrom) && that.params.adaptiveFrom >= screenWidth) {
            paramsTop = !cm.isEmpty(that.params.adaptiveTop) ? that.params.adaptiveTop : paramsTop;
            paramsLeft = !cm.isEmpty(that.params.adaptiveLeft) ? that.params.adaptiveLeft : paramsLeft;
            paramsWidth = !cm.isEmpty(that.params.adaptiveWidth) ? that.params.adaptiveWidth : paramsWidth;
            paramsHeight = !cm.isEmpty(that.params.adaptiveHeight) ? that.params.adaptiveHeight : paramsHeight;
        }

        // Calculate size
        (function() {
            var width = 0,
                height = 0,
                minWidth = 0;
            if (that.params.minWidth !== 'auto') {
                minWidth = eval(
                    that.params.minWidth
                        .toString()
                        .replace('targetWidth', targetWidth)
                        .replace('screenWidth', screenWidth)
                        .replace('selfWidth', selfWidth)
                );
                minWidth = Math.min(screenWidth, minWidth);
                that.nodes.container.style.minWidth = [minWidth, 'px'].join('');
            }
            if (paramsWidth !== 'auto') {
                width = eval(
                    paramsWidth
                        .toString()
                        .replace('targetWidth', targetWidth)
                        .replace('screenWidth', screenWidth)
                        .replace('selfWidth', selfWidth)
                );
                width = Math.max(minWidth, width);
                width = Math.min(screenWidth, width);
                if (width !== selfWidth) {
                    that.nodes.container.style.width = [width, 'px'].join('');
                }
            }
            if (paramsHeight !== 'auto') {
                height = eval(
                    paramsHeight
                        .toString()
                        .replace('targetHeight', targetHeight)
                        .replace('screenHeight', screenHeight)
                        .replace('selfHeight', selfHeight)
                );
                height = Math.min(screenHeight, height);
                that.nodes.content.style.maxHeight = [height, 'px'].join('');
            }
            selfWidth = that.nodes.container.offsetWidth;
            selfHeight = that.nodes.container.offsetHeight;
        })();

        // Calculate position
        (function() {
            var top = cm.getRealY(target),
                topAdd = eval(
                    paramsTop
                        .toString()
                        .replace('targetHeight', targetHeight)
                        .replace('screenHeight', screenHeight)
                        .replace('selfHeight', selfHeight)
                ),
                left = cm.getRealX(target),
                leftAdd = eval(
                    paramsLeft
                        .toString()
                        .replace('targetWidth', targetWidth)
                        .replace('screenWidth', screenWidth)
                        .replace('selfWidth', selfWidth)
                ),
                positionTop,
                positionLeft;

            // Calculate adaptive or static vertical position
            if (that.params.adaptiveY) {
                positionTop = Math.max(
                    Math.min(
                        ((top + topAdd + selfHeight > screenHeight)
                            ? (top - topAdd - selfHeight + targetHeight)
                            : (top + topAdd)
                        ),
                        (screenHeight - selfHeight)
                    ),
                    0
                );
            } else {
                positionTop = top + topAdd;
            }

            // Calculate adaptive or static horizontal position
            if (that.params.adaptiveX) {
                positionLeft = Math.max(
                    Math.min(
                        ((left + leftAdd + selfWidth > screenWidth)
                            ? (left - leftAdd - selfWidth + targetWidth)
                            : (left + leftAdd)
                        ),
                        (screenWidth - selfWidth)
                    ),
                    0
                );
            } else {
                positionLeft = left + leftAdd;
            }

            // Fix scroll position for absolute
            if (that.params.position === 'absolute') {
                if (that.container === document.body) {
                    positionTop += scrollTop;
                    positionLeft += scrollLeft;
                } else {
                    positionTop -= cm.getRealY(that.container);
                    positionLeft -= cm.getRealX(that.container);
                }
            }
            positionTop = Math.round(positionTop);
            positionLeft = Math.round(positionLeft);

            // Apply styles
            if (positionTop !== that.nodes.container.offsetTop) {
                that.nodes.container.style.top = [positionTop, 'px'].join('');
            }
            if (positionLeft !== that.nodes.container.offsetLeft) {
                that.nodes.container.style.left = [positionLeft, 'px'].join('');
            }
        })();
    };

    var setWindowEvent = function() {
        if (that.params.hideOnOut && !that.isWindowEvent) {
            that.isWindowEvent = true;
            if (cm.inArray(that.params.targetEvent, 'hover')) {
                cm.addEvent(window, 'mousemove', that.windowEventHandler);
            }
            if (cm.inArray(that.params.targetEvent, 'click')) {
                cm.addEvent(window, 'mousedown', that.windowEventHandler);
            }
        }
    };

    var removeWindowEvent = function() {
        if (that.params.hideOnOut && that.isWindowEvent) {
            that.isWindowEvent = false;
            if (cm.inArray(that.params.targetEvent, 'hover')) {
                cm.removeEvent(window, 'mousemove', that.windowEventHandler);
            }
            if (cm.inArray(that.params.targetEvent, 'click')) {
                cm.removeEvent(window, 'mousedown', that.windowEventHandler);
            }
        }
    };

    var windowEvent = function(e) {
        var target = cm.getEventTarget(e);
        if (!cm.isParent(that.nodes.container, target, true) && !cm.isParent(that.params.target, target, true)) {
            hide(false);
        } else {
            show(true);
        }
    };

    var clearResizeInterval = function() {
        that.resizeInterval && clearTimeout(that.resizeInterval);
        that.resizeInterval = null;
    };

    var clearDelayInterval = function() {
        that.delayInterval && clearTimeout(that.delayInterval);
        that.delayInterval = null;
    };

    var clearAutoHideInterval = function() {
        that.autoHideInterval && clearTimeout(that.autoHideInterval);
        that.autoHideInterval = null;
    };

    /* ******* MAIN ******* */

    that.setTitle = function(title) {
        renderTitle(title);
        return that;
    };

    that.setContent = function(node) {
        renderContent(node);
        return that;
    };

    that.setTarget = function(node) {
        removeTargetEvent();
        that.params.target = node || cm.node('div');
        if (!that.params.container) {
            that.setContainer(that.params.holdTarget || that.params.target);
        }
        setTargetEvent();
        return that;
    };

    that.setContainer = function(node) {
        if (cm.isNode(node)) {
            that.container = node;
        }
        return that;
    };

    that.show = function(immediately) {
        show(immediately);
        return that;
    };

    that.hide = function(immediately) {
        hide(immediately);
        return that;
    };

    that.disable = function() {
        that.disabled = true;
        return that;
    };

    that.enable = function() {
        that.disabled = false;
        return that;
    };

    that.focus = function() {
        that.nodes.container.focus();
        return that;
    };

    that.scrollToNode = function(node) {
        if (cm.isNode(node) && cm.isParent(that.nodes.content, node)) {
            that.nodes.content.scrollTop = node.offsetTop - that.nodes.content.offsetTop;
        }
        return that;
    };

    that.isOwnNode = function(node) {
        return cm.isParent(that.nodes.container, node, true);
    };

    that.remove = function() {
        hide(true);
        removeTargetEvent();
        return that;
    };

    that.destruct = function() {
        if (!that.isDestructed) {
            that.isDestructed = true;
            cm.customEvent.trigger(that.getStackNode(), 'destruct', {
                direction: 'child',
                self: false
            });
            cm.customEvent.remove(that.getStackNode(), 'destruct', that.destructHandler);
            that.removeFromStack();
            that.remove();
        }
        return that;
    };

    // Deprecated
    that.getNodes = function(key) {
        return that.nodes[key] || that.nodes;
    };

    init();
});

// This file must be deleted in future

Com['UA'] = {
    'hash' : {'ie':'MSIE','edge':'Edge','opera':'Opera','ff':'Firefox','firefox':'Firefox','webkit':'AppleWebKit','safari':'Safari','chrome':'Chrome','steam':'Steam'},
    'fullname' : {'Edge':'Microsoft Edge','MSIE':'Microsoft Internet Explorer','Firefox':'Mozilla Firefox','Chrome':'Google Chrome','Safari':'Apple Safari','Opera':'Opera','Opera Mini':'Opera Mini','Opera Mobile':'Opera Mobile','IE Mobile':'Internet Explorer Mobile','Steam':'Valve Steam Game Overlay'},
    'os' : {
        'Windows':{'NT 5.0':'2000','NT 5.1':'XP','NT 5.2':'Server 2003','NT 6.0':'Vista','NT 6.1':'7','NT 6.2':'8','NT 6.3':'8.1','NT 10.0':'10'},
        'Mac OSX':{'10.0':'Cheetah','10.1':'Puma','10.2':'Jaguar','10.3':'Panther','10.4':'Tiger','10.5':'Leopard','10.6':'Snow Leopard','10.7':'Lion','10.8':'Mountain Lion','10.9':'Mavericks','10.10':'Yosemite','10.11':'El Capitan'}
    },
    'str' : navigator.userAgent,
    'get' : function(str){
        var that = this,
            arr = {};
        str = (str)? str : that.str;
        // Check browser
        if(str.indexOf('IEMobile') > -1){
            arr['browser'] = 'IE Mobile';
            arr['hash'] = 'ie-mobile';
            arr['engine'] = 'Trident';
            arr['type'] = 'mobile';
            arr['full_version'] = str.replace(/^(?:.+)(?:IEMobile)(?:[\s\/]{0,})([0-9\.]{1,})(?:.+)$/, '$1');
            var sp = arr['full_version'].toString().split('.');
            arr['version'] = sp[0]+((sp[1])? '.'+sp[1].slice(0, 1) : '');
            arr['short_version'] = sp[0];
        }else if(str.indexOf('MSIE') > -1 || str.indexOf('Trident') > -1){
            arr['browser'] = 'MSIE';
            arr['hash'] = 'ie';
            arr['engine'] = 'Trident';
            if(str.indexOf('MSIE') > -1){
                arr['full_version'] = str.replace(/^(?:.+)(?:MSIE)(?:[\s\/]{0,})([0-9\.]{1,})(?:.+)$/, '$1');
            }else{
                arr['full_version'] = str.replace(/^(?:.+)(?:rv:)(?:[\s\/]{0,})([0-9\.]{1,})(?:.+)$/, '$1');
            }
            var sp = arr['full_version'].toString().split('.');
            arr['version'] = sp[0]+((sp[1])? '.'+sp[1].slice(0, 1) : '');
            arr['short_version'] = sp[0];
        }else if(str.indexOf('Opera Mobi') > -1){
            arr['browser'] = 'Opera Mobile';
            arr['hash'] = 'opera-mobile';
            arr['engine'] = 'Presto';
            arr['type'] = 'mobile';
            arr['version'] = arr['full_version'] = (str.indexOf('Version') > -1)? str.replace(/^(?:.+)(?:Version\/)([0-9\.]{1,})$/, '$1') : '';
            arr['short_version'] = arr['version'].split('.')[0];
        }else if(str.indexOf('Opera Mini') > -1){
            arr['browser'] = 'Opera Mini';
            arr['hash'] = 'opera-mini';
            arr['engine'] = 'Presto';
            arr['type'] = 'mobile';
            arr['full_version'] = str.replace(/^(?:.+)(?:Opera Mini\/)([0-9\.]{0,})(?:.+)$/, '$1');
            var sp = arr['full_version'].toString().split('.');
            arr['version'] = sp[0]+((sp[1])? '.'+sp[1].slice(0, 1) : '');
            arr['short_version'] = sp[0];
        }else if(str.indexOf('Opera') > -1){
            arr['browser'] = 'Opera';
            arr['hash'] = 'opera';
            arr['engine'] = 'Presto';
            arr['version'] = arr['full_version'] = (str.indexOf('Version') > -1)? str.replace(/^(?:.+)(?:Version\/)([0-9\.]{0,})(?:.{0,})$/, '$1') : str.replace(/^(?:Opera\/)([0-9\.]{1,})\s(?:.+)$/, '$1');
            arr['short_version'] = arr['version'].split('.')[0];
        }else if(str.indexOf('OPR') > -1){
            arr['browser'] = 'Opera';
            arr['hash'] = 'opera';
            arr['engine'] = 'Blink';
            arr['full_version'] = str.replace(/^(?:.+)(?:OPR\/)([0-9\.]{1,})(?:.+)$/, '$1');
            var sp = arr['full_version'].toString().split('.');
            arr['version'] = sp[0]+((sp[1])? '.'+sp[1] : '');
            arr['short_version'] = sp[0];
        }else if(str.indexOf('Fennec') > -1){
            arr['browser'] = 'Fennec';
            arr['hash'] = 'fennec';
            arr['engine'] = 'Gecko';
            arr['type'] = 'mobile';
            arr['full_version'] = str.replace(/^(?:.+)(?:Fennec)(?:[\/]{0,})([0-9\.]{0,})(?:.{0,})$/, '$1');
            var sp = arr['full_version'].toString().split('.');
            arr['version'] = sp[0]+((sp[1])? '.'+sp[1] : '');
            arr['short_version'] = sp[0];
        }else if(str.indexOf('Firefox') > -1){
            arr['browser'] = 'Firefox';
            arr['hash'] = 'firefox';
            arr['engine'] = 'Gecko';
            arr['full_version'] = str.replace(/^(?:.+)(?:Firefox)(?:[\/]{0,})([0-9\.]{0,})(?:.{0,})$/, '$1');
            var sp = arr['full_version'].toString().split('.');
            arr['version'] = sp[0]+((sp[1])? '.'+sp[1] : '');
            arr['short_version'] = sp[0];
        }else if(str.indexOf('Edge') > -1){
            arr['browser'] = 'Edge';
            arr['hash'] = 'edge';
            arr['engine'] = 'EdgeHTML';
            arr['full_version'] = str.replace(/^(?:.+)(?:Edge)(?:[\/]{0,})([0-9\.]{0,})(?:.{0,})$/, '$1');
            var sp = arr['full_version'].toString().split('.');
            arr['version'] = sp[0]+((sp[1])? '.'+sp[1] : '');
            arr['short_version'] = sp[0];
        }else if(str.indexOf('Valve Steam GameOverlay') > -1){
            arr['browser'] = 'Steam';
            arr['hash'] = 'steam';
            arr['engine'] = 'AppleWebKit';
            arr['full_version'] = str.replace(/^(?:.+)(?:Chrome\/)([0-9\.]{1,})(?:.+)$/, '$1');
            var sp = arr['full_version'].toString().split('.');
            arr['version'] = sp[0]+((sp[1])? '.'+sp[1] : '');
            arr['short_version'] = sp[0];
        }else if(str.indexOf('Chrome') > -1){
            arr['browser'] = 'Chrome';
            arr['hash'] = 'chrome';
            arr['engine'] = 'Blink';
            arr['full_version'] = str.replace(/^(?:.+)(?:Chrome\/)([0-9\.]{1,})(?:.+)$/, '$1');
            var sp = arr['full_version'].toString().split('.');
            arr['version'] = sp[0]+((sp[1])? '.'+sp[1] : '');
            arr['short_version'] = sp[0];
        }else if(str.indexOf('Safari') > -1){
            arr['browser'] = 'Safari';
            arr['hash'] = 'safari';
            arr['engine'] = 'AppleWebKit';
            arr['full_version'] = (str.indexOf('Version') > -1)? str.replace(/^(?:.+)(?:Version\/)([0-9\.]{1,})(?:.+)$/, '$1') : '2';
            var sp = arr['full_version'].toString().split('.');
            arr['version'] = sp[0]+((sp[1])? '.'+sp[1] : '');
            arr['short_version'] = sp[0];
        }else{
            arr['version'] = arr['browser'] = 'unknown';
        }
        // Browser fullname
        arr['full_name'] = ((that.fullname[arr['browser']])? that.fullname[arr['browser']] : 'unknown');
        arr['browser_name'] = arr['full_name'] + ((arr['version'].length > 0 && arr['version'] != 'unknown')? ' '+arr['version'] : '');
        // Ckeck browser engine
        if(!arr['engine']){
            if(str.indexOf('AppleWebKit') > -1){
                arr['engine'] = 'AppleWebKit';
            }else if(str.indexOf('Trident') > -1){
                arr['engine'] = 'Trident';
            }else if(str.indexOf('Gecko') > -1){
                arr['engine'] = 'Gecko';
            }else{
                arr['engine'] = 'unknown';
            }
        }
        // Check OS
        if(str.indexOf('Windows Phone') > -1){
            arr['os'] = 'Windows Phone';
            arr['os_type'] = 'mobile';
            arr['os_version'] = str.replace(/^(?:.+)(?:Windows Phone)(?:[\s]{0,1})([a-zA-Z\s0-9\.]{0,})(?:.+)$/, '$1');
        }else if(str.indexOf('Windows Phone OS') > -1){
            arr['os'] = 'Windows Phone OS';
            arr['os_type'] = 'mobile';
            arr['os_version'] = str.replace(/^(?:.+)(?:Windows Phone OS)(?:[\s]{0,1})([a-zA-Z\s0-9\.]{0,})(?:.+)$/, '$1');
        }else if(str.indexOf('Windows CE') > -1){
            arr['os'] = 'Windows Mobile';
            arr['os_type'] = 'mobile';
            arr['os_version'] = '';
        }else if(str.indexOf('Windows') > -1){
            arr['os'] = 'Windows';
            arr['os_version'] = str.replace(/^(?:.+)(?:Windows)(?:[\s]{0,1})([a-zA-Z\s0-9\.]{0,})(?:.+)$/, '$1');
        }else if(str.indexOf('Android') > -1){
            arr['os'] = 'Android';
            arr['os_type'] = 'mobile';
            arr['os_version'] = str.replace(/^(?:.+)(?:Android)(?:[\s]{0,})([0-9\.]{0,})(?:.+)$/, '$1');
        }else if(str.indexOf('Linux') > -1){
            arr['os'] = 'Linux';
            arr['os_version'] = str.replace(/^(?:.+)(?:Linux)(?:[\s]{0,1})([a-zA-Z0-9\.\s_]{0,})(?:.+)$/, '$1');
        }else if(str.indexOf('iPhone') > -1){
            arr['os'] = 'iPhone';
            arr['os_type'] = 'mobile';
            arr['os_version'] =  str.replace(/^(?:.+)(?:CPU[ iPhone]{0,} OS )([a-zA-Z0-9\._]{0,})(?:.+)$/, '$1').replace(/_/gi,'.');
        }else if(str.indexOf('iPad') > -1){
            arr['os'] = 'iPad';
            arr['os_type'] = 'mobile';
            arr['os_version'] =  str.replace(/^(?:.+)(?:CPU[ iPhone]{0,} OS )([a-zA-Z0-9\._]{0,})(?:.+)$/, '$1').replace(/_/gi,'.');
        }else if(str.indexOf('Macintosh') > -1){
            if((str.indexOf('Mac OS X') > -1)){
                arr['os'] = 'Mac OSX';
                arr['os_version'] =  str.replace(/^(?:.+)(?:Mac OS X)(?:[\s]{0,1})([a-zA-Z0-9\.\s_]{0,})(?:.+)$/, '$1').replace(/_/gi,'.');
            }else{
                arr['os'] = 'Mac OS';
                arr['os_version'] = 'Classic';
            }
        }else if(str.indexOf('BlackBerry') > -1){
            arr['os'] = 'BlackBerry';
            arr['os_type'] = 'mobile';
            arr['os_version'] = str.replace(/^(?:.{0,})(?:BlackBerry)(?:[\s]{0,})([0-9\.]{0,})(?:.+)$/, '$1');
        }else if(str.indexOf('FreeBSD') > -1){
            arr['os'] = 'FreeBSD';
            arr['os_version'] = str.replace(/^(?:.+)(?:FreeBSD )([a-zA-Z0-9\.\s_]{0,})(?:.+)$/, '$1');
        }else if(str.indexOf('NetBSD') > -1){
            arr['os'] = 'NetBSD';
            arr['os_version'] = str.replace(/^(?:.+)(?:NetBSD )([a-zA-Z0-9\.\s_]{0,})(?:.+)$/, '$1');
        }else if(str.indexOf('OpenBSD') > -1){
            arr['os'] = 'OpenBSD';
            arr['os_version'] = str.replace(/^(?:.+)(?:OpenBSD )([a-zA-Z0-9\.\s_]{0,})(?:.+)$/, '$1');
        }else if(str.indexOf('SunOS') > -1){
            arr['os'] = 'SunOS';
            arr['os_version'] = str.replace(/^(?:.+)(?:SunOS )([a-zA-Z0-9\.\s_]{0,})(?:.+)$/, '$1');
        }else{
            arr['os'] = arr['os_version'] = 'unknown';
        }
        // Check OS Name
        if(!arr['os_name']){
            if(arr['os'] != 'unknown'){
                var os = that.os[arr['os']];
                arr['os_name'] =  arr['os'] + ((arr['os_version'].length > 0 && arr['os_version'] != 'unknown')? ' '+((os && os[arr['os_version']])? os[arr['os_version']] : arr['os_version']) : '');
            }
            else{
                arr['os_name'] = 'unknown';
            }
        }
        return arr;
    },
    'setBrowserClass' : function(){
        var user = Com.UA.get();
        if(user['hash']){
            cm.addClass(document.getElementsByTagName('html')[0], [user['engine'].toLowerCase(), user['hash'], user['hash']+user['short_version']].join(' '));
        }
    },
    'setEngineClass' : function(){
        var user = Com.UA.get();
        cm.addClass(document.getElementsByTagName('html')[0], user['engine'].toLowerCase());
    },
    'is' : function(str){
        var that = this,
            ver = str.replace(/[^0-9\.\,]/g,''),
            app = that.hash[str.replace(/[0-9\.\,\s]/g,'').toLowerCase()],
            user = that.get();
        return (app == user.browser && ((ver && ver.length > 0)? parseFloat(ver) == parseFloat(user.version) : true));
    },
    'isVersion' : function(){
        var that = this,
            user = that.get();
        return parseFloat(user.version);
    },
    'isMobile' : function(){
        var that = this,
            user = that.get();
        return user['os_type'] == 'mobile';
    }
};

/* Deprecated */

var is = function(str){
    cm.log('Warning. Method "is()" is deprecated. Please use "Com.UA.is()"');
    return Com.UA.is(str);
};

var isVersion = function(){
    cm.log('Warning. Method "isVersion()" is deprecated. Please use "Com.UA.isVersion()"');
    return Com.UA.isVersion();
};
cm.define('Com.Zoom', {
    'modules' : [
        'Params',
        'Events',
        'DataConfig',
        'Stack'
    ],
    'events' : [
        'onRender',
        'onOpenStart',
        'onOpen',
        'onClose',
        'onCloseStart'
    ],
    'params' : {
        'node' : cm.node('div'),
        'container' : 'document.body',
        'name' : '',
        'src' :'',
        'duration' : 'cm._config.animDuration',
        'autoOpen' : true,
        'removeOnClose' : true,
        'documentScroll' : false
    }
},
function(params){
    var that = this,
        imageRect,
        innerRect,
        widthRatio,
        heightRatio;

    that.isOpen = false;
    that.isLoad = false;
    that.nodes = {};

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataConfig(that.params['node']);
        render();
        that.addToStack(that.nodes['container']);
        that.triggerEvent('onRender');
        that.params['autoOpen'] && that.open();
    };

    var render = function(){
        // Structure
        that.nodes['container'] = cm.node('div', {'class' : 'com__zoom'},
            that.nodes['inner'] = cm.node('div', {'class' : 'inner'})
        );
        cm.addEvent(that.nodes['container'], 'click', that.close);
    };

    var renderImage = function(){
        that.nodes['image'] = cm.node('img');
        cm.addEvent(that.nodes['image'], 'load', function(){
            that.isLoad = true;
            // Get image properties
            calculateHelper();
            calculateAction();
        });
        that.nodes['image'].src = that.params['src'];
        // Append
        that.nodes['inner'].appendChild(that.nodes['image']);
    };

    var calculateHelper = function(){
        imageRect = cm.getRect(that.nodes['image']);
        innerRect = cm.getRect(that.nodes['inner']);
        widthRatio = (imageRect['width'] - innerRect['width']) / innerRect['width'];
        heightRatio = (imageRect['height'] - innerRect['height']) / innerRect['height'];
    };

    var calculateAction = function(){
        if(that.isLoad){
            var setX = -cm._clientPosition['left'] * widthRatio,
                setY = -cm._clientPosition['top'] * heightRatio;
            cm.setCSSTranslate(that.nodes['image'], [setX, 'px'].join(''), [setY, 'px'].join(''));
        }
    };

    var clickAction = function(e){
        e = cm.getEvent(e);
        if(e.keyCode == 27){
            // ESC key
            that.close();
        }
    };

    var resizeAction = function(){
        calculateHelper();
        calculateAction();
    };

    var moveAction = function(){
        calculateAction();
    };

    var appendEvents = function(){
        cm.addEvent(window, 'mousemove', moveAction);
        cm.addEvent(window, 'resize', resizeAction);
        cm.addEvent(window, 'keydown', clickAction);
    };

    var removeEvents = function(){
        cm.removeEvent(window, 'mousemove', moveAction);
        cm.removeEvent(window, 'resize', resizeAction);
        cm.removeEvent(window, 'keydown', clickAction);
    };

    /* ******* PUBLIC ******* */

    that.set = function(src){
        that.isLoad = false;
        that.params['src'] = src;
        return that;
    };

    that.open = function(){
        if(!that.isOpen){
            that.isOpen = true;
            appendEvents();
            // Show / Hide Document Scroll
            if(!that.params['documentScroll']){
                cm.addClass(cm.getDocumentHtml(), 'cm__scroll--none');
            }
            // Append
            that.nodes['container'].style.display = 'block';
            if(!cm.inDOM(that.nodes['container'])){
                that.params['container'].appendChild(that.nodes['container']);
            }
            renderImage();
            // Animate
            cm.transition(that.nodes['container'], {
                'properties' : {'opacity' : 1},
                'duration' : that.params['duration'],
                'easing' : 'ease-in-out',
                'onStop' : function(){
                    // Event
                    that.triggerEvent('onOpen');
                }
            });
            // Event
            that.triggerEvent('onOpenStart');
        }
        return that;
    };

    that.close = function(){
        if(that.isOpen){
            that.isOpen = false;
            removeEvents();
            // Show / Hide Document Scroll
            if(!that.params['documentScroll']){
                cm.removeClass(cm.getDocumentHtml(), 'cm__scroll--none');
            }
            // Animate
            cm.transition(that.nodes['container'], {
                'properties' : {'opacity' : 0},
                'duration' : that.params['duration'],
                'easing' : 'ease-in-out',
                'onStop' : function(){
                    // Remove Window
                    that.nodes['container'].style.display = 'none';
                    that.params['removeOnClose'] && cm.remove(that.nodes['container']);
                    cm.remove(that.nodes['image']);
                    // Event
                    that.triggerEvent('onClose');
                }
            });
            // Event
            that.triggerEvent('onCloseStart');
        }
        return that;
    };

    init();
});

cm.define('Com.MultipleInput', {
    'extend' : 'Com.AbstractController',
    'events' : [
        'onSet',
        'onSelect',
        'onChange',
        'onClear',
        'onDisable',
        'onEnable',
        'onItemAddStart',
        'onItemAddProcess',
        'onItemAddEnd',
        'onItemAdd',
        'onItemRemoveStart',
        'onItemRemoveProcess',
        'onItemRemoveEnd',
        'onItemRemove',
        'onItemSortStart',
        'onItemSortProcess',
        'onItemSortEnd'
    ],
    'params' : {
        'embedStructure' : 'replace',
        'className' : 'com__multiple-input',
        'value' : [],
        'defaultValue' : [],
        'max' : 0,
        'sortable' : false,
        'showControls' : true,
        'showToolbar' : false,
        'showList' : true,
        'focusInput' : false,
        'duration' : 'cm._config.animDurationShort',
        'inputConstructor' : 'Com.AbstractInput',
        'inputParams' : {},
        'multiFieldConstructor' : 'Com.MultiField',
        'multiFieldParams' : {
            'embedStructure' : 'first',
            'renderStructure' : true,
            'embedStructureOnRender' : true,
            'template' : false,
            'templateAttributeReplace' : false
        }
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractController.apply(that, arguments);
});

cm.getConstructor('Com.MultipleInput', function(classConstructor, className, classProto, classInherit){
    classProto.construct = function(params){
        var that = this;
        // Variables
        that.nodes = {};
        that.components = {};
        that.items = [];
        that.isToolbarVisible = true;
        // Bind context to methods
        that.setHandler = that.set.bind(that);
        that.getHandler = that.get.bind(that);
        that.clearHandler = that.clear.bind(that);
        that.enableHandler = that.enable.bind(that);
        that.disableHandler = that.disable.bind(that);
        that.addItemHandler = that.addItem.bind(that);
        that.removeItemHandler = that.removeItem.bind(that);
        that.constructProcessHandler = that.constructProcess.bind(that);
        // TODO: Add events
        that.addEvent('onConstructProcess', that.constructProcessHandler);
        // Call parent method
        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.constructProcess = function(){
        var that = this;
        // Render inputs provided in DOM
        cm.forEach(that.nodes['inputs'], function(item){
            that.addItem({'input' : item['input']}, {
                'triggerEvents' : false,
                'immediately' : true
            });
        });
        // Render inputs provided in parameters
        if(cm.isArray(that.params['value'])){
            cm.forEach(that.params['value'], function(item){
                that.addItem({'value' : item}, {
                    'triggerEvents' : false,
                    'immediately' : true
                });
            });
        }
    };

    classProto.validateParams = function(){
        var that = this;
        // Call parent method
        classInherit.prototype.validateParams.apply(that, arguments);
        // Configure MultiField
        that.params['multiFieldParams']['max'] = that.params['max'];
        that.params['multiFieldParams']['sortable'] = that.params['sortable'];
        that.params['multiFieldParams']['showControls'] = that.params['showControls'];
        that.params['multiFieldParams']['showList'] = that.params['showList'];
    };

    /* *** SYSTEM *** */

    classProto.renderView = function(){
        var that = this;
        that.triggerEvent('onRenderViewStart');
        that.nodes['container'] = cm.node('div', {'class' : 'com__multiple-input'},
            that.nodes['inner'] = cm.node('div', {'class' : 'inner'},
                that.nodes['holder'] = cm.node('div', {'class' : 'com__multiple-input__holder'})
            )
        );
        if(that.params['showToolbar']){
            that.nodes['toolbarContainer'] = that.renderToolbarView();
            cm.appendChild(that.nodes['toolbarContainer'], that.nodes['holder']);
        }
        that.triggerEvent('onRenderViewProcess');
        that.triggerEvent('onRenderViewEnd');
    };

    classProto.renderToolbarView = function(){
        var that = this,
            nodes = {};
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__multiple-input__toolbar'});
        // Push
        that.nodes['toolbar'] = nodes;
        return nodes['container'];
    };

    classProto.renderViewModel = function(){
        var that = this;
        // Call parent method - renderViewModel
        classInherit.prototype.renderViewModel.apply(that, arguments);
        // Init Multi Field
        that.renderMultiField();
    };

    classProto.renderMultiField = function(){
        var that = this;
        cm.getConstructor(that.params['multiFieldConstructor'], function(classConstructor){
            that.components['multiField'] = new classConstructor(
                cm.merge(that.params['multiFieldParams'], {
                    'container' : that.nodes['holder']
                })
            );
            that.renderMultiFieldEvents();
        });
        return that;
    };

    classProto.renderMultiFieldEvents = function(){
        var that = this;
        that.components['multiField'].addEvent('onItemAdd', function(my, field){
            that.addItemProcess({}, field, {
                'triggerEvents' : true
            });
        });
        that.components['multiField'].addEvent('onItemRemove', function(my, field){
            var index = field['index'];
            var item = that.items[index];
            that.removeItemProcess(item, field, {
                'triggerEvents' : true
            });
        });
        that.components['multiField'].addEvent('onItemSort', function(my, field){
            var previousIndex = field['previousIndex'];
            var item = that.items[previousIndex];
            that.sortItemProcess(item, field, {
                'triggerEvents' : true
            });
        });
        return that;
    };

    classProto.renderInputView = function(item){
        var that = this;
        item['input'] = cm.node('input', {'type' : 'text'});
        return item['input'];
    };

    /* *** ITEMS *** */

    classProto.addItem = function(item, params){
        var that = this;
        params = cm.merge({
            'triggerEvents' : true,
            'immediately' : false
        }, params);
        if(!that.params['max'] || that.items.length < that.params['max']){
            // Render Fields
            that.components['multiField'].addItem({}, {
                'triggerEvents' : false,
                'immediately' : params.immediately,
                'callback' : function(field){
                    that.addItemProcess(item, field, params);
                }
            });
        }
        return null;
    };

    classProto.addItemProcess = function(item, field, params){
        var that = this;
        params = cm.merge({
            'triggerEvents' : true,
            'immediately' : false
        }, params);
        // Merge config
        item = cm.merge({
            'input' : null,
            'container' : null,
            'name' : that.params['name'],
            'value' : '',
            'constructor' : that.params['inputConstructor'],
            'nodes' : {}
        }, item);
        item['field'] = field;
        item['container'] = item['field']['content'];
        // Push
        that.items.push(item);
        // Start
        that.triggerEvent('onItemAddStart', item);
        // Render views
        if(!item['input']){
            item['input'] = that.renderInputView(item);
        }
        cm.appendChild(item['input'], item['container']);
        // Process
        cm.getConstructor(item['constructor'], function(classConstructor){
            item['controller'] = new classConstructor(
                cm.merge(that.params['inputParams'], {
                    'node' : item['input'],
                    'name' : item['name'],
                    'value' : item['value']
                })
            );
            that.triggerEvent('onItemAddProcess', item);
            // Focus input after add
            that.params['focusInput'] && item['controller'].focus && item['controller'].focus();
            // Trigger set events
            if(params.triggerEvents){
                that.triggerEvent('onSelect');
                that.triggerEvent('onSet');
                that.triggerEvent('onChange');
            }
        });
        // Toggle toolbar visibility
        that.toggleToolbarVisibility();
        // Complete event
        that.triggerEvent('onItemAddEnd', item);
        that.triggerEvent('onItemAdd', item);
    };

    classProto.removeItem = function(item, params){
        var that = this;
        params = cm.merge({
            'triggerEvents' : true,
            'immediately' : false
        }, params);
        // Remove Field
        that.components['multiField'].removeItem(item['field'], {
            'triggerEvents' : false,
            'immediately' : params.immediately,
            'callback' : function(field){
                that.removeItemProcess(item, field, params);
            }
        });
        return that;
    };

    classProto.removeItemProcess = function(item, field, params){
        var that = this;
        params = cm.merge({
            'triggerEvents' : true,
            'immediately' : false
        }, params);
        that.triggerEvent('onItemRemoveStart', item);
        that.items = cm.arrayRemove(that.items, item);
        that.triggerEvent('onItemRemoveProcess', item);
        item['controller'] && item['controller'].destruct();
        that.triggerEvent('onItemRemoveEnd', item);
        that.triggerEvent('onItemRemove', item);
        // Toggle toolbar visibility
        that.toggleToolbarVisibility();
        // Trigger set events
        if(params.triggerEvents){
            that.triggerEvent('onSelect');
            that.triggerEvent('onSet');
            that.triggerEvent('onChange');
        }
    };

    classProto.sortItemProcess = function(item, field, params){
        var that = this,
            index = field['index'];
        params = cm.merge({
            'triggerEvents' : true,
            'immediately' : false
        }, params);
        that.triggerEvent('onItemSortStart', item);
        that.triggerEvent('onItemSortProcess', item);
        // Resort items in array
        that.items.splice(that.items.indexOf(item), 1);
        that.items.splice(index, 0, item);
        // Trigger event
        if(params.triggerEvents){
            that.triggerEvent('onItemSortEnd', item);
        }
    };

    /* *** TOOLBAR *** */

    classProto.toggleToolbarVisibility = function(){
        var that = this;
        if(that.params['showToolbar']){
            if(that.params['max'] > 0 && that.items.length === that.params['max']){
                that.hideToolbar();
            }else{
                that.showToolbar();
            }
        }
        return that;
    };

    classProto.showToolbar = function(){
        var that = this,
            height = 0;
        if(!that.isToolbarVisible){
            that.isToolbarVisible = true;
            // Prepare
            that.nodes['toolbarContainer'].style.height = '';
            height = that.nodes['toolbarContainer'].offsetHeight;
            that.nodes['toolbarContainer'].style.height = '0px';
            that.nodes['toolbarContainer'].style.overflow = 'hidden';
            // Animate
            cm.transition(that.nodes['toolbarContainer'], {
                'properties' : {'height' : height + 'px', 'opacity' : 1},
                'duration' : that.params['duration'],
                'easing' : 'ease-in-out',
                'clear' : true,
                'onStop' : function(){
                    that.nodes['toolbarContainer'].style.overflow = '';
                    that.nodes['toolbarContainer'].style.height = '';
                }
            });
        }
        return that;
    };

    classProto.hideToolbar = function(){
        var that = this;
        if(that.isToolbarVisible){
            that.isToolbarVisible = false;
            // Prepare
            that.nodes['toolbarContainer'].style.overflow = 'hidden';
            // Animate
            cm.transition(that.nodes['toolbarContainer'], {
                'properties' : {'height' : '0px', 'opacity' : 0},
                'duration' : that.params['duration'],
                'easing' : 'ease-in-out'
            });
        }
        return that;
    };

    /* *** PUBLIC *** */

    classProto.set = function(value, triggerEvents){
        var that = this;
        triggerEvents = cm.isUndefined(triggerEvents) ? true : triggerEvents;
        while(that.items.length){
            that.removeItem(that.items[0], {
                'triggerEvents' : false,
                'immediately' : true
            });
        }
        cm.forEach(value, function(item){
            that.addItem({'value' : item}, {
                'triggerEvents' : false,
                'immediately' : true
            });
        });
        // Trigger set events
        if(triggerEvents){
            that.triggerEvent('onSelect');
            that.triggerEvent('onSet');
            that.triggerEvent('onChange');
        }
        return that;
    };

    classProto.get = function(){
        var that = this,
            data = [],
            value;
        cm.forEach(that.items, function(item){
            value = (item['controller'] && item['controller'].get) ? item['controller'].get() : null;
            if(!cm.isEmpty(value)){
                data.push(value);
            }
        });
        return data;
    };

    classProto.clear = function(triggerEvents){
        var that = this;
        triggerEvents = cm.isUndefined(triggerEvents) ? true : triggerEvents;
        triggerEvents && that.triggerEvent('onClear');
        that.set(that.params['defaultValue'], triggerEvents);
        return that;
    };

    classProto.enable = function(){
        var that = this;
        if(!that.disabled){
            that.disabled = false;
            cm.removeClass(that.nodes['container'], 'disabled');
            cm.removeClass(that.nodes['content'], 'disabled');
            that.triggerEvent('onEnable');
        }
        return that;
    };

    classProto.disable = function(){
        var that = this;
        if(that.disabled){
            that.disabled = true;
            cm.addClass(that.nodes['container'], 'disabled');
            cm.addClass(that.nodes['content'], 'disabled');
            that.triggerEvent('onDisable');
        }
        return that;
    };
});

cm.define('Com.BoxTools', {
    'extend' : 'Com.AbstractInput',
    'params' : {
        'controllerEvents' : true,
        'className' : 'com__box-tools',
        'maxlength' : 5,
        'units' : 'px',
        'allowNegative' : false,
        'allowFloat' : false,
        'inputs' : [
            {'name' : 'top', 'icon' : 'icon svg__indent-top small linked', 'iconPosition' : 'insideRight'},
            {'name' : 'right', 'icon' : 'icon svg__indent-right small linked', 'iconPosition' : 'insideRight'},
            {'name' : 'bottom', 'icon' : 'icon svg__indent-bottom small linked', 'iconPosition' : 'insideRight'},
            {'name' : 'left', 'icon' : 'icon svg__indent-left small linked', 'iconPosition' : 'insideRight'}
        ]
    },
    'strings' : {
        'link' : 'Link',
        'unlink' : 'Unlink'
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractInput.apply(that, arguments);
});

cm.getConstructor('Com.BoxTools', function(classConstructor, className, classProto){
    var _inherit = classProto._inherit;

    classProto.onConstructStart = function(){
        var that = this;
        // Variables
        that.inputs = [];
        that.rawValue = null;
        that.isInputsLinked = false;
        that.lastInput = null;
        // Bind context to methods
        that.linkInputsHandler = that.linkInputs.bind(that);
        that.setValuesHandler = that.setValues.bind(that);
        return that;
    };

    classProto.onEnable = function(){
        var that = this;
        cm.forEach(that.inputs, function(item){
            cm.removeClass(item['nodes']['inner'], 'disabled');
            item['input'].disabled = false;
        });
    };

    classProto.onDisable = function(){
        var that = this;
        cm.forEach(that.inputs, function(item){
            cm.addClass(item['nodes']['inner'], 'disabled');
            item['input'].disabled = true;
        });
    };

    classProto.renderContent = function(){
        var that = this,
            nodes = {};
        that.nodes['content'] = nodes;
        that.triggerEvent('onRenderContentStart');
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__box-tools__content'},
            cm.node('div', {'class' : 'b-line'},
                that.renderInput(that.params['inputs'][0], 0)
            ),
            cm.node('div', {'class' : 'b-line'},
                that.renderInput(that.params['inputs'][3], 3),
                cm.node('div', {'class' : 'b-link-container'},
                    nodes['link'] = cm.node('div', {'class' : 'b-link', 'title' : that.lang('link')},
                        cm.node('div', {'class' : 'icon'})
                    )
                ),
                that.renderInput(that.params['inputs'][1], 1)
            ),
            cm.node('div', {'class' : 'b-line'},
                that.renderInput(that.params['inputs'][2], 2)
            )
        );
        // Events
        that.triggerEvent('onRenderContentProcess');
        cm.addEvent(nodes['link'], 'click', that.linkInputsHandler);
        that.triggerEvent('onRenderContentEnd');
        // Export
        return nodes['container'];
    };

    classProto.renderInput = function(item, i){
        var that = this,
            params = {
                'allowNegative' : that.params['allowNegative'],
                'allowFloat' : that.params['allowFloat']
            };
        // Validate
        item = cm.merge({
            'i' : i,
            'icon' : 'small',
            'iconPosition' : 'leftInside',
            'name' : '',
            'nodes' : {}
        }, item);
        // Structure
        item['nodes'] = that.renderInputContainer(item);
        item['input'] = item['nodes']['input'];
        // Attributes
        if(that.params['maxlength']){
            item['input'].setAttribute('maxlength', that.params['maxlength']);
        }
        // Events
        cm.addEvent(item['nodes']['icon'], 'click', function(e){
            cm.preventDefault(e);
            item['input'].setSelectionRange(0, item['input'].value.length);
            item['input'].focus();
        });
        cm.addEvent(item['input'], 'focus', function(){
            that.lastInput = item;
        });
        cm.addEvent(item['input'], 'blur', that.setValuesHandler);
        // Keypress events
        cm.addEvent(item['input'], 'keypress', function(e){
            if(cm.isKeyCode(e.keyCode, 'enter')){
                cm.preventDefault(e);
                that.setValues();
                item['input'].blur();
            }
        });
        // Input events
        cm.allowOnlyNumbersInputEvent(item['input'], function(e, value){
            that.inputOnInputEvent(e, value, item);
        }, params);
        // Push
        that.inputs.push(item);
        return item['nodes']['container'];
    };

    classProto.inputOnInputEvent = function(e, value, item){
        var that = this;
        if(that.isInputsLinked){
            that.tempRawValue = [value, value, value, value];
            that.setInputs();
        }else{
            that.tempRawValue[item['i']] = value;
        }
        that.selectAction(cm.arrayToCSSValues(that.tempRawValue, that.params['units']), true);
        return that;
    };

    classProto.renderInputContainer = function(item){
        var that = this,
            nodes = {};
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'b-container'},
            nodes['inner'] = cm.node('div', {'class' : 'pt__input'},
                nodes['input'] = cm.node('input', {'type' : 'text'})
            )
        );
        if(!cm.isEmpty(item['title'])){
            nodes['inner'].setAttribute('title', item['title']);
        }
        nodes['icon'] = cm.node('div', {'class' : item['icon']});
        switch(item['iconPosition']){
            case 'insideLeft':
                cm.addClass(nodes['inner'], 'is-less-indent');
                cm.insertFirst(nodes['icon'], nodes['inner']);
                break;
            case 'insideRight':
                cm.addClass(nodes['inner'], 'is-less-indent');
                cm.insertLast(nodes['icon'], nodes['inner']);
                break;
            case 'outsideLeft':
                cm.addClass(nodes['inner'], 'is-icon-outside');
                cm.insertFirst(nodes['icon'], nodes['inner']);
                break;
            case 'outsideRight':
                cm.addClass(nodes['inner'], 'is-icon-outside');
                cm.insertLast(nodes['icon'], nodes['inner']);
                break;
        }
        return nodes;
    };

    classProto.setInputs = function(){
        var that = this;
        cm.forEach(that.inputs, function(item){
            item['input'].value = that.tempRawValue[item['i']];
        });
        return that;
    };

    classProto.setValues = function(triggerEvents){
        var that = this;
        triggerEvents = cm.isUndefined(triggerEvents) ? true : triggerEvents;
        that.set(cm.arrayToCSSValues(that.tempRawValue, that.params['units']), triggerEvents);
        return that;
    };

    classProto.linkInputs = function(){
        var that = this;
        if(!that.disabled){
            if(!that.isInputsLinked){
                that.isInputsLinked = true;
                cm.addClass(that.nodes['content']['link'], 'active');
                that.nodes['content']['link'].title = that.lang('unlink');
                if(that.lastInput){
                    that.set(that.lastInput['input'].value);
                }else{
                    var value = 0;
                    cm.forEach(that.inputs, function(item){
                        value = Math.max(value, parseInt(item['input'].value));
                    });
                    that.set(value);
                }
            }else{
                that.isInputsLinked = false;
                cm.removeClass(that.nodes['content']['link'], 'active');
                that.nodes['content']['link'].title = that.lang('link');
            }
        }
        return that;
    };

    /*** DATA ***/

    classProto.setData = function(){
        var that = this;
        that.setInputs();
        return that;
    };

    classProto.validateValue = function(value){
        var that = this;
        return cm.arrayToCSSValues(cm.CSSValuesToArray(value), that.params['units']);
    };

    classProto.saveRawValue = function(value){
        var that = this;
        that.tempRawValue = cm.CSSValuesToArray(value);
    };
});
cm.define('Com.Autocomplete', {
    extend: 'Com.AbstractController',
    require: [
        'Com.Tooltip'
    ],
    events: [
        'onFocus',
        'onBlur',
        'onClear',
        'onReset',
        'onSelect',
        'onChange',
        'onEnable',
        'onDisable',
        'onClickSelect',
        'onEnterPress',
        'onAbort',
        'onError',
        'onRenderListStart',
        'onRenderListEnd',
    ],
    params: {
        controllerEvents: true,
        renderStructure: false,
        embedStructureOnRender: false,
        embedStructure: 'append',

        input: null,                                             // Deprecated, use 'node' parameter instead.
        node: cm.node('input', {type: 'text'}),                  // Html input node to decorate.
        target: false,                                           // HTML node.
        container: 'document.body',                              // 'document.body', 'targetParent'
        name: '',
        minLength: 3,
        direction: 'auto',                                       // auto | start
        disabled: false,
        delay: 'cm._config.requestDelay',
        clearOnEmpty: true,                                      // Clear input and value if item didn't selected from tooltip
        showListOnEmpty: false,                                  // Show options list, when input is empty
        listItemNowrap: false,

        className: '',
        classes: {
            list: 'pt__list',
            listItem: 'pt__list__item'
        },
        icons: {
            search: 'icon default linked'
        },

        data: [],                                                // Examples: [{value: 'foo', text: 'Bar'}] or ['Foo', 'Bar'].
        options: [],
        value: {},
        defaultValue: '',

        showLoader: true,                                        // Show ajax spinner in tooltip, for ajax mode only.
        responseKey: 'data',                                     // Instead of using filter callback, you can provide response array key
        preloadData: false,                                      // ToDo: Rename to cache data?
        preselectQuery: false,
        ajax: {
            type: 'json',
            method: 'get',
            url: '',                                             // Request URL. Variables: %baseUrl%, %query%, %callback%.
            params: ''                                           // Params object. Variables: %baseUrl%, %query%, %callback%.
        },

        tooltip: {
            limitWidth: true,
            constructor: 'Com.Tooltip',
            constructorParams: {
                hideOnOut: true,
                targetEvent: 'none',
                width: 'targetWidth',
                minWidth: 'targetWidth',
                top: cm._config.tooltipDown
            },
        },
        
        suggestion: {
            enable: false,                                       // Show suggestion option when search query was empty
            queryKey: 'text',
            constructor: 'Com.AbstractContainer',
            constructorParams: {},
        },
    },
    strings: {
        loader: 'Searching for <b>%query%</b>…',
        suggestion: '<b>%query%</b> not found. Add?'
    },
},
function() {
    Com.AbstractController.apply(this, arguments);
});

cm.getConstructor('Com.Autocomplete', function(classConstructor, className, classProto, classInherit) {
    classProto.onConstructStart = function() {
        var that = this;

        // Variables
        that.disabled = false;
        that.ajaxHandler = null;
        that.isOpen = false;
        that.isAjax = false;
        that.requestData = {};
        that.requestDelay = null;
        that.clickTarget = null;

        that.registeredItems = [];
        that.suggestionItem = null;
        that.suggestionItemFocus = false;
        that.selectedItemIndex = null;
        that.value = null;
        that.previousValue = null;
        that.valueText = null;
        that.rawValue = null;

        // Binds
        that.requestHandler = that.request.bind(that);
        that.setInputActionHandler = that.setInputAction.bind(that);

        that.afterFocusHandler = that.afterFocus.bind(that);
        that.afterBlurHandler = that.afterBlur.bind(that);
        that.afterKeypressHandler = that.afterKeypress.bind(that);
        that.afterBodyClickHandler = that.afterBodyClick.bind(that);
    };

    classProto.onValidateParams = function() {
        var that = this;

        if (cm.isNode(that.params.input)) {
            that.params.node = that.params.input;
        }

        if (!that.params.target) {
            that.params.target = that.params.node;
        }

        // If URL parameter exists, use ajax data
        that.isAjax = !cm.isEmpty(that.params.ajax.url);

        // Prepare data
        that.params.data = cm.merge(that.params.data, that.params.options);
        that.setData(that.params.data);

        // Value
        that.params.value = !cm.isEmpty(that.params.value) ? that.params.value : that.params.defaultValue;

        // Input
        that.params.disabled = that.params.node.disabled || that.params.node.readOnly || that.params.disabled;

        // Tooltip
        // ToDo: Deprecated legacy parameter
        if (cm.isObject(that.params['Com.Tooltip'])) {
            that.params.tooltip.constructorParams = cm.merge(that.params.tooltip.constructorParams, that.params['Com.Tooltip']);
        }
        if (!that.params.tooltip.limitWidth) {
            that.params.tooltip.constructorParams.width = 'auto';
        }
        that.params.tooltip.constructorParams.className = [
            'com__ac-tooltip',
            [that.params.className, 'tooltip'].join('__')
        ].join(' ');
    };

    classProto.onAfterRender = function() {
        var that = this;

        // Set target input
        that.setInput(that.params.node);

        // Set value
        !cm.isEmpty(that.params.value) && that.set(that.params.value, false);

        // Set disabled state
        that.params.disabled && that.disable();
    };

    classProto.onDestructStart = function() {
        var that = this;
        that.callbacks.destructListSuggestion(that, that.suggestionItem);
        that.unsetInputEvents();
    };

    classProto.renderViewModel = function() {
        var that = this;

        // Call parent method
        classInherit.prototype.renderViewModel.apply(that, arguments);

        // Init tooltip
        cm.getConstructor(that.params.tooltip.constructor, function(classConstructor) {
            that.components.tooltip = new classConstructor(
                cm.merge(that.params.tooltip.constructorParams, {
                    container: that.params.container,
                    target: that.params.target,
                    events: {
                        onShowStart: that.afterShow.bind(that),
                        onHideStart: that.afterHide.bind(that),
                    }
                })
            );
        });
    };

    /******* INPUT *******/

    classProto.setInputEvents = function() {
        var that = this;
        cm.addEvent(that.params.node, 'input', that.requestHandler);
        cm.addEvent(that.params.node, 'keydown', that.afterKeypressHandler);
        cm.addEvent(that.params.node, 'focus', that.afterFocusHandler);
        cm.addEvent(that.params.node, 'blur', that.afterBlurHandler);
    };

    classProto.unsetInputEvents = function() {
        var that = this;
        cm.removeEvent(that.params.node, 'input', that.requestHandler);
        cm.removeEvent(that.params.node, 'keydown', that.afterKeypressHandler);
        cm.removeEvent(that.params.node, 'focus', that.afterFocusHandler);
        cm.removeEvent(that.params.node, 'blur', that.afterBlurHandler);
    };

    classProto.getInputValue = function() {
        var that = this;
        return that.params.node.value.trim();
    };

    classProto.setInputAction = function() {
        var that = this;
        that.abort();

        // Set value form input
        var text = that.getInputValue();
        var item = that.getItemAction(null, text);

        if (item) {
            // If registered item exists, set their value
            if (that.value !== item.value) {
                that.set(item, true);
            }
        } else {
            // Reset input if value is empty
            if (that.params.clearOnEmpty || cm.isEmpty(text)) {
                that.clear();
            } else if (that.params.preselectQuery && that.isAjax) {
                that.requestAction({
                    behavior: 'preselect',
                    showLoader: false,
                });
            } else {
                that.set(text, true);
            }
        }
    };

    /******* LIST *******/

    classProto.setListAction = function(index) {
        var that = this;

        if (that.params.suggestion.enable) {
            that.callbacks.suggestionItemUnselect(that,  that.suggestionItem);
        }

        var previousItem = that.registeredItems[that.selectedItemIndex];
        if (previousItem) {
            cm.removeClass(previousItem.container, 'active');
        }

        var item = that.registeredItems[index];
        if (item) {
            that.selectedItemIndex = index;
            cm.addClass(item.container, 'active');
            that.components.tooltip.scrollToNode(item.container);
            that.setRegisteredItem(item);
        }
    };

    classProto.getItemAction = function(value, text) {
        var that = this;
        var item = null;

        // Get from stored items
        if (
            that.rawValue && (
                (!cm.isUndefined(value) && value === that.rawValue.value) ||
                (!cm.isEmpty(text) && text === that.rawValue.text)
            )
        ) {
            item = that.rawValue;
        }

        // Get from items list
        if (!item) {
            item = that.getRequestItem(value, text);
        }

            // Get from params data list
        if (!item) {
            item = that.getItem(value, text);
        }

        return item;
    };

    /******* EVENTS *******/

    classProto.afterFocus = function() {
        var that = this;
        if (that.params.showListOnEmpty) {
            that.request();
        }
        that.triggerEvent('onFocus', that.value);
    };

    classProto.afterBlur = function() {
        var that = this;
        if (!that.isOwnNode(that.clickTarget)) {
            that.hide();
            that.setInputAction();
        }
        that.clickTarget = null;
        that.triggerEvent('onBlur', that.value);
    };

    classProto.afterShow = function() {
        var that = this;
        that.isOpen = true;
        cm.addEvent(document, 'mousedown', that.afterBodyClickHandler);
    };

    classProto.afterHide = function() {
        var that = this;
        that.isOpen = false;
        cm.removeEvent(document, 'mousedown', that.afterBodyClickHandler);
    };

    classProto.afterKeypress = function(e) {
        var that = this;
        var listLength = that.registeredItems.length;
        var listIndex;
        switch (e.keyCode) {
            // Enter
            case 13:
                cm.preventDefault(e);
                if (that.suggestionItemFocus) {
                    that.callbacks.listSuggestionItemEvent(that,  that.suggestionItem);
                } else {
                    that.hide();
                    that.setInputAction();
                }
                that.triggerEvent('onEnterPress');
                break;

            // Arrow Up
            case 38:
                cm.preventDefault(e);
                if (listLength) {
                    if (that.selectedItemIndex === null) {
                        listIndex = listLength - 1;
                    } else if (that.selectedItemIndex - 1 >= 0) {
                        listIndex = that.selectedItemIndex - 1;
                    } else {
                        listIndex = listLength - 1;
                    }
                    that.setListAction(listIndex);
                } else if (that.params.suggestion.enable) {
                    that.callbacks.suggestionItemSelect(that,  that.suggestionItem);
                }
                break;

            // Arrow Down
            case 40:
                cm.preventDefault(e);
                if (listLength) {
                    if (that.selectedItemIndex === null) {
                        listIndex = 0;
                    } else if (that.selectedItemIndex + 1 < listLength) {
                        listIndex = that.selectedItemIndex + 1;
                    } else {
                        listIndex = 0;
                    }
                    that.setListAction(listIndex);
                } else if (that.params.suggestion.enable) {
                    that.callbacks.suggestionItemSelect(that,  that.suggestionItem);
                }
                break;
        }
    };

    classProto.afterChange = function() {
        var that = this;
        if (that.value !== that.previousValue) {
            that.triggerEvent('onChange', that.value);
        }
    };

    classProto.afterBodyClick = function(e) {
        var that = this;
        that.clickTarget = cm.getEventTarget(e);
        if (!that.isOwnNode(that.clickTarget)) {
            that.hide();
            that.setInputAction();
        }
    };

    /******* REQUEST *******/

    classProto.request = function() {
        var that = this;
        var query = that.getInputValue();

        // Clear tooltip ajax/static delay and filtered items list
        that.valueText = query;
        that.selectedItemIndex = null;
        that.registeredItems = [];
        that.abort();

        // Request
        if (that.params.showListOnEmpty || query.length >= that.params.minLength) {
            var delay = that.params.showListOnEmpty && cm.isEmpty(query) ? 0 : that.params.delay;
            that.requestDelay = setTimeout(function() {
                if (that.params.preloadData && !cm.isEmpty(that.requestData.data)) {
                    that.callbacks.data(that, {
                        data: that.requestData.data,
                        query: query
                    });
                } else if (that.isAjax) {
                    that.requestAction();
                } else {
                    that.callbacks.data(that, {
                        data: that.params.data,
                        query: query
                    });
                }
            }, delay);
        } else {
            that.hide();
        }
    };

    classProto.requestAction = function(params) {
        var that = this;

        // Validate params
        params = cm.merge({
            query: that.getInputValue(),
            config: cm.clone(that.params.ajax),
            behavior: 'query',
            showLoader: that.params.showLoader,
        }, params);

        if (params.showLoader) {
            that.callbacks.renderLoader(that, params);
            that.show();
        }
        that.ajaxHandler = that.callbacks.request(that, params);
    };

    /******* CALLBACKS *******/

    /*** AJAX ***/

    classProto.callbacks.prepare = function(that, params) {
        params.config = that.callbacks.beforePrepare(that, params);
        params.config.url = cm.strReplace(params.config.url, {
            '%query%': params.query,
            '%baseUrl%': cm._baseUrl
        });
        params.config.params = cm.objectReplace(params.config.params, {
            '%query%': params.query,
            '%baseUrl%': cm._baseUrl
        });
        params.config = that.callbacks.afterPrepare(that, params);
        return params.config;
    };

    classProto.callbacks.beforePrepare = function(that, params) {
        return params.config;
    };

    classProto.callbacks.afterPrepare = function(that, params) {
        return params.config;
    };

    classProto.callbacks.request = function(that, params) {
        params = cm.merge({
            response: null,
            data: null,
            config: null,
            query: '',
            behavior: 'query',
        }, params);

        // Validate config
        params.config = that.callbacks.prepare(that, params);

        // Export
        that.requestData = params;

        // Return ajax handler (XMLHttpRequest) to providing abort method.
        return cm.ajax(
            cm.merge(params.config, {
                onSuccess: function(response) {
                    params.response = response;
                    that.callbacks.response(that, params);
                },
                onError: function() {
                    that.callbacks.error(that, params);
                },
            })
        );
    };

    classProto.callbacks.filter = function(that, params) {
        var data = [];
        var dataItem = cm.reducePath(that.params.responseKey, params.response);
        if (!cm.isEmpty(dataItem)) {
            data = dataItem;
        }
        return data;
    };

    classProto.callbacks.response = function(that, params) {
        if (!cm.isEmpty(params.response)) {
            params.data = that.callbacks.filter(that, params);
        }
        if (!cm.isEmpty(params.data)) {
            params.data = that.callbacks.convert(that, params.data);
        }
        if (params.behavior === 'preselect') {
            that.callbacks.preselect(that, params);
        } else {
            that.callbacks.render(that, params);
        }
    };

    classProto.callbacks.error = function(that, params) {
        that.hide();
        that.triggerEvent('onError');
    };

    /*** DATA ***/

    classProto.callbacks.data = function(that, params) {
        // Filter data
        params.data = that.callbacks.query(that, params);
        that.callbacks.render(that, params);
    };

    classProto.callbacks.convert = function(that, data) {
        if (cm.isObject(data)) {
            return that.callbacks.convertObject(that, data);
        } else {
            return data.map(function(item) {
                return that.callbacks.convertItem(that, item);
            });
        }
    };

    classProto.callbacks.convertItem = function(that, item) {
        if (cm.isEmpty(item)) {
            return null;
        } else if (!cm.isObject(item)) {
            return {text: item, value: item};
        } else {
            if (cm.isUndefined(item.value)) {
                item.value = item.text
            }
            return item;
        }
    };

    classProto.callbacks.convertObject = function(that, data) {
        var a = [];
        cm.forEach(data, function(text, value) {
            a.push({text: text, value: value});
        });
        return a;
    };

    /*** LIST ***/

    classProto.callbacks.renderList = function(that, params) {
        that.triggerEvent('onRenderListStart');
        // Render structure
        var nodes = that.callbacks.renderListStructure(that, params);
        // Render list's items
        cm.forEach(params.data, function(item, i) {
            that.callbacks.renderItem(that, params, {data: item, i: i}, nodes.items);
        });
        // Append nodes to tooltip
        that.callbacks.embed(that, nodes.container);
        that.triggerEvent('onRenderListEnd');
    };

    classProto.callbacks.renderListStructure = function(that, params) {
        var nodes = {};
        nodes.container = cm.node('div', {classes: that.params.classes.list},
            nodes.items = cm.node('ul')
        );
        return nodes;
    };

    classProto.callbacks.renderItem = function(that, params, item, container) {
        // Render structure of list's item
        item.nodes = that.callbacks.renderItemStructure(that, params, item);
        that.params.listItemNowrap && cm.addClass(item.nodes.container, 'is-nowrap');
        
        // Highlight selected option
        if (that.value === item.data.value) {
            cm.addClass(item.nodes.container, 'active');
            that.selectedItemIndex = item.i;
        }
        
        // Register item
        that.callbacks.registerItem(that, params, item);
        
        // Append item to list
        cm.appendChild(item.nodes.container, container);
    };

    classProto.callbacks.renderItemStructure = function(that, params, item) {
        var nodes = {};
        nodes.container = cm.node('li', {classes: that.params.classes.listItem},
            cm.node('div', {classes: 'inner'},
                cm.node('div', {classes: 'content', innerHTML: item.data.text})
            )
        );
        return nodes;
    };

    /*** LIST LOADER ***/

    classProto.callbacks.renderLoader = function(that, params) {
        // Structure
        var nodes = that.callbacks.renderListStructure(that, params);
        cm.addClass(nodes.container, 'disabled');

        // Render item structure
        nodes.item = that.callbacks.renderLoaderItemStructure(that, params);
        that.params.listItemNowrap && cm.addClass(nodes.item.container, 'is-nowrap');
        cm.appendChild(nodes.item.container, nodes.items);

        // Append nodes to tooltip
        that.callbacks.embed(that, nodes.container);
    };

    classProto.callbacks.renderLoaderItemStructure = function(that, params) {
        // Structure
        var nodes = {};
        nodes.container = cm.node('li', {classes: that.params.classes.listItem},
            cm.node('div', {classes: 'inner'},
                cm.node('div', {classes: 'content'},
                    cm.node('span', {classes: 'icon small cm-ia__spinner'}),
                    cm.node('span', {innerHTML: that.lang('loader', {'%query%': params.query})})
                )
            )
        );

        // Export
        return nodes;
    };

    /*** LIST SUGGESTION ***/

    classProto.callbacks.renderListSuggestion = function(that, params) {
        // Structure
        var nodes = that.callbacks.renderListStructure(that, params);

        // Render item structure
        nodes.item = that.callbacks.renderListSuggestionItem(that, params, {}, nodes.items);

        // Append nodes to tooltip
        that.callbacks.embed(that, nodes.container);
    };

    classProto.callbacks.destructListSuggestion = function(that, item) {
        item && cm.isFunction(item.controller.destruct) && item.controller.destruct();
    };

    classProto.callbacks.renderListSuggestionItem = function(that, params, item, container) {
        // Params
        item.params = params;

        // Structure
        item.nodes = that.callbacks.renderListSuggestionItemStructure(that, item);
        that.params.listItemNowrap && cm.addClass(item.nodes.container, 'is-nowrap');

        // Callbacks
        if (that.params.suggestion.constructor) {
            that.callbacks.renderListSuggestionItemConstructor(that, item);
        }

        // Append
        cm.appendChild(item.nodes.container, container);

        // Export
        that.suggestionItem = item;
        that.suggestionItemFocus = false;
        return item;
    };

    classProto.callbacks.renderListSuggestionItemConstructor = function(that, item) {
        // If controller was not cached, render new one
        var isCachedController = that.suggestionItem && that.suggestionItem.controller && !that.suggestionItem.controller.isDestructed;
        if (!isCachedController) {
            that.callbacks.renderListSuggestionItemController(that, item);
        } else {
            that.callbacks.renderListSuggestionItemControllerCached(that, item);
        }

        // Set query data on link click and hide tooltip
        cm.click.add(item.nodes.container, function() {
            that.callbacks.listSuggestionItemEvent(that, item);
        });
    };

    classProto.callbacks.renderListSuggestionItemStructure = function(that, item) {
        // Structure
        var nodes = {};
        nodes.container = cm.node('li', {classes: that.params.classes.listItem},
            cm.node('div', {classes: 'inner'},
                cm.node('div', {classes: 'content'},
                    cm.node('span', {classes: 'icon small add'}),
                    cm.node('span', {innerHTML: that.lang('suggestion', {'%query%': item.params.query})})
                )
            )
        );

        // Export
        return nodes;
    };

    classProto.callbacks.renderListSuggestionItemController = function(that, item) {
        // Render controller
        cm.getConstructor(that.params.suggestion.constructor, function(classConstructor) {
            item.controller = new classConstructor(
                cm.merge(that.params.suggestion.constructorParams, {
                    events: {
                        onSuccess: function(controller, data) {
                            that.set(data, true);
                        },
                    },
                })
            );
        });
    };

    classProto.callbacks.renderListSuggestionItemControllerCached = function(that, item) {
        item.controller = that.suggestionItem.controller;
    };

    classProto.callbacks.listSuggestionItemEvent = function(that, item) {
        var data = {};
        data[that.params.suggestion.queryKey] = item.params.query;

        // Set Query Data
        item.controller.set(data);
        item.controller.open();

        // Hide tooltip on item click
        that.hide();
        that.clear();
    };

    classProto.callbacks.suggestionItemSelect = function(that, item) {
        if (!item) {
            return;
        }
        that.suggestionItemFocus = true;
        cm.addClass(item.nodes.container, 'active');
    };

    classProto.callbacks.suggestionItemUnselect = function(that, item) {
        if (!item) {
            return;
        }
        that.suggestionItemFocus = false;
        cm.removeClass(item.nodes.container, 'active');
    };

    /*** HELPERS ***/

    classProto.callbacks.query = function(that, params) {
        var filteredItems = [];
        cm.forEach(params.data, function(item) {
            if (that.callbacks.isContain(that, item.text, params.query)) {
                filteredItems.push(item);
            }
        });
        return filteredItems;
    };

    classProto.callbacks.preselect = function(that, params) {
        var item;
        cm.forEach(params.data, function(data, i) {
            if (data.text !== params.query) {
                return;
            }
            item = {
                data: data,
                i: i,
            };
        });

        if (item) {
            that.callbacks.registerItem(that, params, item);
            that.set(item.data, true);
        } else {
            if (that.params.clearOnEmpty) {
                that.clear();
            } else {
                that.set(params.query, true);
            }
        }
    };

    classProto.callbacks.isContain = function(that, text, query) {
        text = text.trim().toLowerCase();
        query = query.trim().toLowerCase();
        // Direction
        switch (that.params.direction) {
            case 'start':
                return new RegExp('^' + query, 'i').test(text);
            default:
                return text.indexOf(query) > -1;
        }
    };

    classProto.callbacks.render = function(that, params) {
        if (!cm.isEmpty(params.data)) {
            that.callbacks.renderList(that, params);
            that.show();
        } else if (that.params.suggestion.enable) {
            that.callbacks.renderListSuggestion(that, params);
            that.show();
        } else {
            that.hide();
        }
    };

    classProto.callbacks.registerItem = function(that, params, item) {
        if (item.nodes) {
            item.container = item.nodes.container;
            cm.click.add(item.container, function() {
                that.setRegisteredItem(item);
                that.hide();
                that.triggerEvent('onClickSelect', that.value);
            });
        }
        that.registeredItems.push(item);
    };

    classProto.callbacks.embed = function(that, container) {
        that.components.tooltip.setContent(container);
    };

    /******* PUBLIC *******/

    classProto.set = function(item, triggerEvents) {
        var that = this;

        that.rawValue = that.callbacks.convertItem(that, item);
        that.previousValue = that.value;
        that.value = !cm.isEmpty(that.rawValue) ? that.rawValue.value : null;
        that.valueText = !cm.isEmpty(that.rawValue) ? that.rawValue.text : '';
        that.params.node.value = that.valueText;

        // Trigger events
        triggerEvents = typeof triggerEvents === 'undefined' ? true : triggerEvents;
        if (triggerEvents) {
            that.triggerEvent('onSelect', that.value);
            that.afterChange();
        }
        return that;
    };

    classProto.setData = function(data) {
        var that = this;
        that.params.data = that.callbacks.convert(that, data);
        return that;
    };

    classProto.setInput = function(node) {
        var that = this;
        if (cm.isNode(node)) {
            that.unsetInputEvents();
            that.params.node = node;
            that.setInputEvents();

            // Set tooltip container
            var tooltipContainer = that.params.container;
            if (tooltipContainer === 'targetParent') {
                tooltipContainer = that.params.node.parentNode;
            }
            that.components.tooltip.setContainer(tooltipContainer);
        }
        return that;
    };

    classProto.setTarget = function(node) {
        var that = this;
        if (cm.isNode(node)) {
            that.params.target = node;
            that.components.tooltip.setTarget(node);
        }
        return that;
    };

    classProto.setRegisteredItem = function(item, triggerEvents) {
        var that = this;
        if (cm.inArray(that.registeredItems, item)) {
            that.set(item.data, triggerEvents);
        }
        return that;
    };

    classProto.get = function() {
        var that = this;
        return that.value;
    };

    classProto.getText = function() {
        var that = this;
        return that.valueText;
    };

    classProto.getRaw = function() {
        var that = this;
        return that.rawValue;
    };

    classProto.getItem = function(value, text) {
        var that = this;
        if (cm.isEmpty(that.params.data)) {
            return;
        }
        return that.params.data.find(function(item) {
            if (!cm.isUndefined(value)) {
                return item.value === value;
            }
            if (!cm.isEmpty(text)) {
                return item.text === text;
            }
        });
    };

    classProto.getRequestItem = function(value, text) {
        var that = this;
        if (cm.isEmpty(that.requestData.data)) {
            return;
        }
        return that.requestData.data.find(function(item) {
            if (!cm.isUndefined(value)) {
                return item.value === value;
            }
            if (!cm.isEmpty(text)) {
                return item.text === text;
            }
        });
    };

    classProto.getRegisteredItem = function(value, text) {
        var that = this;
        if (cm.isEmpty(that.registeredItems)) {
            return;
        }
        return that.registeredItems.find(function(item) {
            if (!cm.isUndefined(value)) {
                return item.data.value === value;
            }
            if (!cm.isEmpty(text)) {
                return item.data.text === text;
            }
        });
    };

    classProto.reset = classProto.clear = function(triggerEvents) {
        var that = this;
        triggerEvents = typeof triggerEvents === 'undefined' ? true : triggerEvents;
        that.previousValue = that.value;
        that.value = null;
        that.rawValue = null;
        that.valueText = null;
        that.params.node.value = '';

        // Trigger events
        if (triggerEvents) {
            that.triggerEvent('onClear', that.value);
            that.triggerEvent('onReset', that.value);
            that.afterChange();
        }
        return that;
    };

    classProto.show = function() {
        var that = this;
        that.components.tooltip.show();
        return that;
    };

    classProto.hide = function() {
        var that = this;
        that.components.tooltip.hide();
        return that;
    };

    classProto.setAction = function(o, mode, update) {
        var that = this;
        mode = cm.inArray(['raw', 'update', 'current'], mode) ? mode : 'current';
        switch (mode) {
            case 'raw':
                that.params.ajax = cm.merge(that._raw.params.ajax, o);
                break;
            case 'current':
                that.params.ajax = cm.merge(that.params.ajax, o);
                break;
            case 'update':
                that.params.ajax = cm.merge(that._update.params.ajax, o);
                break;
        }
        if (update) {
            that._update.params.ajax = cm.clone(that.params.ajax);
        }
        return that;
    };

    classProto.setVariables = function(o, mode, update) {
        var that = this;
        mode = cm.inArray(['raw', 'update', 'current'], mode) ? mode : 'current';
        switch (mode) {
            case 'raw':
                that.params.ajax.variables = cm.merge(that._raw.params.ajax.variables, o);
                break;
            case 'current':
                that.params.ajax.variables = cm.merge(that.params.ajax.variables, o);
                break;
            case 'update':
                that.params.ajax.variables = cm.merge(that._update.params.ajax.variables, o);
                break;
        }
        if (update) {
            that._update.params.ajax.variables = cm.clone(that.params.ajax.variables);
        }
        return that;
    };

    classProto.abort = function() {
        var that = this;
        that.requestDelay && clearTimeout(that.requestDelay);
        if (that.ajaxHandler && that.ajaxHandler.abort) {
            that.ajaxHandler.abort();
        }
        return that;
    };

    classProto.focus = function(selection) {
        var that = this;
        if (selection === true) {
            var value = that.params.node.value;
            that.params.node.setSelectionRange(0, value.length);
        }
        that.params.node.focus();
        return that;
    };

    classProto.blur = function() {
        var that = this;
        that.params.node.blur();
        return that;
    };

    classProto.enable = function() {
        var that = this;
        if (that.disabled) {
            that.disabled = false;
            that.params.node.disabled = false;
            that.triggerEvent('onEnable');
        }
        return that;
    };

    classProto.disable = function() {
        var that = this;
        if (!that.disabled) {
            that.disabled = true;
            that.params.node.disabled = true;
            that.triggerEvent('onDisable');
        }
        return that;
    };

    classProto.isOwnNode = function(node) {
        var that = this;
        return cm.isParent(that.params.target, node, true) || that.components.tooltip.isOwnNode(node);
    };
});

/* ****** FORM FIELD COMPONENT ******* */

Com.FormFields.add('autocomplete', {
    node: cm.node('input', {type: 'search', autocomplete: 'none'}),
    fieldConstructor: 'Com.AbstractFormField',
    constructor: 'Com.Autocomplete'
});

cm.define('Com.AutocompleteField', {
    'extend' : 'Com.AbstractInput',
    'events': [
        'onFocus',
        'onBlur',
    ],
    'params' : {
        'controllerEvents' : true,
        'type': 'text',
        'autocomplete': {
            'constructor' : 'Com.Autocomplete',
            'constructorParams' : {
                'minLength' : 1,
                'direction' : 'start'
            }
        }
    }
},
function(){
    Com.AbstractInput.apply(this, arguments);
});

cm.getConstructor('Com.AutocompleteField', function(classConstructor, className, classProto, classInherit){
    classProto.construct = function(){
        var that = this;
        that.options = [];

        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.validateParams = function(){
        var that = this;
        classInherit.prototype.validateParams.apply(that, arguments);

        // Collect Options
        var options = that.params['node'].options;
        cm.forEach(options, function(node){
            that.options.push({
                'value': node.value,
                'text': node.innerHTML
            });
        });
    };

    classProto.validateParamsValue = function(){
        var that = this,
            value;
        if(cm.isNode(that.params['node'])){
            value = cm.getSelectValue(that.params['node']);
            that.params['value'] = !cm.isEmpty(value) ?  value : that.params['value'];
        }
        that.params['value'] = !cm.isEmpty(that.params['value']) ? that.params['value'] : that.params['defaultValue'];
    };

    /*** VIEW MODEL ***/

    classProto.renderContent = function(){
        var that = this,
            nodes = {};
        that.nodes['content'] = nodes;
        that.triggerEvent('onRenderContentStart');
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'pt__input'},
            nodes['input'] = cm.node('input', {'type' : that.params['type']})
        );
        // Attributes
        if(!cm.isEmpty(that.params['placeholder'])){
            nodes['input'].placeholder = that.params['placeholder'];
        }
        // Events
        that.triggerEvent('onRenderContentProcess');
        that.triggerEvent('onRenderContentEnd');
        // Push
        return nodes['container'];
    };

    classProto.renderViewModel = function(){
        var that = this;
        classInherit.prototype.renderViewModel.apply(that, arguments);

        // Init Autocomplete
        cm.getConstructor(that.params.autocomplete.constructor, function(classConstructor){
            that.components.autocomplete = new classConstructor(
                cm.merge(that.params.autocomplete.constructorParams, {
                    node: that.nodes.content.input,
                    data: that.options,
                    callbacks: that.renderAutocompleteCallbacks.bind(that),
                    events: that.renderAutocompleteEvents.bind(that)
                })
            );
        })
    };

    /*** AUTOCOMPLETE ***/

    classProto.renderAutocompleteCallbacks = function(){
        var that = this;
        return {};
    };

    classProto.renderAutocompleteEvents = function(){
        var that = this;
        return {
            onChange: function(Autocomplete, value){
                that.set(value, true);
            },
            onFocus: function(){
                that.triggerEvent('onFocus')
            },
            onBlur: function(){
                that.triggerEvent('onBlur')
            }
        };
    };

    /* *** DATA VALUE *** */

    classProto.setData = function(){
        var that = this,
            value = that.value,
            item = that.getOption(that.value);
        if(item){
            value = !cm.isEmpty(item['text']) ? item['text'] : item['value'];
        }
        that.nodes['content']['input'].value = value;
        return that;
    };

    classProto.getOption = function(value){
        var that = this,
            item;
        cm.forEach(that.options, function(option){
            if(option['value'] === value){
                item = option;
            }
        });
        return item;
    };
});

Com.FormFields.add('autocomplete-field', {
    'node' : cm.node('select'),
    'fieldConstructor' : 'Com.AbstractFormField',
    'constructor' : 'Com.AutocompleteField'
});

cm.define('Com.BoxRadiusTools', {
    'extend' : 'Com.BoxTools',
    'params' : {
        'className' : 'com__box-tools com__box-tools--radius',
        'inputs' : [
            {'name' : 'topleft', 'icon' : 'icon svg__radius-topleft small linked', 'iconPosition' : 'outsideLeft'},
            {'name' : 'topright', 'icon' : 'icon svg__radius-topright small linked', 'iconPosition' : 'outsideRight'},
            {'name' : 'bottomright', 'icon' : 'icon svg__radius-bottomright small linked', 'iconPosition' : 'outsideRight'},
            {'name' : 'bottomleft', 'icon' : 'icon svg__radius-bottomleft small linked', 'iconPosition' : 'outsideLeft'}
        ]
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.BoxTools.apply(that, arguments);
});

cm.getConstructor('Com.BoxRadiusTools', function(classConstructor, className, classProto){
    var _inherit = classProto._inherit;

    classProto.renderContent = function(){
        var that = this,
            nodes = {};
        that.nodes['content'] = nodes;
        that.triggerEvent('onRenderContentStart');
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__box-tools__content'},
            cm.node('div', {'class' : 'b-line'},
                that.renderInput(that.params['inputs'][0], 0),
                that.renderInput(that.params['inputs'][1], 1)
            ),
            cm.node('div', {'class' : 'b-line'},
                that.renderInput(that.params['inputs'][3], 3),
                that.renderInput(that.params['inputs'][2], 2)
            ),
            cm.node('div', {'class' : 'b-line'},
                cm.node('div', {'class' : 'b-link-container'},
                    nodes['link'] = cm.node('div', {'class' : 'b-link', 'title' : that.lang('link')},
                        cm.node('div', {'class' : 'icon'})
                    )
                )
            )
        );
        // Events
        that.triggerEvent('onRenderContentProcess');
        cm.addEvent(nodes['link'], 'click', that.linkInputsHandler);
        that.triggerEvent('onRenderContentEnd');
        // Push
        return nodes['container'];
    };
});
cm.define('Com.Check', {
    extend: 'Com.AbstractInput',
    params: {
        controllerEvents: true,
        type: 'checkbox',
        inline: false,
        renderRequiredMessage: false,

        multiple: false,
        values: {
            checked: null,
            unchecked: null,
        },
        contentIcon: null,

        help: null,
        helpType: 'tooltip',
        helpConstructor: 'Com.HelpBubble',
        helpParams: {
            renderStructure: true,
            embedStructureOnRender: true
        },
    },
    strings: {
        'required': 'This field is required.'
    }
},
function() {
    Com.AbstractInput.apply(this, arguments);
});

cm.getConstructor('Com.Check', function(classConstructor, className, classProto, classInherit) {
    classProto.onConstructStart = function() {
        var that = this;

        // Variables
        that.inputs = [];
        that.hidden = [];

        // Bind context to methods
        that.setValueHandler = that.setValue.bind(that);
    };

    classProto.onValidateParamsProcess = function() {
        var that = this;

        if (!cm.isEmpty(that.params.options)) {
            that.params.multiple = that.params.type === 'checkbox';

            // Convert option values
            cm.forEach(that.params.options, function(item) {
                item.checked = item.checked || item.selected;
                if (!cm.isEmpty(item.value) && item.checked) {
                    if (cm.isEmpty(that.params.value)) {
                        that.params.value = [];
                    } else if (cm.isString(that.params.value) || cm.isNumber(that.params.value)) {
                        that.params.value = [that.params.value];
                    }
                    cm.arrayAdd(that.params.value, item.value);
                }
            });
        } else {
            that.params.type = 'checkbox';
            that.params.multiple = false;

            if (cm.isEmpty(that.params.values)) {
                that.params.values = {
                    checked: null,
                    unchecked: null,
                };
            }

            // Checked parameter behavior override
            if (cm.isEmpty(that.params.value) && (that.params.checked)) {
                that.params.value = true;
            }

            // Convert value parameters
            if (!cm.isEmpty(that.params.value) && cm.isEmpty(that.params.values.checked)) {
                that.params.values.checked = that.params.value;
            }

            if (cm.isEmpty(that.params.values.checked)) {
                that.params.values.checked = true;
            }

            if (cm.isEmpty(that.params.values.unchecked)) {
                that.params.values.unchecked = false;
            }
        }
    };

    classProto.onEnable = function() {
        var that = this;
        cm.forEach(that.inputs, function(item) {
            item.input.disabled = false;
        });
    };

    classProto.onDisable = function() {
        var that = this;
        cm.forEach(that.inputs, function(item) {
            item.input.disabled = true;
        });
    };

    /*** VIEW MODEL ***/

    classProto.renderHiddenContent = function() {
        var that = this,
            nodes = {},
            inputContainer;
        that.nodes.hiddenContent = nodes;

        // Structure
        nodes.container = cm.node('div', {classes: 'display-none'});

        // Render inputs
        if (!cm.isEmpty(that.params.options)) {
            cm.forEach(that.params.options, function(option) {
                inputContainer = that.renderHiddenInput(option);
                cm.appendChild(inputContainer, nodes.container);
            });
        } else {
            inputContainer = that.renderHiddenInput({
                'value': that.params.value,
                'values': that.params.values,
            });
            cm.appendChild(inputContainer, nodes.container);
        }

        // Export
        return nodes.container;
    };

    classProto.renderHiddenInput = function(item) {
        var that = this;

        item = cm.merge({
            nodes: {},
            value: null,
            values: {
                checked: null,
                unchecked: null,
            },
        }, item);

        // Validate
        if (cm.isEmpty(item.values.checked)) {
            item.values.checked = !cm.isEmpty(item.value) ? item.value : true;
        }
        if (cm.isEmpty(item.values.unchecked)) {
            item.values.unchecked = false;
        }

        // Structure
        item.nodes.container = item.nodes.input = cm.node('input', {'type': that.params.type});
        item.input = item.nodes.input;

        // Attributes
        if (!cm.isEmpty(that.params.name)) {
            item.input.setAttribute('name', that.params.name);
        }

        // Push
        that.hidden.push(item);
        return item.nodes.container;
    };

    classProto.renderContent = function() {
        var that = this,
            nodes = {},
            inputContainer;
        that.nodes.content = nodes;
        that.triggerEvent('onRenderContentStart');

        // Structure
        nodes.container = cm.node('div', {classes: 'pt__check-line'});
        if (cm.isBoolean(that.params.inline)) {
            if (that.params.inline) {
                cm.addClass(nodes.container, 'is-line');
            } else {
                cm.addClass(nodes.container, 'is-box');
            }
        }

        // Render inputs
        that.triggerEvent('onRenderContentProcess');
        if (!cm.isEmpty(that.params.options)) {
            if (that.params.type === 'radio') {
                nodes.container.setAttribute('role', 'radiogroup');
            }
            cm.forEach(that.params.options, function(option) {
                inputContainer = that.renderInput(option);
                cm.appendChild(inputContainer, nodes.container);
            });
        } else {
            inputContainer = that.renderInput({
                text: that.params.placeholder,
                value: that.params.value,
                values: that.params.values,
            });
            cm.appendChild(inputContainer, nodes.container);
        }
        that.triggerEvent('onRenderContentEnd');

        // Push
        return nodes.container;
    };

    classProto.renderInput = function(item) {
        var that = this;
        item = cm.merge({
            nodes: {},
            textNodes: {},
            value: null,
            text: '',
            hint: null,
            icon: null,
            help: that.params.help,
            helpType: that.params.helpType,
            values: {
                checked: null,
                unchecked: null,
            },
        }, item);

        // Validate
        if (cm.isEmpty(item.icon)) {
            item.icon = that.params.contentIcon;
        }
        if (cm.isUndefined(item.values.checked)) {
            item.values.checked = !cm.isUndefined(item.value) ? item.value : true;
        }
        if (cm.isUndefined(item.values.unchecked)) {
            item.values.unchecked = false;
        }

        // Structure
        item.nodes.container = cm.node('label',
            item.nodes.input = cm.node('input', {type: that.params.type}),
        );

        // Input
        item.input = item.nodes.input;

        // Value
        if (that.params.type === 'checkbox') {
            item.input.value = item.value;
        }

        // Label
        if (!cm.isEmpty(item.text)) {
            item.nodes.label = cm.node('span', {
                classes: 'label',
                innerHTML: item.text,
            });
            item.textNodes = cm.getNodes(item.nodes.label);
            cm.appendChild(item.nodes.label, item.nodes.container);
        }

        // Hint
        if (!cm.isEmpty(item.hint)) {
            item.nodes.hint = cm.node('span', {
                classes: 'hint',
                innerHTML: item.hint,
            });
            cm.appendChild(item.nodes.hint, item.nodes.label);
        }

        // Icon
        if (cm.isNode(item.icon)) {
            item.nodes.icon = cm.clone(item.icon);
            cm.appendChild(item.nodes.icon, item.nodes.container);
            cm.addClass(item.nodes.container, 'has-icon');
        }

        // Events
        cm.addEvent(item.nodes.input, 'click', function() {
            that.setValue(item, true);
        });

        // Help Bubble
        if (!cm.isEmpty(item.help)) {
            that.renderHelp(item);
        }

        // Push
        that.inputs.push(item);
        return item.nodes.container;
    };

    classProto.renderHelp = function(item) {
        var that = this;

        // Validate params
        item.helpParams = cm.merge(that.params.helpParams, {
            name: that.params.name,
            content: item.help,
            type: item.helpType,
            container: item.nodes.container,
        });

        // Find help button target in the text nodes if exists
        if (item.textNodes && item.textNodes.helpButton) {
            item.helpParams.nodes = {
                button: item.textNodes.helpButton,
            };
            item.helpParams.renderStructure = false;
            item.helpParams.embedStructureOnRender = false;
        }

        // Render component
        cm.getConstructor(that.params.helpConstructor, function(classConstructor){
            item.helpController = new classConstructor(item.helpParams);
        });
    };

    /*** DATA VALUE ***/

    classProto.setHiddenAttributes = function() {
        var that = this;
    };

    classProto.validateValue = function(value) {
        var that = this;
        if (cm.isEmpty(that.params.options)) {
            if (cm.isEmpty(value)) {
                return that.params.values.unchecked;
            } else if (cm.isBoolean(value)) {
                return value ? that.params.values.checked : that.params.values.unchecked;
            } else {
                return value;
            }
        }
        return value;
    };

    classProto.setValue = function(item, triggerEvents) {
        var that = this;
        triggerEvents = cm.isUndefined(triggerEvents) ? true : triggerEvents;

        // Get value
        var value = null;
        if (!cm.isEmpty(that.params.options)) {
            if (that.params.multiple) {
                value = [];
                cm.forEach(that.inputs, function(item) {
                    if (item.input.checked && item.values.checked) {
                        value.push(item.values.checked);
                    } else if(item.values.unchecked) {
                        value.push(item.values.unchecked);
                    }
                });
            } else {
                value = item.values.checked;
            }
        } else {
            value = item.input.checked ? item.values.checked : item.values.unchecked;
        }

        that.set(value, triggerEvents);
        return that;
    };

    classProto.saveHiddenValue = function(value) {
        var that = this;
        if (!cm.isEmpty(that.params.options)) {
            cm.forEach(that.hidden, function(item) {
                that.setInputItemValue(item, value);
            });
        } else {
            that.setInputItemValue(that.hidden[0], value);
        }
    };

    classProto.setData = function(value) {
        var that = this;
        if (!cm.isEmpty(that.params.options)) {
            cm.forEach(that.inputs, function(item) {
                that.setInputItemValue(item, value);
            });
        } else {
            that.setInputItemValue(that.inputs[0], value);
        }
    };

    classProto.setInputItemValue = function(item, value) {
        var that = this;

        var checked;
        if (!cm.isEmpty(that.params.options)) {
            checked = that.params.multiple ? cm.inArray(value, item.values.checked) : (value === item.values.checked);
        } else {
            checked = that.testInputValue(value, that.params.values.checked, that.params.values.unchecked);
        }

        item.input.checked = checked;
        cm.toggleClass(item.nodes.container, 'active', checked);
    };

    classProto.testInputValue = function(value, checkedValue, uncheckedValue) {
        // TODO: Test all variants
        // FIXME: Remove checks for zero, etc
        return (
            (!cm.isEmpty(checkedValue) && value === checkedValue) ||
            !(cm.isEmpty(value) || value === 0 || value === '0' || value === false || value === uncheckedValue)
        );
    };

    /*** VALIDATOR ***/

    classProto.validator = function(data) {
        var that = this;
        if (data.required && cm.isEmpty(that.params.options)) {
            data.valid = data.value === that.params.values.checked;
            if (!data.valid && that.params.renderRequiredMessage) {
                data.message = that.msg('required');
            }
        }
        return data;
    };
});

/* ****** FORM FIELD COMPONENT ******* */

Com.FormFields.add('checkbox', {
    node: cm.node('div', {classes: 'pt__check-line'}),
    fieldConstructor: 'Com.AbstractFormField',
    constructor: 'Com.Check',
    constructorParams: {
        type: 'checkbox',
    },
});

Com.FormFields.add('checkbox-group', {
    node: cm.node('div', {classes: 'pt__check-line'}),
    multiple: true,
    isValueObject: true,    // ToDo: implement
    fieldConstructor: 'Com.AbstractFormField',
    constructor: 'Com.Check',
    constructorParams: {
        type: 'checkbox',
        inline: false,
    },
});

Com.FormFields.add('radio', {
    node: cm.node('div', {classes: 'pt__check-line'}),
    fieldConstructor: 'Com.AbstractFormField',
    constructor: 'Com.Check',
    constructorParams: {
        type: 'radio',
        inline: true,
    },
});

Com.FormFields.add('check', {
    node: cm.node('div', {classes: 'pt__check-line'}),
    fieldConstructor: 'Com.AbstractFormField',
    constructor: 'Com.Check',
    constructorParams: {
        type: 'checkbox',
        inline: true,
    },
});

cm.define('Com.CheckTrigger', {
    'extend' : 'Com.AbstractController',
    'params' : {
        'renderStructure' : false,
        'embedStructureOnRender' : false,
        'controllerEvents' : true,
        'checked' : false,
        'unchecked' : false
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractController.apply(that, arguments);
});

cm.getConstructor('Com.CheckTrigger', function(classConstructor, className, classProto){
    var _inherit = classProto._inherit;

    classProto.onConstructStart = function(){
        var that = this;
        that.checked = false;
        that.checkedA = [];
        that.uncheckedA = [];
        // Bind context to methods
        that.toggleHandler = that.toggle.bind(that);
    };

    classProto.onValidateParams = function(){
        var that = this;
        that.checked = that.params['node'].checked;
    };

    classProto.renderViewModel = function(){
        var that = this;
        // Add check event
        cm.addEvent(that.params['node'], 'change', that.toggleHandler);
        // Find components
        if(cm.isObject(that.params['checked'])){
            that.find(that.params['checked'], that.checkedA);
        }else if(cm.isString(that.params['checked'])){
            that.find({'type' : 'input', 'name' : that.params['checked']}, that.checkedA);
        }
        if(cm.isObject(that.params['unchecked'])){
            that.find(that.params['unchecked'], that.uncheckedA);
        }else if(cm.isString(that.params['unchecked'])){
            that.find({'type' : 'input', 'name' : that.params['unchecked']}, that.uncheckedA);
        }
    };

    classProto.find = function(o, parent){
        var that = this;
        o = cm.merge({
            'type' : 'controller',  // controller | input
            'className' : null,
            'classInstance' : null,
            'name' : null,
            'container' : null,
            'node' : null,
            'method' : 'disable'
        }, o);
        // Find by type
        switch(o['type']){
            case 'controller':
                new cm.Finder(o['className'], o['name'], o['container'], function(classInstance){
                    var item = cm.merge(o, {
                        'classInstance' : classInstance
                    });
                    parent.push(item);
                    that.toggle();
                });
                break;
            case 'input':
                var nodes = cm.getByName(o['name'], o['container']);
                cm.forEach(nodes, function(node){
                    var item = cm.merge(o, {
                        'node' : node
                    });
                    parent.push(item);
                    that.toggle();
                });
                break;
        }
    };

    classProto.toggle = function(){
        var that = this;
        that.checked = that.params['node'].checked;
        if(that.checked){
            that.enableTrigger(that.checkedA);
            that.disableTrigger(that.uncheckedA);
        }else{
            that.disableTrigger(that.checkedA);
            that.enableTrigger(that.uncheckedA);
        }
        return that;
    };

    classProto.enableTrigger = function(o){
        var that = this;
        cm.forEach(o, function(item){
            switch(item['type']){
                case 'controller':
                    item['classInstance'] && cm.isFunction(item['classInstance'].enable) && item['classInstance'].enable();
                    break;
                case 'input':
                    if(cm.isNode(item['node'])){
                        item['node'].disabled = false;
                        item['node'].focus();
                    }
                    break;
            }
        });
        return that;
    };

    classProto.disableTrigger = function(o){
        var that = this;
        cm.forEach(o, function(item){
            switch(item['type']){
                case 'controller':
                    item['classInstance'] && cm.isFunction(item['classInstance'].disable) && item['classInstance'].disable();
                    break;
                case 'input':
                    if(cm.isNode(item['node'])){
                        item['node'].disabled = true;
                        item['node'].blur();
                    }
                    break;
            }
        });
        return that;
    };
});
cm.define('Com.CodeHighlight', {
    'modules' : [
        'Params',
        'Events',
        'DataConfig',
        'Stack'
    ],
    'events' : [
        'onRender'
    ],
    'params' : {
        'node' : cm.node('div'),
        'name' : '',
        'language' : 'javascript',
        'lineNumbers' : true,
        'lineWrapping' : false,
        'customEvents' : true,
        'disabled' : false,
        'title' :''
    }
},
function(params){
    var that = this;

    that.components = {};
    that.disabled = false;

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataConfig(that.params['node']);
        validateParams();
        render();
        that.addToStack(that.params['node']);
        that.triggerEvent('onRender');
    };

    var validateParams = function(){
        if(cm.isNode(that.params['node'])){
            that.params['title'] = that.params['node'].getAttribute('title') || that.params['title'];
            that.params['name'] = that.params['node'].getAttribute('name') || that.params['name'];
            that.params['disabled'] = that.params['node'].disabled || that.params['node'].readOnly || that.params['disabled'];
        }
        that.disabled = that.params['disabled'];
    };

    var render = function(){
        // Code Mirror
        cm.loadScript({
            'path' : 'CodeMirror',
            'src' : '%assetsUrl%/libs/codemirror_comp/codemirror.min.js?%version%',
            'callback' : function(path){
                if(path){
                    that.components['codemirror'] = path.fromTextArea(that.params['node'], {
                        'lineNumbers' : that.params['lineNumbers'],
                        'lineWrapping' : that.params['lineWrapping'],
                        'viewportMargin' : Infinity,
                        'mode' : that.params['language']
                    });
                    that.components['codemirror'].on('change', function(cm){
                        that.params['node'].value = cm.getValue();
                    });
                }
                // Enable / Disable
                if(that.disabled){
                    that.disable();
                }else{
                    that.enable();
                }
            }
        });
        if(that.params['customEvents']){
            cm.customEvent.add(that.params['node'], 'redraw', that.redraw);
        }
    };

    /* ******* PUBLIC ******* */

    that.set = function(text){
        if(that.components['codemirror']){
            that.components['codemirror'].setValue(text);
        }else{
            that.params['node'].value = text;
        }
        return that;
    };

    that.get = function(){
        if(that.components['codemirror']){
            return that.components['codemirror'].getValue();
        }else{
            return that.params['node'].value;
        }
    };

    that.redraw = function(){
        that.components['codemirror'] && that.components['codemirror'].refresh();
        return that;
    };

    that.disable = function(){
        that.disabled = true;
        that.components['codemirror'] && that.components['codemirror'].setOption('readOnly', true);
        return that;
    };

    that.enable = function(){
        that.disabled = false;
        that.components['codemirror'] && that.components['codemirror'].setOption('readOnly', false);
        return that;
    };

    init();
});

cm.define('Com.ColorPicker', {
    'modules' : [
        'Params',
        'Events',
        'Langs',
        'Structure',
        'DataConfig',
        'Storage',
        'Stack'
    ],
    'require' : [
        'Com.Tooltip',
        'Com.Palette'
    ],
    'events' : [
        'onRender',
        'onSelect',
        'onChange',
        'onClear'
    ],
    'params' : {
        'input' : null,                                     // Deprecated, use 'node' parameter instead.
        'node' : cm.node('input', {'type' : 'text'}),
        'container' : null,
        'embedStructure' : 'replace',
        'name' : '',
        'value' : null,                                     // Color string: transparent | hex | rgba.
        'defaultValue' : 'transparent',
        'title' : '',
        'showLabel' : true,
        'showClearButton' : false,
        'showTitleTooltip' : true,
        'renderInBody' : true,
        'disabled' : false,
        'size' : 'default',                                 // default | full
        'icons' : {
            'picker' : 'icon default linked',
            'clear' : 'icon default linked'
        },
        'Com.Tooltip' : {
            'targetEvent' : 'click',
            'hideOnReClick' : true,
            'className' : 'com__colorpicker__tooltip',
            'top' : cm._config.tooltipDown
        },
        'Com.Palette' : {
            'setOnInit' : false
        }
    },
    'strings' : {
        'Transparent' : 'Transparent',
        'Clear' : 'Clear'
    }
},
function(params){
    var that = this;

    that.nodes = {};
    that.components = {};
    that.value = null;
    that.previousValue = null;
    that.disabled = false;

    var init = function(){
        that.setParams(params);
        preValidateParams();
        that.convertEvents(that.params['events']);
        that.getDataConfig(that.params['node']);
        validateParams();
        render();
        setLogic();
        // Add to stack
        that.addToStack(that.nodes['container']);
        // Set
        that.set(that.value, false);
        // Trigger render event
        that.triggerEvent('onRender', that.value);
    };

    var preValidateParams = function(){
        if(cm.isNode(that.params['input'])){
            that.params['node'] = that.params['input'];
        }
    };

    var validateParams = function(){
        if(cm.isNode(that.params['node'])){
            that.params['title'] = that.params['node'].getAttribute('title') || that.params['title'];
            that.params['disabled'] = that.params['node'].disabled || that.params['disabled'];
            that.value = that.params['node'].value;
            that.params['name'] = that.params['node'].getAttribute('name') || that.params['name'];
        }
        that.value = that.params['value'] || that.value || that.params['defaultValue'];
        that.disabled = that.params['disabled'];
        that.params['Com.Palette']['name'] = [that.params['name'], 'palette'].join('-');
    };

    var render = function(){
        /* *** RENDER STRUCTURE *** */
        that.nodes['container'] = cm.node('div', {'class' : 'com__colorpicker'},
            that.nodes['hidden'] = cm.node('input', {'type' : 'hidden'}),
            that.nodes['target'] = cm.node('div', {'class' : 'pt__input'},
                that.nodes['input'] = cm.node('input', {'type' : 'text', 'readOnly' : 'true'}),
                that.nodes['icon'] = cm.node('div', {'class' : that.params['icons']['picker']})
            ),
            that.nodes['menuContainer'] = cm.node('div', {'class' : 'form'},
                that.nodes['paletteContainer'] = cm.node('div')
            )
        );
        /* *** ATTRIBUTES *** */
        // Size
        if(!cm.isEmpty(that.params['size'])){
            cm.addClass(that.nodes['container'], ['size', that.params['size']].join('-'));
        }
        // Title
        if(that.params['showTitleTooltip'] && !cm.isEmpty(that.params['title'])){
            that.nodes['container'].title = that.params['title'];
        }
        // ID
        if(that.params['node'].id){
            that.nodes['container'].id = that.params['node'].id;
        }
        // Name
        if(that.params['name']){
            that.nodes['hidden'].setAttribute('name', that.params['name']);
        }
        // Label
        if(!that.params['showLabel']){
            cm.addClass(that.nodes['target'], 'is-no-label');
        }
        // Clear Button
        if(that.params['showClearButton']){
            cm.addClass(that.nodes['container'], 'has-clear-button');
            that.nodes['container'].appendChild(
                that.nodes['clearButton'] = cm.node('div', {'class' : that.params['icons']['clear'], 'title' : that.lang('Clear')})
            );
        }
        /* *** INSERT INTO DOM *** */
        that.embedStructure(that.nodes['container']);
    };

    var setLogic = function(){
        // Add events on input to makes him clear himself when user wants that
        cm.addEvent(that.nodes['input'], 'keydown', function(e){
            e = cm.getEvent(e);
            cm.preventDefault(e);
            if(e.keyCode == 8){
                that.clear();
                that.components['tooltip'].hide();
            }
        });
        // Clear Button
        if(that.params['showClearButton']){
            cm.addEvent(that.nodes['clearButton'], 'click', function(){
                that.clear();
                that.components['tooltip'].hide();
            });
        }
        // Render tooltip
        that.components['tooltip'] = new Com.Tooltip(
            cm.merge(that.params['Com.Tooltip'], {
                'container' : that.params['renderInBody'] ? document.body : that.nodes['container'],
                'content' : that.nodes['menuContainer'],
                'target' : that.nodes['target'],
                'events' : {
                    'onShowStart' : show,
                    'onHideStart' : hide
                }
            })
        );
        // Render palette
        that.components['palette'] = new Com.Palette(
            cm.merge(that.params['Com.Palette'], {
                'node' : that.nodes['menuContainer'],
                'events' : {
                    'onChange' : function(my, value){
                        set(my.get('rgb'), true);
                        that.components['tooltip'].hide();
                    }
                }
            })
        );
        // Enable / Disable
        if(that.disabled){
            that.disable();
        }else{
            that.enable();
        }
    };

    var set = function(color, triggerEvents){
        that.previousValue = that.value;
        if(cm.isEmpty(color)){
            color = that.params['defaultValue'];
        }
        that.value = color;
        that.components['palette'].set(that.value, false);
        that.nodes['hidden'].value = that.components['palette'].get('rgb');
        if(that.value === 'transparent'){
            if(that.params['showLabel']){
                that.nodes['input'].value = that.lang('Transparent');
            }
            cm.replaceClass(that.nodes['input'], 'input-dark input-light', 'input-checkers');
        }else{
            if(that.params['showLabel']){
                that.nodes['input'].value = that.components['palette'].get('hex');
            }
            that.nodes['input'].style.backgroundColor = that.components['palette'].get('hex');
            if(that.components['palette'].isDark()){
                cm.replaceClass(that.nodes['input'], 'input-checkers input-light', 'input-dark');
            }else{
                cm.replaceClass(that.nodes['input'], 'input-checkers input-dark', 'input-light');
            }
        }
        if(triggerEvents){
            that.triggerEvent('onSelect', that.value);
            eventOnChange();
        }
    };

    var hide = function(){
        that.nodes['input'].blur();
        cm.removeClass(that.nodes['container'], 'active');
        that.components['palette'].set(that.value, false);
    };

    var show = function(){
        cm.addClass(that.nodes['container'], 'active');
        that.components['palette'].redraw();
    };

    var eventOnChange = function(){
        if(that.value != that.previousValue){
            that.triggerEvent('onChange', that.value);
        }
    };

    /* ******* MAIN ******* */

    that.set = function(color, triggerEvents){
        triggerEvents = typeof triggerEvents != 'undefined'? triggerEvents : true;
        set(color, triggerEvents);
        return that;
    };

    that.get = function(){
        return that.value;
    };

    that.clear = function(triggerEvents){
        triggerEvents = typeof triggerEvents != 'undefined'? triggerEvents : true;
        // Set default color value
        set(that.params['defaultValue'], false);
        // Trigger events
        if(triggerEvents){
            that.triggerEvent('onClear', that.value);
            eventOnChange();
        }
        return that;
    };

    that.disable = function(){
        that.disabled = true;
        cm.addClass(that.nodes['container'], 'disabled');
        that.nodes['input'].disabled = true;
        that.components['tooltip'].disable();
        return that;
    };

    that.enable = function(){
        that.disabled = false;
        cm.removeClass(that.nodes['container'], 'disabled');
        that.nodes['input'].disabled = false;
        that.components['tooltip'].enable();
        return that;
    };

    init();
});

/****** FORM FIELD COMPONENT *******/

Com.FormFields.add('color-picker', {
    node: cm.node('input', {type: 'text'}),
    value: '',
    defaultValue: '',
    fieldConstructor: 'Com.AbstractFormField',
    constructor: 'Com.ColorPicker',
});
cm.define('Com.FieldContent', {
    extend: 'Com.AbstractInput',
    params: {
        controllerEvents: true,
        renderStructureContent: false,
        renderHiddenContent: false,
        setHiddenInput: false,
    },
},
function() {
    Com.AbstractInput.apply(this, arguments);
});

cm.getConstructor('Com.FieldContent', function(classConstructor, className, classProto, classInherit) {
    classProto.setData = function() {
        var that = this,
            node = that.value;
        cm.clearNode(that.nodes.contentContainer);
        if (!cm.isNode(node)) {
            node = cm.node('div', {innerHTML: node});
        }
        cm.appendChild(node, that.nodes.contentContainer);
        return that;
    };

    classProto.setAttributes = function() {
        var that = this;

        // Call parent method
        classInherit.prototype.setAttributes.apply(that, arguments);

        if (!cm.isEmpty(that.params.fieldName)) {
            that.nodes.container.setAttribute('id', that.params.fieldName);
        }
    };
});

/****** FORM FIELD COMPONENT *******/

Com.FormFields.add('content', {
    node: cm.node('div'),
    value: '',
    defaultValue: '',
    fieldConstructor: 'Com.AbstractFormField',
    constructor: 'Com.FieldContent',
});

Com.FormFields.add('node', {
    node: cm.node('div', {classes: 'pt__field-node'}),
    value: '',
    defaultValue: '',
    inputValueType: 'unset',
    renderStructureField: false,
    renderStructureContent: false,
    fieldConstructor: 'Com.AbstractFormField',
    constructor: 'Com.FieldContent',
    constructorParams: {
        embedStructure: 'append',
    },
});


Com.Elements['Datepicker'] = {};

Com['GetDatepicker'] = function(id){
    return Com.Elements.Datepicker[id] || null;
};

cm.define('Com.Datepicker', {
    'modules' : [
        'Params',
        'Events',
        'DataConfig',
        'Structure',
        'Langs',
        'Stack'
    ],
    'events' : [
        'onRender',
        'onSelect',
        'onChange',
        'onClear',
        'onFocus',
        'onBlur'
    ],
    'params' : {
        'input' : null,                                                     // Deprecated, use 'node' parameter instead.
        'node' : cm.node('input', {'type' : 'text'}),
        'container' : null,
        'name' : '',
        'embedStructure' : 'replace',
        'customEvents' : true,
        'renderInBody' : true,
        'size' : 'default',                                                 // default, full, custom
        'format' : 'cm._config.dateFormat',
        'displayFormat' : 'cm._config.displayDateFormat',
        'isDateTime' : false,
        'dateTimeFormat' : 'cm._config.dateTimeFormat',
        'displayDateTimeFormat' : 'cm._config.displayDateTimeFormat',
        'setEmptyDateByFormat' : true,
        'minutesInterval' : 1,
        'startYear' : 1950,                                                 // number | current
        'endYear' : 'current + 10',                                         // number | current
        'startWeekDay' : 0,
        'showTodayButton' : true,
        'showClearButton' : false,
        'showTitleTooltip' : true,
        'showPlaceholder' : true,
        'title' : '',
        'placeholder' : '',
        'menuMargin' : 4,
        'value' : 0,
        'disabled' : false,
        'icons' : {
            'datepicker' : 'icon default linked',
            'clear' : 'icon default linked'
        },
        'Com.Tooltip' : {
            'targetEvent' : 'click',
            'hideOnReClick' : false,
            'className' : 'com__datepicker__tooltip',
            'top' : cm._config.tooltipDown
        }
    },
    'strings' : {
        'daysAbbr' : ['S', 'M', 'T', 'W', 'T', 'F', 'S'],
        'days' : ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        'months' : ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
        'Clear date' : 'Clear date',
        'Today' : 'Today',
        'Now' : 'Now',
        'Time' : 'Time:'
    }
},
function(params){
    var that = this,
        nodes = {},
        components = {};

    that.date = null;
    that.previousDate = null;
    that.value = null;
    that.previousValue = null;
    that.format = null;
    that.displayFormat = null;
    that.disabled = false;
    that.isDestructed = null;

    var init = function(){
        that.destructHandler = that.destruct.bind(that);
        that.setParams(params);
        preValidateParams();
        that.convertEvents(that.params['events']);
        that.getDataConfig(that.params['node']);
        validateParams();
        render();
        setLogic();
        setEvents();
        // Add to stack
        that.addToStack(nodes['container']);
        // Set selected date
        if(that.params['value']){
            that.set(that.params['value'], that.format, false);
        }else{
            that.set(that.params['node'].value, that.format, false);
        }
        // Trigger events
        that.triggerEvent('onRender', that.value);
    };

    var preValidateParams = function(){
        if(cm.isNode(that.params['input'])){
            that.params['node'] = that.params['input'];
        }
    };

    var validateParams = function(){
        if(cm.isNode(that.params['node'])){
            that.params['placeholder'] = that.params['node'].getAttribute('placeholder') || that.params['placeholder'];
            that.params['title'] = that.params['node'].getAttribute('title') || that.params['title'];
            that.params['disabled'] = that.params['node'].disabled || that.params['disabled'];
            that.params['name'] = that.params['node'].getAttribute('name') || that.params['name'];
        }
        if(that.params['value'] === 'now'){
            that.params['value'] = new Date();
        }
        if(/current/.test(that.params['startYear'])){
            that.params['startYear'] = eval(cm.strReplace(that.params['startYear'], {'current' : new Date().getFullYear()}));
        }
        if(/current/.test(that.params['endYear'])){
            that.params['endYear'] = eval(cm.strReplace(that.params['endYear'], {'current' : new Date().getFullYear()}));
        }
        that.format = that.params['isDateTime']? that.params['dateTimeFormat'] : that.params['format'];
        that.displayFormat = that.params['isDateTime']? that.params['displayDateTimeFormat'] : that.params['displayFormat'];
        that.disabled = that.params['disabled'];
    };

    var render = function(){
        /* *** RENDER STRUCTURE *** */
        nodes['container'] = cm.node('div', {'class' : 'com__datepicker-input'},
            nodes['hidden'] = cm.node('input', {'type' : 'hidden'}),
            nodes['target'] = cm.node('div', {'class' : 'pt__input has-icon-right'},
                nodes['input'] = cm.node('input', {'type' : 'text'}),
                nodes['icon'] = cm.node('div', {'class' : that.params['icons']['datepicker']})
            ),
            nodes['menuContainer'] = cm.node('div', {'class' : 'form'},
                nodes['calendarContainer'] = cm.node('div', {'class' : 'calendar-holder'})
            )
        );
        if(!cm.isEmpty(that.params['size'])){
            cm.addClass(nodes['container'], ['size', that.params['size']].join('-'));
        }
        /* *** ATTRIBUTES *** */
        // Title
        if(that.params['showTitleTooltip'] && !cm.isEmpty(that.params['title'])){
            nodes['container'].title = that.params['title'];
        }
        // ID
        if(that.params['node'].id){
            nodes['container'].id = that.params['node'].id;
        }
        // Set hidden input attributes
        if(that.params['name']){
            nodes['hidden'].setAttribute('name', that.params['name']);
        }
        // Placeholder
        if(that.params['showPlaceholder'] && !cm.isEmpty(that.params['placeholder'])){
            nodes['input'].setAttribute('placeholder', that.params['placeholder']);
        }
        // Clear Button
        if(that.params['showClearButton']){
            cm.addClass(nodes['container'], 'has-clear-button');
            nodes['container'].appendChild(
                nodes['clearButton'] = cm.node('div', {'class' : that.params['icons']['clear'], 'title' : that.lang('Clear date')})
            );
        }
        // Today / Now Button
        if(that.params['showTodayButton']){
            nodes['menuContainer'].appendChild(
                nodes['todayButton'] = cm.node('div', {'class' : 'button today is-wide'}, that.lang(that.params['isDateTime']? 'Now' : 'Today'))
            );
        }
        // Time Select
        if(that.params['isDateTime']){
            nodes['timeHolder'] = cm.node('div', {'class' : 'time-holder'},
                cm.node('dl', {'class' : 'form-box'},
                    cm.node('dt', that.lang('Time')),
                    nodes['timeContainer'] = cm.node('dd')
                )
            );
            cm.insertAfter(nodes['timeHolder'], nodes['calendarContainer']);
        }
        /* *** INSERT INTO DOM *** */
        that.embedStructure(nodes['container']);
    };

    var setLogic = function(){
        cm.addEvent(nodes['input'], 'keypress', inputKeypressHandler);
        cm.addEvent(nodes['input'], 'keyup', inputKeyHandler);
        // Clear Button
        if(that.params['showClearButton']){
            cm.addEvent(nodes['clearButton'], 'click', function(){
                that.clear();
                components['menu'].hide(false);
            });
        }
        // Today / Now Button
        if(that.params['showTodayButton']){
            cm.addEvent(nodes['todayButton'], 'click', function(){
                that.set(new Date());
                components['menu'].hide(false);
            });
        }
        // Render tooltip
        components['menu'] = new Com.Tooltip(
            cm.merge(that.params['Com.Tooltip'], {
                'container' : that.params['renderInBody'] ? document.body : nodes['container'],
                'content' : nodes['menuContainer'],
                'target' : nodes['target'],
                'events' : {
                    'onShowStart' : onShow,
                    'onHideStart' : onHide
                }
            })
        );
        // Render calendar
        components['calendar'] = new Com.Calendar({
            'node' : nodes['calendarContainer'],
            'renderSelectsInBody' : false,
            'className' : 'com__datepicker-calendar',
            'startYear' : that.params['startYear'],
            'endYear' : that.params['endYear'],
            'startWeekDay' : that.params['startWeekDay'],
            'langs' : that.params['langs'],
            'renderMonthOnInit' : false,
            'events' : {
                'onMonthRender' : function(){
                    if(that.date){
                        components['calendar'].selectDay(that.date);
                    }
                },
                'onDayClick' : function(calendar, params){
                    setDate(null, null, params['day']);
                    components['calendar'].unSelectDay(that.previousDate);
                    components['calendar'].selectDay(that.date);
                    set(true);
                    // Hide datepicker tooltip
                    if(!that.params['isDateTime']){
                        components['menu'].hide(false);
                    }
                }
            }
        });
        // Render Time Select
        if(that.params['isDateTime']){
            components['time'] = new Com.TimeSelect({
                'container' : nodes['timeContainer'],
                'renderSelectsInBody' : false,
                'minutesInterval' : that.params['minutesInterval']
            });
            components['time'].addEvent('onChange', function(){
                setDate();
                components['calendar'].set(that.date.getFullYear(), that.date.getMonth(), false);
                components['calendar'].selectDay(that.date);
                set(true);
            });
        }
        // Enable / Disable
        if(that.disabled){
            that.disable();
        }else{
            that.enable();
        }
    };

    var inputKeypressHandler = function(e){
        if(cm.isKey(e, 'enter')){
            cm.preventDefault(e);
        }
    };

    var inputKeyHandler = function(e){
        var value = nodes['input'].value;
        if(cm.isKey(e, 'enter')){
            cm.preventDefault(e);
            validateInputValue();
            components['menu'].hide(false);
        }
        if(cm.isKey(e, 'delete')){
            if(cm.isEmpty(value)){
                that.clear(true);
                //components['menu'].hide(false);
            }
        }
    };

    var setEvents = function(){
        // Add custom event
        if(that.params['customEvents']){
            cm.customEvent.add(nodes['container'], 'destruct', that.destructHandler);
        }
    };

    var unsetEvents = function(){
        // Add custom event
        if(that.params['customEvents']){
            cm.customEvent.remove(nodes['container'], 'destruct', that.destructHandler);
        }
    };

    var onShow = function(){
        renderCalendarMonth();
        // Set classes
        cm.addClass(nodes['container'], 'active');
        that.triggerEvent('onFocus', that.value);
    };

    var onHide = function(){
        //validateInputValue();
        setInputValues();
        nodes['input'].blur();
        cm.removeClass(nodes['container'], 'active');
        that.triggerEvent('onBlur', that.value);
    };

    var validateInputValue = function(){
        var value = nodes['input'].value,
            date = new Date(value);
        if(cm.isEmpty(value) || !cm.isDateValid(date)){
            that.clear(true);
        }else{
            that.set(date, null, true);
        }
    };

    var set = function(triggerEvents){
        that.previousValue = that.value;
        if(that.date){
            // Set date
            setDate();
            // Set value
            that.value = cm.dateFormat(that.date, that.format, that.lang());
        }else{
            that.value = cm.dateFormat(false, that.format, that.lang());
        }
        setInputValues();
        renderCalendarMonth();
        // Trigger events
        if(triggerEvents){
            that.triggerEvent('onSelect', that.value);
            onChange();
        }
    };

    var setDate = function(year, month, day, hours, minutes, seconds){
        if(!that.date){
            that.date = new Date();
            that.previousDate = null;
        }else{
            that.previousDate = cm.clone(that.date);
        }
        // Set date
        year = cm.isUndefined(year) ? components['calendar'].getFullYear() : year;
        month = cm.isUndefined(month) ? components['calendar'].getMonth() : month;
        !cm.isEmpty(year) && that.date.setFullYear(year);
        !cm.isEmpty(month) && that.date.setMonth(month);
        !cm.isEmpty(day) && that.date.setDate(day);
        // Set time
        if(that.params['isDateTime']){
            hours = cm.isUndefined(hours) ? components['time'].getHours() : hours;
            minutes = cm.isUndefined(minutes) ? components['time'].getMinutes() : minutes;
            seconds = cm.isUndefined(seconds) ? 0 : seconds;
            !cm.isEmpty(hours) && that.date.setHours(hours);
            !cm.isEmpty(minutes) && that.date.setMinutes(minutes);
            !cm.isEmpty(seconds) && that.date.setSeconds(seconds);
        }
    };

    var renderCalendarMonth = function(){
        // Render calendar month
        if(that.date){
            components['calendar'].set(that.date.getFullYear(), that.date.getMonth());
        }
        components['calendar'].renderMonth();
    };

    var setInputValues = function(){
        if(that.date){
            nodes['input'].value = cm.dateFormat(that.date, that.displayFormat, that.strings);
            nodes['hidden'].value = that.value;
        }else{
            nodes['input'].value = '';
            if(that.params['setEmptyDateByFormat']){
                nodes['hidden'].value = cm.dateFormat(false, that.format, that.strings);
            }else{
                nodes['hidden'].value = '';
            }
        }
    };

    var onChange = function(){
        if(!that.previousValue || (!that.value && that.previousValue) || (that.value !== that.previousValue)){
            that.triggerEvent('onChange', that.value);
        }
    };

    /* ******* MAIN ******* */

    that.destruct = function(){
        var that = this;
        if(!that.isDestructed){
            that.isDestructed = true;
            cm.customEvent.trigger(nodes['calendarContainer'], 'destruct', {
                'direction' : 'child',
                'self' : false
            });
            unsetEvents();
            that.removeFromStack();
        }
        return that;
    };

    that.get = function(format){
        format = !cm.isUndefined(format) ? format : that.format;
        if(that.date || that.params['setEmptyDateByFormat']){
            return cm.dateFormat(that.date, format, that.strings);
        }else{
            return '';
        }
    };

    that.getDate = function(){
        return that.date;
    };

    that.getFullYear = function(){
        return that.date? that.date.getFullYear() : null;
    };

    that.getMonth = function(){
        return that.date? that.date.getMonth() : null;
    };

    that.getDay = function(){
        return that.date? that.date.getDate() : null;
    };

    that.getHours = function(){
        return that.date? that.date.getHours() : null;
    };

    that.getMinutes = function(){
        return that.date? that.date.getMinutes() : null;
    };

    that.set = function(str, format, triggerEvents){
        format = !cm.isUndefined(format) ? format : that.format;
        triggerEvents = !cm.isUndefined(triggerEvents) ? triggerEvents : true;
        // Get date
        var pattern = cm.dateFormat(false, format, that.lang());
        if(cm.isEmpty(str) || str === pattern){
            that.clear();
            return that;
        }else if(cm.isDate(str)){
            that.date = str;
        }else{
            that.date = cm.parseDate(str, format);
        }
        // Set parameters into components
        components['calendar'].set(that.date.getFullYear(), that.date.getMonth(), false);
        if(that.params['isDateTime']){
            components['time'].set(that.date, null, false);
        }
        // Set date
        set(triggerEvents);
        return that;
    };

    that.clear = function(triggerEvents){
        triggerEvents = !cm.isUndefined(triggerEvents) ? triggerEvents : true;
        // Clear date
        that.date = null;
        // Clear components
        components['calendar'].clear(false);
        if(that.params['isDateTime']){
            components['time'].clear(false);
        }
        // Set date
        set(false);
        // Trigger events
        if(triggerEvents){
            that.triggerEvent('onClear', that.value);
            onChange();
        }
        return that;
    };

    that.disable = function(){
        that.disabled = true;
        cm.addClass(nodes['container'], 'disabled');
        nodes['input'].disabled = true;
        components['menu'].disable();
        return that;
    };

    that.enable = function(){
        that.disabled = false;
        cm.removeClass(nodes['container'], 'disabled');
        nodes['input'].disabled = false;
        components['menu'].enable();
        return that;
    };

    that.getNodes = function(key){
        return nodes[key] || nodes;
    };

    init();
});

/* ****** FORM FIELD COMPONENT ******* */

Com.FormFields.add('date-picker', {
    'node' : cm.node('input', {'type' : 'text'}),
    'fieldConstructor' : 'Com.AbstractFormField',
    'constructor' : 'Com.Datepicker'
});

cm.define('Com.DateSelect', {
    'modules' : [
        'Params',
        'DataConfig',
        'Langs',
        'Events',
        'Structure',
        'Stack'
    ],
    'events' : [
        'onSelect',
        'onChange'
    ],
    'params' : {
        'input' : null,                                 // Deprecated, use 'node' parameter instead.
        'node' : cm.node('input', {'type' : 'text'}),
        'name' : '',
        'embedStructure' : 'replace',
        'container' : null,
        'fields' : ['year', 'month', 'day'],
        'format' : 'cm._config.dateFormat',
        'startYear' : 1950,                             // number | current
        'endYear' : 'current + 10',                     // number | current
        'renderSelectsInBody' : true,
        'fieldSizes' : {
            'year' : 'small',
            'month' : 'medium',
            'day' : 'x-small'
        }
    },
    'strings' : {
        'Day' : 'Day',
        'Month' : 'Month',
        'Year' : 'Year',
        'months' : ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
    }
},
function(params){
    var that = this,
        nodes = {},
        defaultDate = {
            'day' : '00',
            'month' : '00',
            'year' : '0000'
        };

    that.components = {};
    that.options = {};
    that.isDestructed = false;
    that.previous = cm.clone(defaultDate);
    that.selected = cm.clone(defaultDate);

    var init = function(){
        that.setParams(params);
        preValidateParams();
        that.convertEvents(that.params['events']);
        that.getDataConfig(that.params['node']);
        validateParams();
        render();
        that.addToStack(nodes['container']);
        // Set selected date
        set(that.params['node'].value);
    };

    var preValidateParams = function(){
        if(cm.isNode(that.params['input'])){
            that.params['node'] = that.params['input'];
        }
    };

    var validateParams = function(){
        if(cm.isNode(that.params['node'])){
            that.params['name'] = that.params['node'].getAttribute('name') || that.params['name'];
        }
        if(that.params['value'] === 'now'){
            that.params['value'] = new Date();
        }
        if(/current/.test(that.params['startYear'])){
            that.params['startYear'] = eval(cm.strReplace(that.params['startYear'], {'current' : new Date().getFullYear()}));
        }
        if(/current/.test(that.params['endYear'])){
            that.params['endYear'] = eval(cm.strReplace(that.params['endYear'], {'current' : new Date().getFullYear()}));
        }
    };

    var render = function(){
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__dateselect'},
            nodes['hidden'] = cm.node('input', {'type' : 'hidden'}),
            cm.node('div', {'class' : 'pt__toolbar bottom is-not-adaptive'},
                cm.node('div', {'class' : 'inner clear'},
                    nodes['fields'] = cm.node('ul', {'class' : 'group is-adaptive-flex'})
                )
            )
        );
        renderFields();
        // Attributes
        if(that.params['name']){
            nodes['hidden'].setAttribute('name', that.params['name']);
        }
        // Append
        that.embedStructure(nodes['container']);
    };

    var renderFields = function(){
        cm.forEach(that.params['fields'], function(item){
            switch(item){
                case 'year':
                    renderYearField();
                    break;
                case 'month':
                    renderMonthField();
                    break;
                case 'day':
                    renderDayField();
                    break;
            }
        });
    };

    var renderYearField = function(){
        // Structure
        nodes['year'] = cm.node('li', {'class' : 'is-field'});
        cm.addClass(nodes['year'], that.params['fieldSizes']['year']);
        cm.appendChild(nodes['year'], nodes['fields']);
        // Render component
        that.options.year = [
            {'value' : '0000', 'text' : that.lang('Year'), 'placeholder' : true}
        ];
        for(var i = that.params['endYear']; i >= that.params['startYear']; i--){
            that.options.year.push({'value' : i, 'text' : i});
        }
        that.components.year = new Com.Select({
            'container' : nodes['year'],
            'options' : that.options.year,
            'renderInBody' : that.params['renderSelectsInBody'],
            'events' : {
                'onChange' : function(select, value){
                    that.previous = cm.clone(that.selected);
                    that.selected.year = value;
                    setMisc(true);
                }
            }
        });
    };

    var renderMonthField = function(){
        // Structure
        nodes['month'] = cm.node('li', {'class' : 'is-field'});
        cm.addClass(nodes['month'], that.params['fieldSizes']['month']);
        cm.appendChild(nodes['month'], nodes['fields']);
        // Render component
        that.options.month = [
            {'value' : '00', 'text' : that.lang('Month'), 'placeholder' : true}
        ];
        cm.forEach(that.lang('months'), function(month, i){
            that.options.month.push({'value' : cm.addLeadZero(parseInt(i + 1)), 'text' : month});
        });
        that.components.month = new Com.Select({
            'container' : nodes['month'],
            'options' : that.options.month,
            'renderInBody' : that.params['renderSelectsInBody'],
            'events' : {
                'onChange' : function(select, value){
                    that.previous = cm.clone(that.selected);
                    that.selected.month = value;
                    setMisc(true);
                }
            }
        });
    };

    var renderDayField = function(){
        // Structure
        nodes['day'] = cm.node('li', {'class' : 'is-field'});
        cm.addClass(nodes['day'], that.params['fieldSizes']['day']);
        cm.appendChild(nodes['day'], nodes['fields']);
        // Render component
        that.options.day = [
            {'value' : '00', 'text' : that.lang('Day'), 'placeholder' : true, 'i' : 0}
        ];
        for(var i = 1; i <= 31; i++){
            that.options.day.push({'value' : cm.addLeadZero(i), 'text' : i, 'i' : i});
        }
        that.components.day = new Com.Select({
            'container' : nodes['day'],
            'options' : that.options.day,
            'renderInBody' : that.params['renderSelectsInBody'],
            'events' : {
                'onChange' :  function(select, value){
                    that.previous = cm.clone(that.selected);
                    that.selected.day = value;
                    setMisc(true);
                }
            }
        });
    };

    var set = function(str, execute){
        that.previous = cm.clone(that.selected);
        if(!str || str === toStr(defaultDate)){
            that.selected = cm.clone(defaultDate);
        }else{
            if(str instanceof Date){
                that.selected = fromStr(cm.parseDate(str));
            }else{
                that.selected = fromStr(str);
            }
        }
        that.components.day && that.components.day.set(that.selected.day, false);
        that.components.month && that.components.month.set(that.selected.month, false);
        that.components.year && that.components.year.set(that.selected.year, false);
        setMisc(execute);
    };

    var setMisc = function(execute){
        // Set hidden value
        nodes['hidden'].value = toStr(that.selected);

        // Show / hide day options
        if (that.components.day) {
            var year = that.selected.year === '0000' ? 2000 : that.selected.year;
            var date = new Date(year, that.selected.month, 0).getDate();
            cm.forEach(that.options.day, function(option) {
                that.components.day.toggleOptionVisibility(option.value, (option.i <= date));
            });
            if (parseInt(that.selected.day) > date) {
                that.components.day.set('00');
            }
        }

        // Trigger events
        if(execute){
            that.triggerEvent('onSelect', toStr(that.selected));
            if(toStr(that.selected) !== toStr(that.previous)){
                that.triggerEvent('onChange', toStr(that.selected));
            }
        }
    };

    var fromStr = function(str, format){
        var o = cm.clone(defaultDate),
            convertFormats = {
                '%Y' : 'YYYY',
                '%m' : 'mm',
                '%d' : 'dd'
            },
            formats = {
                'YYYY' : function(value){
                    o['year'] = value;
                },
                'mm' : function(value){
                    o['month'] = value;
                },
                'dd' : function(value){
                    o['day'] = value;
                }
            },
            fromIndex = 0;
        format = format || that.params['format'];
        // Parse
        cm.forEach(convertFormats, function(item, key){
            format = format.replace(key, item);
        });
        cm.forEach(formats, function(item, key){
            fromIndex = format.indexOf(key);
            while(fromIndex != -1){
                item(str.substr(fromIndex, key.length));
                fromIndex = format.indexOf(key, fromIndex + 1);
            }
        });
        return o;
    };

    var toStr = function(o, format){
        var str = format || that.params['format'],
            formats = function(o){
                return {
                    '%Y' : function(){
                        return o['year'];
                    },
                    '%m' : function(){
                        return o['month'];
                    },
                    '%d' : function(){
                        return o['day'];
                    }
                };
            };
        cm.forEach(formats(o), function(item, key){
            str = str.replace(key, item);
        });
        return str;
    };

    /* ******* PUBLIC ******* */

    that.destruct = function(){
        var that = this;
        if(!that.isDestructed){
            that.isDestructed = true;
            that.removeFromStack();
        }
        return that;
    };

    that.get = function(format){
        format = format || that.params['format'];
        return toStr(that.selected, format);
    };

    that.getDate = function(){
        return that.selected;
    };

    that.set = function(str){
        set(str, true);
        return that;
    };

    init();
});

/* ****** FORM FIELD COMPONENT ******* */

Com.FormFields.add('date-select', {
    'node' : cm.node('input', {'type' : 'text'}),
    'fieldConstructor' : 'Com.AbstractFormField',
    'constructor' : 'Com.DateSelect'
});

cm.define('Com.FileInput', {
    'extend' : 'Com.AbstractInput',
    'params' : {
        'controllerEvents' : true,
        'embedStructure' : 'replace',
        'hiddenType' : 'textarea',

        'className' : 'com__file-input',
        'size' : 'full',                     // default, full, custom
        'showLink' : true,
        'showFilename' : true,
        'showClearButton' : true,
        'autoOpen' : false,
        'placeholder' : null,
        'buttonsAdaptive' : false,

        'defaultValue' : '',
        'accept' : [],                      // empty - accept all, example: ['image/png', 'image/jpeg']
        'acceptSizes' : {                   // file size, example: {min: 0, max: 0}
            'min': 0,
            'max': 0,
        },
        'readValueType' : 'base64',         // base64 | binary
        'outputValueType' : 'object',       // file | object

        'local' : true,
        'fileManager' : false,
        'fileManagerConstructor' : 'Com.AbstractFileManagerContainer',
        'fileManagerParams' : {
            'constructorParams' : {
                'max' : 1
            }
        },

        'fileUploader' : false,
        'fileUploaderConstructor' : 'Com.FileUploaderContainer',
        'fileUploaderParams' : {
            'constructorParams' : {
                'max' : 1
            }
        },

        'dropzone' : true,
        'dropzoneConstructor' : 'Com.FileDropzone',
        'dropzoneParams' : {
            'embedStructure' : 'append',
            'max' : 1,
            'rollover' : true
        },

        'fileReaderConstructor' : 'Com.FileReader',
        'fileReaderParams' : {
            'readOnRender': false
        }
    },
    'strings' : {
        'browse' : 'Browse',
        'browse_local' : 'Browse Local',
        'browse_filemanager' : 'Browse File Manager',
        'remove' : 'Remove',
        'open' : 'Open',
        'errors': {
            'accept': 'File type is not accepted',
            'sizes': 'File size does not meet requirements',
        }
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractInput.apply(that, arguments);
});

cm.getConstructor('Com.FileInput', function(classConstructor, className, classProto, classInherit){
    classProto.construct = function(){
        var that = this;
        // Bind context to methods
        that.browseHandler = that.browse.bind(that);
        that.browseActionHandler = that.browseAction.bind(that);
        that.processFilesHandler = that.processFiles.bind(that);
        // Call parent method
        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.onInitComponentsStart = function(){
        var that = this;
        cm.getConstructor(that.params['fileReaderConstructor'], function(classConstructor){
            that.components['validator'] = new classConstructor(that.params['fileReaderParams']);
        });
    };

    classProto.onValidateParamsEnd = function(){
        var that = this;
        // Validate Language Strings
        that.setLangs({
            '_browse_local' : that.params['fileManager'] ? that.lang('browse_local') : that.lang('browse'),
            '_browse_filemanager' : that.params['local'] ? that.lang('browse_filemanager') : that.lang('browse')
        });
        // Dropzone
        that.params['dropzone'] = !that.params['local'] ? false : that.params['dropzone'];
        // File Uploader
        that.params['fileUploaderParams']['openOnConstruct'] = that.params['autoOpen'];
        that.params['fileUploaderParams']['constructorParams']['local'] = that.params['local'];
        that.params['fileUploaderParams']['constructorParams']['fileManager'] = that.params['fileManager'];
        // Other
        that.params['fileReaderParams']['readValueType'] = that.params['readValueType'];
        that.params['local'] = that.params['fileUploader'] ? false : that.params['local'];
        that.params['fileManagerParams']['openOnConstruct'] = that.params['autoOpen'];
        that.params['fileManager'] = that.params['fileUploader'] ? false : that.params['fileManager'];
    };

    classProto.onReset = function(){
        var that = this;
        // Release file object url to clear from memory
        that.releaseFileURL();
    };

    classProto.onDestruct = function(){
        var that = this;
        // Release file object url to clear from memory
        that.releaseFileURL();
    };

    /*** VIEW MODEL ***/

    classProto.renderViewModel = function(){
        var that = this;
        // Call parent method - renderViewModel
        classInherit.prototype.renderViewModel.apply(that, arguments);
        // Init FilerReader
        cm.getConstructor(that.params['fileReaderConstructor'], function(classConstructor){
            that.components['reader'] = new classConstructor(that.params['fileReaderParams']);
            that.components['reader'].addEvent('onReadSuccess', function(my, item){
                that.set(item, true);
            });
        });
        // Init Dropzone
        if(that.params['dropzone']){
            cm.getConstructor(that.params['dropzoneConstructor'], function(classConstructor){
                that.components['dropzone'] = new classConstructor(
                    cm.merge(that.params['dropzoneParams'], {
                        'disabled' : that.params['disabled'],
                        'container' : that.nodes['content']['inner'],
                        'target' : that.nodes['content']['content']
                    })
                );
                that.components['dropzone'].addEvent('onDrop', function(my, data){
                    that.processFiles(data);
                });
            });
        }
        // Init File Manager
        if(that.params['fileManager']){
            cm.getConstructor(that.params['fileManagerConstructor'], function(classConstructor){
                that.components['fileManager'] = new classConstructor(
                    cm.merge(that.params['fileManagerParams'], {
                        'node' : that.nodes['content']['browseFileManager']
                    })
                );
                that.components['fileManager'].addEvent('onComplete', function(my, data){
                    that.processFiles(data);
                });
            });
        }
        // Init File Uploader
        if(that.params['fileUploader']){
            cm.getConstructor(that.params['fileUploaderConstructor'], function(classConstructor){
                that.components['fileUploader'] = new classConstructor(
                    cm.merge(that.params['fileUploaderParams'], {
                        'node' : that.nodes['content']['browseFileUploader']
                    })
                );
                that.components['fileUploader'].addEvent('onComplete', function(my, data){
                    that.processFiles(data);
                });
            });
        }
    };

    classProto.renderContent = function(){
        var that = this,
            nodes = {};
        that.nodes['content'] = nodes;
        that.triggerEvent('onRenderContentStart');
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__file-input__content'},
            nodes['inner'] = cm.node('div', {'class' : 'inner'},
                nodes['content'] = cm.node('div', {'class' : 'com__file-input__holder'},
                    nodes['buttons'] = cm.node('div', {'class' : 'pt__file-line'},
                        nodes['buttonsInner'] = cm.node('div', {'class' : 'inner'},
                            nodes['label'] = cm.node('div', {'class' : 'label'}),
                            nodes['placeholder'] = cm.node('div', {'class' : 'label label-placeholder', 'innerHTML' : that.params['placeholder']})
                        )
                    )
                )
            )
        );

        // Render Buttons
        that.renderButtons();

        // Events
        that.triggerEvent('onRenderContentProcess');
        that.triggerEvent('onRenderContentEnd');

        // Export
        return nodes['container'];
    };

    classProto.renderLocalInput = function() {
        var that = this;
        that.nodes['content']['input'] = cm.node('input', {'class': 'input__browse', 'type' : 'file'});
        if(!cm.isEmpty(that.params.accept) && cm.isArray(that.params.accept)){
            that.nodes['content']['input'].accept = that.params['accept'].join(',');
        }
        cm.addEvent(that.nodes['content']['input'], 'change', that.browseActionHandler);
        cm.insertFirst(that.nodes['content']['input'], that.nodes['content']['content']);
    };

    classProto.renderButtons = function() {
        var that = this;

        // Clear button
        that.nodes['content']['clear'] = cm.node('button', {'type' : 'button', 'class' : 'button button-primary'}, that.lang('remove'));
        cm.click.add(that.nodes['content']['clear'], that.clearEventHandler);
        cm.insertFirst(that.nodes['content']['clear'], that.nodes['content']['buttonsInner']);
        if(!that.params['showClearButton']){
            cm.addClass(that.nodes['content']['clear'], 'is-hidden');
        }

        // Local browse button
        if(that.params['local']){
            that.renderLocalInput();
            that.nodes['content']['browseLocal'] = cm.node('button', {'type' : 'button', 'class' : 'button button-primary'}, that.lang('_browse_local'));
            cm.click.add(that.nodes['content']['browseLocal'], that.browseHandler);
            cm.insertFirst(that.nodes['content']['browseLocal'], that.nodes['content']['buttonsInner']);
        }

        // File manager browse button
        if(that.params['fileManager']){
            that.nodes['content']['browseFileManager'] = cm.node('button', {'type' : 'button', 'class' : 'button button-primary'}, that.lang('_browse_filemanager'));
            cm.insertFirst(that.nodes['content']['browseFileManager'], that.nodes['content']['buttonsInner']);
        }

        // File browser browse button
        if(that.params['fileUploader']){
            that.nodes['content']['browseFileUploader'] = cm.node('button', {'type' : 'button', 'class' : 'button button-primary'}, that.lang('browse'));
            cm.insertFirst(that.nodes['content']['browseFileUploader'], that.nodes['content']['buttonsInner']);
        }
    };

    /* *** PROCESS FILES *** */

    classProto.browseAction = function(e){
        var that = this,
            file = e.target.files[0];
        cm.preventDefault(e);
        // Read File
        that.processFiles(file);
        return that;
    };

    classProto.processFiles = function(data){
        var that = this;
        if(cm.isFile(data)){
            that.components['reader'].read(data);
        }else if(cm.isArray(data)){
            cm.forEach(data, function(file){
                that.processFiles(file);
            })
        }else if(!cm.isEmpty(data)){
            that.set(data, true);
        }
        return that;
    };

    classProto.releaseFileURL = function(){
        var that = this;
        if(!cm.isEmpty(that.value) && !cm.isEmpty(that.value['url'])){
            window.URL.revokeObjectURL(that.value['url']);
        }
    };

    classProto.isAcceptableFileFormat = function(item){
        var that = this,
            isValid = true;
        if (
            cm.isEmpty(that.params.accept) || !cm.isArray(that.params.accept) ||
            cm.isEmpty(item) || cm.isEmpty(item.file)
        ) {
            isValid = true;
        } else {
            isValid = cm.inArray(that.params.accept, item.type);
        }
        if (that.params.formField) {
            if (!isValid) {
                that.params.formField.renderError(that.msg('errors.accept'));
            } else {
                that.params.formField.clearError();
            }
        }
        return isValid;
    };

    classProto.isAcceptableFileSizes = function(item){
        var that = this,
            isValid = true;
        if (
            cm.isEmpty(that.params.acceptSizes) ||
            cm.isEmpty(item) || cm.isEmpty(item.file)
        ) {
            isValid = true;
        } else {
            isValid = item.size >= that.params.acceptSizes.min && (that.params.acceptSizes.max === 0 || item.size <= that.params.acceptSizes.max);
        }
        if (that.params.formField) {
            if (!isValid) {
                that.params.formField.renderError(that.msg('errors.sizes'));
            } else {
                that.params.formField.clearError();
            }
        }
        return isValid;
    };

    /* *** DATA *** */

    classProto.get = function(){
        var that = this,
            value;
        if(that.params['outputValueType'] === 'file'){
            value = that.value['file'] || that.value['value'] || that.value || '';
        }else{
            value = that.value  || '';
        }
        return value;
    };

    classProto.validateValue = function(value){
        var that = this,
            item = that.components.validator.validate(value);
        if (
            (cm.isEmpty(item.value) && cm.isEmpty(item.file)) ||
            !that.isAcceptableFileFormat(item) ||
            !that.isAcceptableFileSizes(item)
        ) {
            return that.params.defaultValue;
        }
        return item;
    };

    classProto.setData = function(){
        var that = this;
        if(cm.isEmpty(that.value)){
            if(!cm.isEmpty(that.params['placeholder'])){
                cm.removeClass(that.nodes['content']['placeholder'], 'is-hidden');
            }else{
                cm.addClass(that.nodes['content']['placeholder'], 'is-hidden');
            }
            cm.clearNode(that.nodes['content']['label']);
            cm.addClass(that.nodes['content']['label'], 'is-hidden');
            if(that.params['showClearButton']){
                cm.removeClass(that.nodes['content']['browseLocal'], 'is-hidden');
                cm.removeClass(that.nodes['content']['browseFileManager'], 'is-hidden');
                cm.removeClass(that.nodes['content']['browseFileUploader'], 'is-hidden');
                cm.addClass(that.nodes['content']['clear'], 'is-hidden');
            }
            // Adaptive
            if(that.params['buttonsAdaptive']){
                cm.addClass(that.nodes['content']['buttons'], 'is-adaptive');
            }
        }else{
            cm.addClass(that.nodes['content']['placeholder'], 'is-hidden');
            cm.clearNode(that.nodes['content']['label']);
            cm.removeClass(that.nodes['content']['label'], 'is-hidden');
            if(that.params['showFilename']){
                if(that.params['showLink']){
                    that.nodes['content']['link'] = cm.node('a', {'target' : '_blank', 'href' : that.value['url'], 'title' : that.lang('open')}, that.value['name']);
                }else{
                    that.nodes['content']['link'] = cm.textNode(that.value['name']);
                }
                cm.appendChild(that.nodes['content']['link'], that.nodes['content']['label']);
            }
            if(that.params['showClearButton']){
                cm.addClass(that.nodes['content']['browseLocal'], 'is-hidden');
                cm.addClass(that.nodes['content']['browseFileManager'], 'is-hidden');
                cm.addClass(that.nodes['content']['browseFileUploader'], 'is-hidden');
                cm.removeClass(that.nodes['content']['clear'], 'is-hidden');
            }
            // Adaptive
            if(that.params['buttonsAdaptive']){
                cm.removeClass(that.nodes['content']['buttons'], 'is-adaptive');
            }
        }
        return that;
    };

    /* *** PUBLIC *** */

    classProto.browse = function(){
        var that = this;
        if(that.params['local']){
            that.nodes['content']['input'].click();
        }
        return that;
    };
});

/* ****** FORM FIELD COMPONENT ******* */

Com.FormFields.add('file', {
    'node' : cm.node('input', {'type' : 'text'}),
    'value' : '',
    'defaultValue' : '',
    'fieldConstructor' : 'Com.AbstractFormField',
    'constructor' : 'Com.FileInput'
});

cm.define('Com.HiddenStoreField', {
    'extend' : 'Com.AbstractInputContainer',
    'params' : {
        'constructor' : 'Com.AbstractInput',
        'storeRaw' : false,
        'triggerName' : null
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractInputContainer.apply(that, arguments);
});

cm.getConstructor('Com.HiddenStoreField', function(classConstructor, className, classProto, classInherit){
    classProto.onConstructStart = function(){
        var that = this;
        // Binds
        that.processDataHandler = that.processData.bind(that);
    };

    classProto.onRenderController = function(){
        var that = this;
        // Get trigger field
        var field = that.components['form'].getField(that.params['triggerName']);
        if(field){
            that.components['trigger'] = field['controller'];
            that.components['trigger'].addEvent('onChange', that.processDataHandler);
            that.components['trigger'].addEvent('onReset', that.resetHandler);
        }
    };

    classProto.processData = function(){
        var that = this,
            data = that.params['storeRaw'] ? that.components['trigger'].getRaw() : that.components['trigger'].get();
        that.set(data);
    };
});

/* ****** FORM FIELD COMPONENT ******* */

Com.FormFields.add('hidden-store', {
    'node' : cm.node('input', {'type' : 'hidden'}),
    'visible' : false,
    'fieldConstructor' : 'Com.AbstractFormField',
    'constructor' : 'Com.HiddenStoreField'
});
cm.define('Com.ImageInput', {
    extend: 'Com.FileInput',
    params: {
        hiddenType: 'textarea',

        className: 'com__image-input',
        size: 'default',                                    // default, full, custom
        fit: 'cover',
        aspect: false,                                      // 1x1, 3x2, etc
        types: {
            image: cm._config.fileTypes.image,
            video: cm._config.fileTypes.video,
            embed: cm._config.fileTypes.embed,
        },
        showLabel: true,
        showLink: true,

        accept: [],                                         // empty - accept all, example: ['image/png', 'image/jpeg']
        acceptDimensions: {                                 // image dimensions, example: {minWidth: 0, minHeight: 0}
            minWidth: 0,
            minHeight: 0,
        },

        preview: true,
        previewConstructor: 'Com.ImagePreviewContainer',
        previewParams: {}
    },
    strings: {
        preview: 'Preview',
        errors: {
            dimensions: 'Image dimensions do not meet requirements'
        }
    }
},
function() {
    Com.FileInput.apply(this, arguments);
});

cm.getConstructor('Com.ImageInput', function(classConstructor, className, classProto, classInherit) {
    classProto.renderViewModel = function() {
        var that = this;

        // Call parent method
        classInherit.prototype.renderViewModel.apply(that, arguments);

        // Init Preview
        if (that.params.preview) {
            cm.getConstructor(that.params.previewConstructor, function(classConstructor) {
                that.components.preview = new classConstructor(
                    cm.merge(that.params.previewParams, {
                        node: that.nodes.content.previewButton
                    })
                );
            });
        }
    };

    classProto.renderContent = function() {
        var that = this;
        that.triggerEvent('onRenderContentStart');

        // Structure
        var nodes = {};
        that.nodes.content = nodes;
        nodes.container = cm.node('div', {classes: 'com__image-input__content'},
            nodes.inner = cm.node('div', {classes: 'inner'},
                nodes.content = cm.node('div', {classes: 'input__holder'},
                    cm.node('div', {classes: 'input__cover'},
                        nodes.label = cm.node('div', {classes: 'input__label'}),
                        nodes.buttonsInner = cm.node('div', {classes: 'input__buttons'})
                    ),
                    nodes.imageContainer = cm.node('div', {classes: 'pt__image'},
                        nodes.imageHolder = cm.node('div', {classes: 'inner'})
                    )
                )
            )
        );

        // Image Preview size
        if (that.params.aspect) {
            cm.addClass(nodes.imageContainer, 'is-background has-aspect');
            cm.addClass(nodes.imageContainer, ['cm__aspect', that.params.aspect].join('-'));
        }
        if (that.params.fit) {
            cm.addClass(nodes.imageContainer, ['is', that.params.fit].join('-'));
        }

        // Render Buttons
        that.renderButtons();

        // Events
        that.triggerEvent('onRenderContentProcess');
        that.triggerEvent('onRenderContentEnd');

        // Export
        return nodes.container;
    };

    classProto.renderButtons = function() {
        var that = this;

        // Clear button
        that.nodes.content.clearButton = cm.node('button', {type: 'button', classes: ['button', 'button-danger', 'input__button', 'input__button--remove']},
            cm.node('span', that.msg('remove'))
        );
        cm.click.add(that.nodes.content.clearButton, that.clearEventHandler);
        cm.insertFirst(that.nodes.content.clearButton, that.nodes.content.buttonsInner);

        // Preview button
        if (that.params.preview) {
            that.nodes.content.previewButton = cm.node('button', {type: 'button', classes: ['button', 'button-primary', 'input__button', 'input__button--preview']},
                cm.node('span', that.msg('preview'))
            );
            cm.insertFirst(that.nodes.content.previewButton, that.nodes.content.buttonsInner);
        }

        // Local browse button
        if (that.params.local) {
            that.renderLocalInput();
            that.nodes.content.browseLocal = cm.node('button', {type: 'button', classes: ['button', 'button-primary', 'input__button', 'input__button--browse']},
                cm.node('span', that.msg('_browse_local'))
            );
            cm.click.add(that.nodes.content.browseLocal, that.browseHandler);
            cm.insertFirst(that.nodes.content.browseLocal, that.nodes.content.buttonsInner);
        }

        // File manager browse button
        if (that.params.fileManager) {
            that.nodes.content.browseFileManager = cm.node('button', {type: 'button', classes: ['button', 'button-primary', 'input__button', 'input__button--browse']},
                cm.node('span', that.msg('_browse_filemanager'))
            );
            cm.insertFirst(that.nodes.content.browseFileManager, that.nodes.content.buttonsInner);
        }

        // File browser browse button
        if (that.params.fileUploader) {
            that.nodes.content.browseFileUploader = cm.node('button', {type: 'button', classes: ['button', 'button-primary', 'input__button', 'input__button--browse']},
                cm.node('span', that.msg('browse'))
            );
            cm.insertFirst(that.nodes.content.browseFileUploader, that.nodes.content.buttonsInner);
        }
    };

    /******* PROCESS FILES *******/

    classProto.isAcceptableImageDimensions = function(item) {
        var that = this,
            isValid = true;
        if (
            cm.isEmpty(that.params.acceptDimensions) ||
            cm.isEmpty(item) || cm.isEmpty(item.file) || !item._isLoaded ||
            !that.params.types.image.test(item.type) || item.type === 'image/svg+xml'
        ) {
            isValid = true;
        } else {
            isValid = item.width >= that.params.acceptDimensions.minWidth && item.height >= that.params.acceptDimensions.minHeight;
        }
        if (that.params.formField) {
            if (!isValid) {
                that.params.formField.renderError(that.msg('errors.dimensions'));
            } else {
                that.params.formField.clearError();
            }
        }
        return isValid;
    };

    /******* DATA *******/

    classProto.validateValue = function(value){
        var that = this,
            item = that.components.validator.validate(value);
        if (
            (cm.isEmpty(item.value) && cm.isEmpty(item.file)) ||
            !that.isAcceptableFileFormat(item) ||
            !that.isAcceptableFileSizes(item) ||
            !that.isAcceptableImageDimensions(item)
        ) {
            return that.params.defaultValue;
        }
        return item;
    };

    classProto.setData = function() {
        var that = this;
        if (cm.isEmpty(that.value)) {
            // Label
            cm.clearNode(that.nodes.content.label);
            cm.addClass(that.nodes.content.label, 'is-hidden');
            // Hde clear button
            cm.addClass(that.nodes.content.clearButton, 'is-hidden');
        } else {
            // Label
            cm.clearNode(that.nodes.content.label);
            if (that.params.showLabel) {
                if (that.params.showLink) {
                    that.nodes.content.link = cm.node('a', {target: '_blank', href: that.value.url, title: that.msg('open')}, that.value.name);
                } else {
                    that.nodes.content.link = cm.textNode(that.value.name);
                }
                cm.appendChild(that.nodes.content.link, that.nodes.content.label);
                cm.removeClass(that.nodes.content.label, 'is-hidden');
            }
            // Show clear button
            cm.removeClass(that.nodes.content.clearButton, 'is-hidden');
        }

        // Set preview
        that.setPreviewData();
    };

    classProto.setPreviewData = function() {
        var that = this;

        // Clear
        cm.remove(that.nodes.content.image);
        cm.remove(that.nodes.content.video);

        // Set
        if (cm.isEmpty(that.value)) {
            that.components.preview && that.components.preview.clear();
            cm.addClass(that.nodes.content.previewButton, 'is-hidden');
            cm.addClass(that.nodes.content.imageContainer, 'is-default-image');
            that.renderPreviewDefault();
        } else {
            that.components.preview && that.components.preview.set(that.value);
            cm.removeClass(that.nodes.content.previewButton, 'is-hidden');
            cm.removeClass(that.nodes.content.imageContainer, 'is-default-image');
            if(that.params.types.video.test(that.value.type)) {
                that.renderPreviewVideo();
            }else{
                that.renderPreviewImage();
            }
        }
    };

    classProto.renderPreviewDefault = function() {
        var that = this;
        // Structure
        that.nodes.content.image = cm.node('div', {classes: 'descr'});
        // Append
        cm.appendChild(that.nodes.content.image, that.nodes.content.imageHolder);
    };

    classProto.renderPreviewImage = function() {
        var that = this;

        // Structure
        that.nodes.content.image = cm.node('div', {classes: 'descr'});
        that.nodes.content.image.style.backgroundImage = cm.URLToCSSURL(that.value.url);

        // Append
        cm.appendChild(that.nodes.content.image, that.nodes.content.imageHolder);
    };

    classProto.renderPreviewVideo = function() {
        var that = this;

        // Structure
        that.nodes.content.video = cm.node('video', {classes: 'descr', preload: 'none', playsinline: true, controls: false, muted: true, tabindex: -1});
        that.nodes.content.video.controls = false;
        that.nodes.content.video.playsinline = true;
        that.nodes.content.video.playsInline = true;

        // Some browsers don't display the first video frame, so we need to enable autoplay
        that.nodes.content.video.muted = true;
        that.nodes.content.video.loop = true;
        that.nodes.content.video.autoplay = true;

        // And then pause the video after it loads
        cm.addEvent(that.nodes.content.video, 'loadeddata', function(){
            that.nodes.content.video.pause();
        });
        cm.addEvent(that.nodes.content.video, 'loadedmetadata', function(){
            that.nodes.content.video.pause();
        });
        cm.addEvent(that.nodes.content.video, 'canplay', function(){
            that.nodes.content.video.pause();
        });

        // Add video source
        that.nodes.content.videoSource = cm.node('source', {src: that.value.url});
        cm.appendChild(that.nodes.content.videoSource, that.nodes.content.video);

        // Append
        cm.appendChild(that.nodes.content.video, that.nodes.content.imageHolder);
    };
});

/****** FORM FIELD COMPONENT *******/

Com.FormFields.add('image', {
    node: cm.node('input', {type: 'text'}),
    value: '',
    defaultValue: '',
    fieldConstructor: 'Com.AbstractFormField',
    constructor: 'Com.ImageInput'
});

cm.define('Com.IndentInput', {
    'extend' : 'Com.AbstractInput',
    'params' : {
        'maxLength' : 3,
        'units' : 'px',
        'defaultValue' : '',
        'allowCustom' : false,
        'allowNegative' : false,
        'allowFloat' : false
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractInput.apply(that, arguments);
});

cm.getConstructor('Com.IndentInput', function(classConstructor, className, classProto, classInherit){
    classProto.construct = function(){
        var that = this;
        // Bind context to methods
        that.setValueHandler = that.setValue.bind(that);
        // Call parent method
        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.renderContent = function(){
        var that = this,
            params = {
                'allowNegative' : that.params['allowNegative'],
                'allowFloat' : that.params['allowFloat']
            },
            nodes = {};
        that.nodes['content'] = nodes;
        that.triggerEvent('onRenderContentStart');
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'pt__input'},
            nodes['input'] = cm.node('input', {'type' : 'text'})
        );
        // Placeholder
        if(!cm.isEmpty(that.params['placeholder'])){
            nodes['input'].placeholder = that.params['placeholder'];
        }
        // Min / Max length
        cm.setInputMaxLength(nodes['input'], that.params['maxLength'], that.params['max']);
        // Events
        that.triggerEvent('onRenderContentProcess');
        cm.addEvent(nodes['input'], 'blur', that.setValueHandler);
        cm.addEvent(nodes['input'], 'keypress', function(e){
            if(cm.isKeyCode(e.keyCode, 'enter')){
                cm.preventDefault(e);
                that.setValue();
                nodes['input'].blur();
            }
        });
        if(that.params['allowCustom']){
            cm.addEvent(nodes['input'], 'input', function(e){
                that.selectAction(nodes['input'].value, true);
            });
        }else{
            cm.allowOnlyNumbersInputEvent(nodes['input'], function(e, value){
                that.selectAction(that.validateValue(value), true);
            }, params);
        }
        that.triggerEvent('onRenderContentEnd');
        // Push
        return nodes['container'];
    };

    /* *** DATA VALUE *** */

    classProto.validateValue = function(value){
        var that = this;
        that.rawValue = !cm.isEmpty(value) ? value : that.params['defaultValue'];
        return cm.isEmpty(that.rawValue) || isNaN(that.rawValue) ? that.rawValue : (that.rawValue + that.params['units']);
    };

    classProto.setValue = function(triggerEvents){
        var that = this;
        triggerEvents = cm.isUndefined(triggerEvents)? true : triggerEvents;
        that.set(that.rawValue, triggerEvents);
        return that;
    };

    classProto.setData = function(){
        var that = this;
        that.nodes['content']['input'].value = that.rawValue;
        return that;
    };
});

/* ****** FORM FIELD COMPONENT ******* */

Com.FormFields.add('indent', {
    'node' : cm.node('input', {'type' : 'text'}),
    'fieldConstructor' : 'Com.AbstractFormField',
    'constructor' : 'Com.IndentInput'
});
cm.define('Com.Input', {
    'extend': 'Com.AbstractInput',
    'events': [
        'onInputStart',
        'onEnterPress',
        'onKeyPress',
        'onKeyDown',
        'onKeyUp',
        'onIconClick',
        'onFocus',
        'onBlur'
    ],
    'params': {
        'controllerEvents': true,
        'type': 'text',
        'inputmode': null,
        'trimValue': true,
        'limitValue' : true,
        'constraints' : {},
        'inputClasses': [],
        'lazy': false,
        'delay': 'cm._config.requestDelay',
        'icon': null,
        'iconTitle': null,
        'iconEvents': true,
        'iconInsertMethod': 'appendChild',
        'autoResize': false,
        'enterPressBehavior': false,
    }
},
function() {
    Com.AbstractInput.apply(this, arguments);
});

cm.getConstructor('Com.Input', function(classConstructor, className, classProto, classInherit) {
    classProto.construct = function() {
        var that = this;
        
        // Variables
        that.selectionStartInitial = null;
        that.selectionEndInitial = null;
        that.isFocus = false;
        that.wasFocus = false;
        that.lazyDelay = null;
        that.constraints = {};
        
        // Bind context to methods
        that.focusHandler = that.focus.bind(that);
        that.blurHandler = that.blur.bind(that);
        that.inputEventHandler = that.inputEvent.bind(that);
        that.focusEventHandler = that.focusEvent.bind(that);
        that.blurEventHandler = that.blurEvent.bind(that);
        that.setValueHandler = that.setValue.bind(that);
        that.selectValueHandler = that.selectValue.bind(that);
        that.lazyValueHandler = that.lazyValue.bind(that);
        that.inputKeyDownHanlder = that.inputKeyDown.bind(that);
        that.inputKeyUpHanlder = that.inputKeyUp.bind(that);
        that.inputKeyPressHanlder = that.inputKeyPress.bind(that);
        that.iconEventHanlder = that.iconEvent.bind(that);

        // Call parent method
        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.onValidateParamsStart = function() {
        var that = this;

        // Validate input \ change constraints
        cm.forEach(that.params.constraints, (handlers, eventName) => {
            cm.forEach(handlers, handler => that.addConstraint(eventName, handler));
        });
    };

    classProto.onEnable = function() {
        var that = this;
        that.nodes.content.input.disabled = false;
    };

    classProto.onDisable = function() {
        var that = this;
        that.nodes.content.input.disabled = true;
    };

    classProto.onAfterRender = function() {
        var that = this;
        
        // Autoresize textarea
        if (that.params.type === 'textarea' && that.params.autoResize) {
            cm.addClass(that.nodes.content.input, 'cm-autoresize');
            Part.Autoresize(that.nodes.container);
        }
    };

    /*** VIEW MODEL ***/

    classProto.renderContent = function() {
        var that = this;
        that.triggerEvent('onRenderContentStart');

        // Structure
        that.nodes.content = that.renderContentView();

        // Attributes
        that.renderContentAttributes();

        // Events
        that.triggerEvent('onRenderContentProcess');
        that.renderContentEvents();
        that.triggerEvent('onRenderContentEnd');

        // Push
        return that.nodes.content.container;
    };

    classProto.renderContentView = function() {
        var that = this;

        // Structure
        var nodes = {};
        nodes.container = cm.node('div', {classes: 'pt__input'},
            nodes.inner = cm.node('div', {classes: 'inner'})
        );

        // Input
        if (that.params.type === 'textarea') {
            nodes.input = cm.node('textarea', {classes: that.params.inputClasses});
            cm.addClass(nodes.container, 'pt__input--textarea');
            cm.addClass(that.nodes.container, 'com__input--textarea');
        } else {
            nodes.input = cm.node('input', {classes: that.params.inputClasses, type: that.params.type});
        }
        cm.appendChild(nodes.input, nodes.inner);

        // Icon
        if (that.params.icon) {
            cm.addClass(nodes.container, 'has-icon');
            if (cm.isNode(that.params.icon)) {
                nodes.icon = that.params.icon
            } else {
                nodes.icon = that.renderIconView();
            }
            if (!cm.isEmpty(that.params.iconTitle)) {
                nodes.icon.title = that.params.iconTitle;
            }
            cm[that.params.iconInsertMethod](nodes.icon, nodes.inner);
        }

        // Append
        return nodes;
    };

    classProto.renderContentAttributes = function() {
        var that = this;

        // Required
        that.nodes.content.input.required = that.params.required;
        
        // Min / Max length
        cm.setInputMinLength(that.nodes.content.input, that.params.minLength, that.params.min);
        cm.setInputMaxLength(that.nodes.content.input, that.params.maxLength, that.params.max, that.params.limitMaxLength);
        
        // Placeholder / Title
        if (!cm.isEmpty(that.params.placeholder)) {
            that.nodes.content.input.placeholder = that.params.placeholder;
            if (that.nodes.content.icon) {
                that.nodes.content.icon.title = that.params.placeholder;
            }
        }
        if (!cm.isEmpty(that.params.title)) {
            that.nodes.content.input.title = that.params.title;
            if (that.nodes.content.icon) {
                that.nodes.content.icon.title = that.params.title;
            }
        }
        if (!cm.isEmpty(that.params.ariaLabel)) {
            that.nodes.content.input.setAttribute('aria-label', that.params.ariaLabel);
        }

        // Attributes
        if (!cm.isEmpty(that.params.id)) {
            that.nodes.content.input.setAttribute('id', that.params.id);
        }
        if (!cm.isEmpty(that.params.inputmode)) {
            that.nodes.content.input.setAttribute('inputmode', that.params.inputmode);
        }
        if (!cm.isEmpty(that.params.autocomplete)) {
            that.nodes.content.input.setAttribute('autocomplete', that.params.autocomplete);
        }
        if (that.params.renderName) {
            that.nodes.content.input.name = that.params.visibleName || that.params.name;
        }
    };

    classProto.renderContentEvents = function() {
        var that = this;
        cm.addEvent(that.nodes.content.input, 'input', that.inputEventHandler);
        cm.addEvent(that.nodes.content.input, 'focus', that.focusEventHandler);
        cm.addEvent(that.nodes.content.input, 'blur', that.blurEventHandler);
        cm.addEvent(that.nodes.content.input, 'change', that.setValueHandler);
        cm.addEvent(that.nodes.content.input, 'keydown', that.inputKeyDownHanlder);
        cm.addEvent(that.nodes.content.input, 'keyup', that.inputKeyUpHanlder);
        cm.addEvent(that.nodes.content.input, 'keypress', that.inputKeyPressHanlder);
        if (that.params.iconEvents) {
            cm.addEvent(that.nodes.content.icon, 'mousedown', that.iconEventHanlder);
            cm.addEvent(that.nodes.content.icon, 'click', that.iconEventHanlder);
        }
    };

    /*** ICON ***/

    classProto.renderIconView = function() {
        var that = this;
        return cm.node('div', {classes: that.params.icon});
    };

    classProto.getIcon = function() {
        var that = this;
        return that.nodes.content.icon;
    };

    /*** EVENTS ***/

    classProto.inputKeyDown = function(e) {
        var that = this;
        that.triggerEvent('onKeyDown', that.value, e);
        that.selectionStartInitial = that.nodes.content.input.selectionStart;
        that.selectionEndInitial = that.nodes.content.input.selectionStart;
        that.triggerEvent('onInputStart', that.value);

        // Handle enter key
        if (cm.isKeyCode(e.keyCode, 'enter')) {
            // For input
            if (that.params.type !== 'textarea') {
                cm.preventDefault(e);
                that.setValue();
                that.blur();
                that.triggerEvent('onEnterPress', that.value);
            }

            // Special behavior for textarea: press Enter without Shift key for triggering onEnterPress event
            if (
                that.params.type === 'textarea' &&
                that.params.enterPressBehavior && (that.params.enterPressBehavior === 'all' || !e.shiftKey)
            ) {
                cm.preventDefault(e);
                that.setValue();
                that.blur();
                that.triggerEvent('onEnterPress', that.value);
            }
        }
    };

    classProto.inputKeyUp = function(e) {
        var that = this;
        that.triggerEvent('onKeyUp', that.value, e);
    };

    classProto.inputKeyPress = function(e) {
        var that = this;
        that.triggerEvent('onKeyPress', that.value, e);
    };

    classProto.inputEvent = function() {
        var that = this;
        that.execConstraint('onInput', false);
        that.selectValue(true);
        if (that.params['lazy']) {
            that.lazyValue(true);
        }
    };

    classProto.focusEvent = function() {
        var that = this;
        that.isFocus = true;
        that.execConstraint('onFocus', false);
        that.triggerEvent('onFocus', that.value);
    };

    classProto.blurEvent = function() {
        var that = this;
        that.isFocus = false;
        that.execConstraint('onBlur', false);
        that.setValue(true);
        that.triggerEvent('onBlur', that.value);
    };

    classProto.iconEvent = function(e) {
        var that = this;
        cm.preventDefault(e);
        if (e.type === 'mousedown') {
            that.wasFocus = that.isFocus;
        }
        if (e.type === 'click') {
            if (!that.wasFocus) {
                that.focus(true);
            }
            that.triggerEvent('onIconClick');
        }
    };

    /*** CONSTRAINT ***/

    classProto.addConstraint = function(eventName, handler) {
        var that = this;
        if (!that.constraints[eventName]) {
            that.constraints[eventName] = [];
        }
        if (cm.isFunction(handler)) {
            that.constraints[eventName] = cm.arrayAdd(that.constraints[eventName], handler);
        }
        return that;
    };

    classProto.removeConstraint = function(eventName, handler) {
        var that = this;
        if (!that.constraints[eventName]) {
            that.constraints[eventName] = [];
        }
        if (cm.isFunction(handler)) {
            that.constraints[eventName] = cm.arrayRemove(that.constraints[eventName], handler);
        }
        return that;
    };

    classProto.execConstraint = function(eventName, triggerEvents) {
        var that = this;
        if (!that.constraints[eventName]) {
            return that;
        }

        // Execute event handlers
        cm.forEach(that.constraints[eventName], handler => that.execConstraintHelper(handler));

        // Trigger events
        triggerEvents = cm.isUndefined(triggerEvents) ? true : triggerEvents;
        if (triggerEvents) {
            switch (eventName) {
                case 'onInput':
                    that.selectValue(true);
                    break;
                case 'onChange':
                    that.setValue(true);
                    break;
            }
        }
        return that;
    };

    classProto.execConstraintHelper = function(handler) {
        const that = this;
        if (!cm.isFunction(handler)) {
            return;
        }

        const selectionStart = that.nodes.content.input.selectionStart;
        const value = that.nodes.content.input.value;
        const valueBounded = handler(value);

        // Set bounded value
        that.nodes.content.input.value = valueBounded;

        // Restore caret position
        if (value.indexOf(valueBounded) > -1 || value === valueBounded) {
            that.nodes.content.input.setSelectionRange(selectionStart, selectionStart);
        } else {
            that.nodes.content.input.setSelectionRange(that.selectionStartInitial, that.selectionStartInitial);
        }
    };

    /*** DATA VALUE ***/

    classProto.validateValueHelper = function(value){
        var that = this;

        // Trim value
        if(!cm.isEmpty(value)){
            if (that.params.trimValue && cm.isString(value)) {
                value = value.trim();
            }
            if (that.params.limitValue && that.params.type === 'number') {
                value = cm.getMinMax(value, that.params.min, that.params.max, that.params.minLength, that.params.maxLength);
            }
        }

        // Call parent method
        return classInherit.prototype.validateValueHelper.call(that, value);
    };

    classProto.lazyValue = function(triggerEvents) {
        var that = this;
        triggerEvents = cm.isUndefined(triggerEvents) ? true : triggerEvents;
        that.lazyDelay && clearTimeout(that.lazyDelay);
        that.lazyDelay = setTimeout(function() {
            triggerEvents && that.setValue(true);
        }, that.params.delay);
    };

    classProto.setValue = function(triggerEvents) {
        var that = this,
            value = that.nodes.content.input.value;
        triggerEvents = cm.isUndefined(triggerEvents) ? true : triggerEvents;
        that.set(value, triggerEvents);
        return that;
    };

    classProto.selectValue = function(triggerEvents) {
        var that = this,
            value = that.nodes.content.input.value;
        triggerEvents = cm.isUndefined(triggerEvents) ? true : triggerEvents;
        that.selectAction(value, triggerEvents);
        return that;
    };

    classProto.setData = function(value) {
        var that = this;
        that.nodes.content.input.value = !cm.isUndefined(value) ? value : that.value;
        return that;
    };

    /******* PUBLIC *******/

    classProto.focus = function(selection) {
        var that = this;
        if (selection === true) {
            var value = that.nodes.content.input.value;
            that.nodes.content.input.setSelectionRange(0, value.length);
        }
        that.nodes.content.input.focus();
        return that;
    };

    classProto.blur = function() {
        var that = this;
        that.nodes.content.input.blur();
        return that;
    };
});

/* ****** FORM FIELD COMPONENT ******* */

Com.FormFields.add('input', {
    'node': cm.node('input', {'type': 'text'}),
    'value': '',
    'defaultValue': '',
    'fieldConstructor': 'Com.AbstractFormField',
    'constructor': 'Com.Input',
    'constructorParams': {
        'type': 'text'
    }
});

Com.FormFields.add('textarea', {
    'node': cm.node('textarea'),
    'value': '',
    'defaultValue': '',
    'fieldConstructor': 'Com.AbstractFormField',
    'constructor': 'Com.Input',
    'constructorParams': {
        'type': 'textarea'
    }
});

Com.FormFields.add('password', {
    'node': cm.node('input', {'type': 'password'}),
    'value': '',
    'defaultValue': '',
    'fieldConstructor': 'Com.AbstractFormField',
    'constructor': 'Com.Input',
    'constructorParams': {
        'type': 'password'
    }
});

Com.FormFields.add('email', {
    'node': cm.node('input', {'type': 'email'}),
    'value': '',
    'defaultValue': '',
    'fieldConstructor': 'Com.AbstractFormField',
    'constructor': 'Com.Input',
    'constructorParams': {
        'type': 'email'
    }
});

Com.FormFields.add('url', {
    'node': cm.node('input', {'type': 'url'}),
    'value': '',
    'defaultValue': '',
    'fieldConstructor': 'Com.AbstractFormField',
    'constructor': 'Com.Input',
    'constructorParams': {
        'type': 'url'
    }
});


Com.FormFields.add('search', {
    'node': cm.node('input', {'type': 'search', 'inputmode': 'search', 'autocomplete': 'off'}),
    'value': '',
    'defaultValue': '',
    'fieldConstructor': 'Com.AbstractFormField',
    'constructor': 'Com.Input',
    'constructorParams': {
        'type': 'search',
        'inputmode': 'search',
    }
});

Com.FormFields.add('phone', {
    'node': cm.node('input', {'type': 'tel'}),
    'value': '',
    'defaultValue': '',
    'fieldConstructor': 'Com.AbstractFormField',
    'constructor': 'Com.Input',
    'constructorParams': {
        'type': 'tel'
    }
});

Com.FormFields.add('number', {
    'node': cm.node('input', {'type': 'number'}),
    'value': '',
    'defaultValue': '',
    'fieldConstructor': 'Com.AbstractFormField',
    'constructor': 'Com.Input',
    'constructorParams': {
        'type': 'number'
    }
});

Com.FormFields.add('hidden', {
    'node': cm.node('input', {'type': 'hidden'}),
    'visible': false,
    'adaptive': false,
    'value': '',
    'defaultValue': '',
    'fieldConstructor': 'Com.AbstractFormField',
    'constructor': 'Com.Input',
    'constructorParams': {
        'type': 'hidden'
    }
});

cm.define('Com.InputTrigger', {
    'extend' : 'Com.AbstractController',
    'events' : [
        'onChange',
        'onInput',
        'onClick'
    ],
    'params' : {
        'renderStructure' : false,
        'embedStructureOnRender' : false,
        'controllerEvents' : true,
        'type' : 'radio',
        'triggerDefault' : false
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractController.apply(that, arguments);
});

cm.getConstructor('Com.InputTrigger', function(classConstructor, className, classProto){
    var _inherit = classProto._inherit;

    classProto.onConstructStart = function(){
        var that = this;
        that.inputs = [];
        // Bind context to methods
        that.changeHandler = that.change.bind(that);
        that.inputHandler = that.input.bind(that);
        that.clickHandler = that.click.bind(that);
    };

    classProto.renderViewModel = function(){
        var that = this;
        // Find inputs
        that.inputs = cm.getByAttr('type', that.params['type'], that.params['node']);
        // Process
        cm.forEach(that.inputs, function(node){
            cm.addEvent(node, 'input', that.inputHandler);
            cm.addEvent(node, 'change', that.changeHandler);
            cm.addEvent(node, 'click', that.clickHandler);
            // Default
            if(that.params['triggerDefault']){
                cm.triggerEvent(node, 'change');
            }
        });
    };

    classProto.change = function(e){
        var that = this,
            node = cm.getEventTarget(e),
            value = node.value,
            isCheckable = /radio|checkbox/.test(node.type),
            isChecked = !isCheckable || (isCheckable && node.checked);
        if(isChecked){
            that.triggerEvent('onChange', node, value);
        }
        return that;
    };

    classProto.input = function(e){
        var that = this,
            node = cm.getEventTarget(e),
            value = node.value;
        that.triggerEvent('onInput', node, value);
        return that;
    };

    classProto.click = function(e){
        var that = this,
            node = cm.getEventTarget(e),
            value = node.value;
        that.triggerEvent('onClick', node, value);
        return that;
    };
});
cm.define('Com.IntegerInput', {
    'extend' : 'Com.AbstractInput',
    'params' : {
        'controllerEvents' : true,
        'maxLength' : 3,
        'max' : 0,
        'defaultValue' : 0,
        'allowNegative' : false,
        'allowFloat' : false
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractInput.apply(that, arguments);
});

cm.getConstructor('Com.IntegerInput', function(classConstructor, className, classProto, classInherit){
    classProto.construct = function(){
        var that = this;
        // Bind context to methods
        that.setValueHandler = that.setValue.bind(that);
        // Call parent method
        classInherit.prototype.construct.apply(that, arguments);
    };

    classProto.onValidateParams = function(){
        var that = this;
        if(cm.isNode(that.params['node'])){
            that.params['type'] = that.params['node'].getAttribute('type') || that.params['max'];
            that.params['max'] = that.params['node'].getAttribute('max') || that.params['max'];
        }
    };

    /*** VIEW MODEL ***/

    classProto.renderContent = function(){
        var that = this,
            params = {
                'allowNegative' : that.params['allowNegative'],
                'allowFloat' : that.params['allowFloat']
            },
            nodes = {};
        that.nodes['content'] = nodes;
        that.triggerEvent('onRenderContentStart');
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'pt__input'},
            nodes['input'] = cm.node('input', {'type' : that.params['type']})
        );
        // Attributes
        cm.setInputMaxLength(nodes['input'], that.params['maxLength'], that.params['max']);
        // Placeholder
        if(!cm.isEmpty(that.params['placeholder'])){
            nodes['input'].placeholder = that.params['placeholder'];
        }
        // Events
        that.triggerEvent('onRenderContentProcess');
        cm.addEvent(nodes['input'], 'blur', that.setValueHandler);
        cm.addEvent(nodes['input'], 'keypress', function(e){
            if(cm.isKeyCode(e.keyCode, 'enter')){
                cm.preventDefault(e);
                that.setValue();
                nodes['input'].blur();
            }
        });
        cm.allowOnlyNumbersInputEvent(nodes['input'], function(e, value){
            that.selectAction(that.validateValue(value), true);
        }, params);
        that.triggerEvent('onRenderContentEnd');
        // Push
        return nodes['container'];
    };

    /*** DATA VALUE ***/

    classProto.validateValue = function(value){
        var that = this;
        value = !cm.isEmpty(value) ? value : that.params['defaultValue'];
        value = parseFloat(value);
        that.rawValue = !isNaN(value) ? value : '';
        return that.rawValue;
    };

    classProto.setValue = function(triggerEvents){
        var that = this;
        triggerEvents = cm.isUndefined(triggerEvents)? true : triggerEvents;
        that.set(that.rawValue, triggerEvents);
        return that;
    };

    classProto.setData = function(){
        var that = this;
        that.nodes['content']['input'].value = that.rawValue;
        return that;
    };
});

/* ****** FORM FIELD COMPONENT ******* */

Com.FormFields.add('integer', {
    'node' : cm.node('input', {'type' : 'text'}),
    'fieldConstructor' : 'Com.AbstractFormField',
    'constructor' : 'Com.IntegerInput'
});

cm.define('Com.MultipleAutocomplete', {
    'extend' : 'Com.MultipleInput',
    'params' : {
        'embedStructure' : 'replace',
        'className' : 'com__multiple-autocomplete',
        'sortable' : false,
        'showToolbar' : false,
        'showControls' : true,
        'focusInput' : true,
        'inputConstructor' : 'Com.Autocomplete'
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.MultipleInput.apply(that, arguments);
});

/* ****** FORM FIELD COMPONENT ******* */

Com.FormFields.add('multi-autocomplete', {
    'node' : cm.node('div'),
    'fieldConstructor' : 'Com.AbstractFormField',
    'constructor' : 'Com.MultipleAutocomplete'
});
cm.define('Com.MultipleFileInput', {
    'extend' : 'Com.MultipleInput',
    'params' : {
        'embedStructure' : 'replace',
        'className' : 'com__multiple-file-input',
        'local' : true,
        'sortable' : false,
        'showToolbar' : true,
        'showControls' : false,
        'showList' : true,
        'focusInput' : false,
        'buttonsAlign' : 'left',
        'inputConstructor' : 'Com.FileInput',
        'inputParams' : {
            'embedStructure' : 'replace',
            'dropzone' : false
        },
        'fileManager' : false,
        'fileManagerConstructor' : 'Com.AbstractFileManagerContainer',
        'fileManagerParams' : {
            'constructorParams' : {}
        },
        'fileUploader' : false,
        'fileUploaderConstructor' : 'Com.FileUploaderContainer',
        'fileUploaderParams' : {
            'constructorParams' : {}
        },
        'dropzone' : true,
        'dropzoneConstructor' : 'Com.FileDropzone',
        'dropzoneParams' : {
            'embedStructure' : 'append',
            'rollover' : true
        },
        'Com.FileReader' : {}
    },
    'strings' : {
        'browse' : 'Browse',
        'browse_local' : 'Browse Local',
        'browse_filemanager' : 'Browse File Manager'
    }
},
function(params){
    var that = this;
    that.myComponents = {};
    that.dragInterval = null;
    that.isDropzoneShow = false;
    that.hasButtons = false;
    // Call parent class construct
    Com.MultipleInput.apply(that, arguments);
});

cm.getConstructor('Com.MultipleFileInput', function(classConstructor, className, classProto){
    var _inherit = classProto._inherit;

    classProto.construct = function(){
        var that = this;
        // Bind context to methods
        that.validateParamsEndHandler = that.validateParamsEnd.bind(that);
        that.itemAddProcessHandler = that.itemAddProcess.bind(that);
        that.browseActionHandler = that.browseAction.bind(that);
        that.processFilesHandler = that.processFiles.bind(that);
        // Add events
        that.addEvent('onValidateParamsEnd', that.validateParamsEndHandler);
        that.addEvent('onItemAddProcess', that.itemAddProcessHandler);
        // Call parent method
        _inherit.prototype.construct.apply(that, arguments);
        return that;
    };

    classProto.clear = function(){
        var that = this;
        that.params['showToolbar'] && cm.removeClass(that.nodes['toolbar']['browseHolder'], 'is-hidden');
        // Call parent method
        _inherit.prototype.clear.apply(that, arguments);
        return that;
    };

    classProto.validateParamsEnd = function(){
        var that = this;
        that.isMultiple = !that.params['max'] || that.params['max'] > 1;
        // Validate Language Strings
        that.setLangs({
            '_browse_local' : that.params['fileManager'] ? that.lang('browse_local') : that.lang('browse'),
            '_browse_filemanager' : that.params['local'] ? that.lang('browse_filemanager') : that.lang('browse')
        });
        // Components parameters
        that.params['dropzoneParams']['max'] = that.params['max'];
        that.params['fileManagerParams']['constructorParams']['max'] = that.params['max'];
        that.params['fileUploaderParams']['constructorParams']['max'] = that.params['max'];
        // File Uploader
        that.params['fileUploaderParams']['constructorParams']['local'] = that.params['local'];
        that.params['fileUploaderParams']['constructorParams']['fileManager'] = that.params['fileManager'];
        // Other
        that.params['dropzone'] = !that.params['local'] ? false : that.params['dropzone'];
        that.params['local'] = that.params['fileUploader'] ? false : that.params['local'];
        that.params['fileManager'] = that.params['fileUploader'] ? false : that.params['fileManager'];
        that.hasButtons = that.params['local'] || that.params['fileManager'] || that.params['fileUploader'];
        return that;
    };

    classProto.renderViewModel = function(){
        var that = this;
        // Call parent method - renderViewModel
        _inherit.prototype.renderViewModel.apply(that, arguments);
        // Init FilerReader
        cm.getConstructor('Com.FileReader', function(classConstructor, className){
            that.myComponents['reader'] = new classConstructor(that.params[className]);
            that.myComponents['reader'].addEvent('onReadSuccess', function(my, item){
                that.addItem({'value' : item}, {
                    'triggerEvents' : true
                });
            });
        });
        // Init Dropzone
        if(that.params['dropzone']){
            cm.getConstructor(that.params['dropzoneConstructor'], function(classConstructor){
                that.myComponents['dropzone'] = new classConstructor(
                    cm.merge(that.params['dropzoneParams'], {
                        'container' : that.nodes['inner'],
                        'target' : that.nodes['holder']
                    })
                );
                that.myComponents['dropzone'].addEvent('onDrop', function(my, data){
                    that.processFiles(data);
                });
            });
        }
        // Init File Manager
        if(that.params['showToolbar'] && that.params['fileManager']){
            cm.getConstructor(that.params['fileManagerConstructor'], function(classConstructor){
                that.myComponents['fileManager'] = new classConstructor(
                    cm.merge(that.params['fileManagerParams'], {
                        'node' : that.nodes['toolbar']['browseFileManager']
                    })
                );
                that.myComponents['fileManager'].addEvent('onComplete', function(my, data){
                    that.processFiles(data);
                });
            });
        }
        // Init File Uploader
        if(that.params['showToolbar'] && that.params['fileUploader']){
            cm.getConstructor(that.params['fileUploaderConstructor'], function(classConstructor){
                that.myComponents['fileUploader'] = new classConstructor(
                    cm.merge(that.params['fileUploaderParams'], {
                        'node' : that.nodes['toolbar']['browseFileUploader']
                    })
                );
                that.myComponents['fileUploader'].addEvent('onComplete', function(my, data){
                    that.processFiles(data);
                });
            });
        }
        return that;
    };

    classProto.renderToolbarView = function(){
        var that = this,
            nodes = {};
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__multiple-input__toolbar'},
            nodes['content'] = cm.node('div', {'class' : 'pt__buttons'},
                nodes['contentInner'] = cm.node('div', {'class' : 'inner'})
            )
        );
        cm.addClass(nodes['content'], ['pull', that.params['buttonsAlign']].join('-'));
        // Render Browse Buttons
        if(that.params['local']){
            nodes['browseLocal'] = cm.node('div', {'class' : 'browse-button'},
                cm.node('button', {'type' : 'button', 'class' : 'button button-primary'}, that.lang('_browse_local')),
                cm.node('div', {'class' : 'inner'},
                    nodes['input'] = cm.node('input', {'type' : 'file'})
                )
            );
            that.isMultiple && nodes['input'].setAttribute('multiple', 'multiple');
            cm.insertFirst(nodes['browseLocal'], nodes['contentInner']);
        }
        if(that.params['fileManager']){
            nodes['browseFileManager'] = cm.node('button', {'type' : 'button', 'class' : 'button button-primary'}, that.lang('_browse_filemanager'));
            cm.insertFirst(nodes['browseFileManager'], nodes['contentInner']);
        }
        if(that.params['fileUploader']){
            nodes['browseFileUploader'] = cm.node('button', {'type' : 'button', 'class' : 'button button-primary'}, that.lang('browse'));
            cm.insertFirst(nodes['browseFileUploader'], nodes['contentInner']);
        }
        if(!that.hasButtons){
            cm.addClass(nodes['container'], 'is-hidden');
        }
        // Events
        cm.addEvent(nodes['input'], 'change', that.browseActionHandler);
        // Push
        that.nodes['toolbar'] = nodes;
        return nodes['container'];
    };

    classProto.itemAddProcess = function(my, item){
        var that = this;
        item['controller'].addEvent('onClear', function(){
            that.removeItem(item, {
                'triggerEvents' : true
            });
        });
        return that;
    };

    /* *** PROCESS FILES *** */

    classProto.browseAction = function(e){
        var that = this,
            length = that.params['max'] ? Math.min(e.target.files.length, (that.params['max'] - that.items.length)) : e.target.files.length;
        cm.forEach(length, function(i){
            that.processFiles(e.target.files[i]);
        });
        return that;
    };

    classProto.processFiles = function(data){
        var that = this;
        if(cm.isFile(data)){
            that.myComponents['reader'].read(data);
        }else if(cm.isArray(data)){
            cm.forEach(data, function(file){
                that.processFiles(file);
            })
        }else if(!cm.isEmpty(data)){
            that.addItem({'value' : data}, {
                'triggerEvents' : true
            });
        }
        return that;
    };

    /* *** PUBLIC *** */

    classProto.browse = function(){
        var that = this;
        if(that.params['local']){
            that.nodes['toolbar']['input'].click();
        }
        return that;
    };
});

/* ****** FORM FIELD COMPONENT ******* */

Com.FormFields.add('multi-file-input', {
    'node' : cm.node('div'),
    'fieldConstructor' : 'Com.AbstractFormField',
    'constructor' : 'Com.MultipleFileInput'
});

cm.define('Com.OpacityRange', {
    'extend' : 'Com.AbstractRange',
    'params' : {
        'className' : 'com__range',
        'theme' : 'theme--arrows',
        'min' : 100,
        'max' : 0,
        'value' : 100,
        'color' : 'red'
    }
},
function(params){
    var that = this;
    Com.AbstractRange.apply(that, arguments);
});

cm.getConstructor('Com.OpacityRange', function(classConstructor, className, classProto){
    var _inherit = classProto._inherit;

    classProto.onConstructEnd = function(){
        var that = this;
        // Set color
        that.setColor(that.params['color']);
    };

    classProto.renderRangeContent = function(){
        var that = this,
            nodes = {};
        that.nodes['rangeContent'] = nodes;
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__opacity-range__content'},
            nodes['inner'] = cm.node('div', {'class' : 'inner range-helper'})
        );
        // Export
        return nodes['container'];
    };

    classProto.setColor = function(color){
        var that = this;
        switch(that.params['direction']){
            case 'horizontal':
                that.nodes['rangeContent']['inner'].style.background = 'linear-gradient(to right, ' + color + ', rgba(255,255,255,0))';
                break;
            case 'vertical':
                that.nodes['rangeContent']['inner'].style.background = 'linear-gradient(to bottom, ' + color + ', rgba(255,255,255,0))';
                break;
        }
    };
});

/* ****** FORM FIELD COMPONENT ******* */

Com.FormFields.add('opacity-range', {
    'node' : cm.node('input', {'type' : 'text'}),
    'fieldConstructor' : 'Com.AbstractFormField',
    'constructor' : 'Com.OpacityRange'
});
cm.define('Com.PositionTools', {
    'extend' : 'Com.AbstractInput',
    'params' : {
        'controllerEvents' : true,
        'className' : 'com__position-tools',
        'defaultValue' : 'center center',
        'fieldSize' : 'medium',                      // medium (24px) | large (32px)
        'options' : [
            {'name' : 'left top', 'icon' : 'svg__position-topleft', 'iconActive' : 'svg__position-topleft--light'},
            {'name' : 'center top', 'icon' : 'svg__position-topcenter', 'iconActive' : 'svg__position-topcenter--light'},
            {'name' : 'right top', 'icon' : 'svg__position-topright', 'iconActive' : 'svg__position-topright--light'},
            {'name' : 'left center', 'icon' : 'svg__position-middleleft', 'iconActive' : 'svg__position-middleleft--light'},
            {'name' : 'center center', 'icon' : 'svg__position-middlecenter', 'iconActive' : 'svg__position-middlecenter--light'},
            {'name' : 'right center', 'icon' : 'svg__position-middleright', 'iconActive' : 'svg__position-middleright--light'},
            {'name' : 'left bottom', 'icon' : 'svg__position-bottomleft', 'iconActive' : 'svg__position-bottomleft--light'},
            {'name' : 'center bottom', 'icon' : 'svg__position-bottomcenter', 'iconActive' : 'svg__position-bottomcenter--light'},
            {'name' : 'right bottom', 'icon' : 'svg__position-bottomright', 'iconActive' : 'svg__position-bottomright--light'}
        ]
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractInput.apply(that, arguments);
});

cm.getConstructor('Com.PositionTools', function(classConstructor, className, classProto){
    var _inherit = classProto._inherit;

    classProto.onConstructStart = function(){
        var that = this;
        that.options = {};
        // Bind context to methods
        return that;
    };

    classProto.set = function(){
        var that = this;
        // Call parent method
        _inherit.prototype.set.apply(that, arguments);
        // Set inputs
        that.setOption();
        return that;
    };

    classProto.renderContent = function(){
        var that = this,
            nodes = {};
        that.nodes['content'] = nodes;
        that.triggerEvent('onRenderContentStart');
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__position-tools__content'},
            nodes['inner'] = cm.node('div', {'class' : 'inner'})
        );
        cm.addClass(nodes['container'], ['size', that.params['fieldSize']].join('-'));
        // Render Options
        cm.forEach(that.params['options'], function(item){
            that.renderOption(item);
        });
        // Events
        that.triggerEvent('onRenderContentProcess');
        that.triggerEvent('onRenderContentEnd');
        // Export
        return nodes['container'];
    };

    classProto.renderOption = function(item){
        var that = this;
        // Config
        item = cm.merge({
            'iconType' : 'icon',
            'icon' : '',
            'iconActive' : '',
            'name' : '',
            'nodes' : {}
        }, item);
        // Structure
        item['nodes']['container'] = cm.node('div', {'class' : 'option__item'},
            item['nodes']['icon'] = cm.node('div', {'class' : [item['iconType'], item['icon']].join(' ')})
        );
        cm.appendChild(item['nodes']['container'], that.nodes['content']['inner']);
        // Events
        cm.addEvent(item['nodes']['container'], 'click', function(){
            !that.disabled && that.set(item['name']);
        });
        // Push
        that.options[item['name']] = item;
        return that;
    };

    classProto.setOption = function(){
        var that = this,
            item;
        if(that.options[that.previousValue]){
            item = that.options[that.previousValue];
            cm.removeClass(item['nodes']['container'], 'active');
            cm.replaceClass(item['nodes']['icon'], item['iconActive'], item['icon']);
        }
        if(that.options[that.value]){
            item = that.options[that.value];
            cm.addClass(item['nodes']['container'], 'active');
            cm.replaceClass(item['nodes']['icon'], item['icon'], item['iconActive']);
        }
    };
});
cm.define('Com.Range', {
    'extend' : 'Com.AbstractRange',
    'params' : {
        'className' : 'com__range',
        'theme' : 'theme--default',
        'min' : 0,
        'max' : 100,
        'value' : 0
    }
},
function(params){
    var that = this;
    Com.AbstractRange.apply(that, arguments);
});

cm.getConstructor('Com.Range', function(classConstructor, className, classProto, classInherit){
    classProto.renderRangeContent = function(){
        var that = this,
            nodes = {};
        that.nodes['rangeContent'] = nodes;
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__range__field'},
            nodes['bar'] = cm.node('div', {'class' : 'bar'},
                nodes['range'] = cm.node('div', {'class' : 'range'})
            ),
            cm.node('div', {'class' : 'min'}, that.params['min']),
            cm.node('div', {'class' : 'max'}, that.params['max'])
        );
        // Export
        return nodes['container'];
    };

    classProto.setBarRange = function(){
        var that = this;
        var values = cm.clone(that.tempRawValue);
        if(!that.params['range']){
            values.push(that.params['min']);
        }
        values = cm.arraySort(values, false, 'desc');
        values[0] = that.getBarRangeValuePosition(values[0]);
        values[1] = that.getBarRangeValuePosition(values[1]);
        that.nodes['rangeContent']['range'].style.left = values[0] + 'px';
        that.nodes['rangeContent']['range'].style.width = values[1] - values[0] + 'px';
    };

    classProto.getBarRangeValuePosition = function(value){
        var that = this,
            dimensions = cm.getFullRect(that.nodes['rangeContent']['bar']),
            dv = value - that.params['min'],
            xn = that.params['max'] - that.params['min'],
            yn,
            zn;
        switch(that.params['direction']){
            case 'horizontal':
                yn = dimensions['absoluteWidth'];
                zn = (yn / xn) * dv;
                value = Math.round(zn);
                break;
            case 'vertical':
                yn = dimensions['absoluteHeight'];
                zn = (yn / xn) * dv;
                value = Math.round(zn);
                break;
        }
        return value;
    };

    /*** DATA ***/

    classProto.selectData = function(){
        var that = this;
        // Set bar range
        that.setBarRange();
    };

    classProto.setData = function(){
        var that = this;
        // Call parent method - setData
        classInherit.prototype.setData.apply(that, arguments);
        // Set range bar
        that.setBarRange();
    };
});

/* ****** FORM FIELD COMPONENT ******* */

Com.FormFields.add('range', {
    'node' : cm.node('input', {'type' : 'text'}),
    'fieldConstructor' : 'Com.AbstractFormField',
    'constructor' : 'Com.Range'
});
cm.define('Com.RepeatTools', {
    'extend' : 'Com.AbstractInput',
    'params' : {
        'className' : 'com__repeat-tools',
        'defaultValue' : 'no-repeat',
        'fieldStyle' : 'row',                   // row | block
        'options' : [
            {'name' : 'no-repeat', 'icon' : 'svg__repeat-no'},
            {'name' : 'repeat-x', 'icon' : 'svg__repeat-horizontal'},
            {'name' : 'repeat-y', 'icon' : 'svg__repeat-vertical'},
            {'name' : 'repeat', 'icon' : 'svg__repeat-both'}
        ]
    },
    'strings' : {
        'no-repeat' : 'No',
        'repeat-x' : 'Horizontally',
        'repeat-y' : 'Vertically',
        'repeat' : 'Both'
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractInput.apply(that, arguments);
});

cm.getConstructor('Com.RepeatTools', function(classConstructor, className, classProto){
    var _inherit = classProto._inherit;

    classProto.construct = function(){
        var that = this;
        that.options = {};
        // Bind context to methods
        // Call parent method
        _inherit.prototype.construct.apply(that, arguments);
        return that;
    };

    classProto.set = function(){
        var that = this;
        // Call parent method
        _inherit.prototype.set.apply(that, arguments);
        // Set inputs
        that.setOption();
        return that;
    };

    classProto.renderContent = function(){
        var that = this,
            nodes = {};
        that.nodes['content'] = nodes;
        that.triggerEvent('onRenderContentStart');
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__repeat-tools__content'},
            nodes['inner'] = cm.node('div', {'class' : 'inner'})
        );
        cm.addClass(nodes['container'], ['style', that.params['fieldStyle']].join('-'));
        // Render options
        cm.forEach(that.params['options'], function(item){
            that.renderOption(item);
        });
        // Events
        that.triggerEvent('onRenderContentProcess');
        that.triggerEvent('onRenderContentEnd');
        // Export
        return nodes['container'];
    };

    classProto.renderOption = function(item){
        var that = this;
        // Config
        item = cm.merge({
            'iconType' : 'icon',
            'icon' : '',
            'name' : '',
            'nodes' : {}
        }, item);
        // Structure
        item['nodes']['container'] = cm.node('div', {'class' : 'option__item', 'title' : that.lang(item['name'])},
            item['nodes']['icon'] = cm.node('div', {'class' : [item['iconType'], item['icon']].join(' ')})
        );
        cm.appendChild(item['nodes']['container'], that.nodes['content']['inner']);
        // Events
        cm.addEvent(item['nodes']['container'], 'click', function(){
            that.set(item['name']);
        });
        // Push
        that.options[item['name']] = item;
        return that;
    };

    classProto.setOption = function(){
        var that = this,
            item;
        if(that.options[that.previousValue]){
            item = that.options[that.previousValue];
            cm.removeClass(item['nodes']['container'], 'is-active');
        }
        if(that.options[that.value]){
            item = that.options[that.value];
            cm.addClass(item['nodes']['container'], 'is-active');
        }
    };
});
cm.define('Com.ScaleTools', {
    'extend' : 'Com.AbstractInput',
    'params' : {
        'className' : 'com__scale-tools',
        'defaultValue' : 'auto',
        'fieldStyle' : 'row',                   // row | block
        'options' : [
            {'name' : 'auto', 'icon' : 'svg__scale-auto'},
            {'name' : 'contain', 'icon' : 'svg__scale-contain'},
            {'name' : 'cover', 'icon' : 'svg__scale-cover'},
            {'name' : '100% 100%', 'icon' : 'svg__scale-fill'}
        ]
    },
    'strings' : {
        'auto' : 'Auto',
        'contain' : 'Contain',
        'cover' : 'Cover',
        '100% 100%' : 'Fill'
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractInput.apply(that, arguments);
});

cm.getConstructor('Com.ScaleTools', function(classConstructor, className, classProto){
    var _inherit = classProto._inherit;

    classProto.construct = function(){
        var that = this;
        that.options = {};
        // Bind context to methods
        // Call parent method
        _inherit.prototype.construct.apply(that, arguments);
        return that;
    };

    classProto.set = function(){
        var that = this;
        // Call parent method
        _inherit.prototype.set.apply(that, arguments);
        // Set inputs
        that.setOption();
        return that;
    };

    classProto.renderContent = function(){
        var that = this,
            nodes = {};
        that.nodes['content'] = nodes;
        that.triggerEvent('onRenderContentStart');
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__scale-tools__content'},
            nodes['inner'] = cm.node('div', {'class' : 'inner'})
        );
        cm.addClass(nodes['container'], ['style', that.params['fieldStyle']].join('-'));
        // Render options
        cm.forEach(that.params['options'], function(item){
            that.renderOption(item);
        });
        // Events
        that.triggerEvent('onRenderContentProcess');
        that.triggerEvent('onRenderContentEnd');
        // Export
        return nodes['container'];
    };

    classProto.renderOption = function(item){
        var that = this;
        // Config
        item = cm.merge({
            'iconType' : 'icon',
            'icon' : '',
            'name' : '',
            'nodes' : {}
        }, item);
        // Structure
        item['nodes']['container'] = cm.node('div', {'class' : 'option__item', 'title' : that.lang(item['name'])},
            item['nodes']['icon'] = cm.node('div', {'class' : [item['iconType'], item['icon']].join(' ')})
        );
        cm.appendChild(item['nodes']['container'], that.nodes['content']['inner']);
        // Events
        cm.addEvent(item['nodes']['container'], 'click', function(){
            that.set(item['name']);
        });
        // Push
        that.options[item['name']] = item;
        return that;
    };

    classProto.setOption = function(){
        var that = this,
            item;
        if(that.options[that.previousValue]){
            item = that.options[that.previousValue];
            cm.removeClass(item['nodes']['container'], 'is-active');
        }
        if(that.options[that.value]){
            item = that.options[that.value];
            cm.addClass(item['nodes']['container'], 'is-active');
        }
    };
});
Com.Elements['Selects'] = {};

Com['GetSelect'] = function(id){
    return Com.Elements.Selects[id] || null;
};

cm.define('Com.Select', {
    'modules' : [
        'Params',
        'Events',
        'Structure',
        'DataConfig',
        'Stack'
    ],
    'events' : [
        'onValidateParams',
        'onValidateParamsStart',
        'onValidateParamsProcess',
        'onValidateParamsEnd',
        'onRender',
        'onRenderStart',
        'onSelect',
        'onChange',
        'onReset',
        'onFocus',
        'onBlur',
        'onIconClick',
    ],
    'params' : {
        'select' : null,                        // Deprecated, use 'node' parameter instead.
        'node' : null,                          // Html select node to decorate.
        'container' : null,                     // Component container that is required in case content is rendered without available select.
        'name' : '',
        'embedStructure' : 'replace',
        'customEvents' : true,
        'renderInBody' : true,                  // Render dropdowns in document.body, else they will be rendered in component container.
        'multiple' : false,                     // Render multiple select.
        'placeholder' : '',
        'showPlaceholderAbove' : false,
        'showTitleTag' : true,                  // Copy title from available select node to component container. Will be shown on hover.
        'title' : false,                        // Title text. Will be shown on hover.
        'options' : [],                         // Listing of options, for rendering through java-script. Example: [{'value' : 'foo', 'text' : 'Bar'}].
        'selected' : 0,                         // Deprecated, use 'value' parameter instead.
        'max': 0,                               // Maximum selected options, 0 - for unlimited
        'setInitialValue' : true,
        'setPlaceholderText' : true,            // Set text of the placeholder option as selected
        'value' : null,                         // Option value / array of option values.
        'defaultValue' : null,
        'disabled' : false,
        'id' : null,
        'className' : [],
        'inputClassName' : [],
        'tabindex' : null,
        'icons' : {
            'arrow' : 'icon default linked'
        },
        'tooltip': {
            'limitWidth': true,
            'constructor': 'Com.Tooltip',
            'constructorParams': {
                'targetEvent' : 'none',
                'hideOnOut' : true,
                'className' : 'com__select__tooltip',
                'width' : 'targetWidth',
                'minWidth' : 'targetWidth',
                'top' : cm._config.tooltipDown
            },
        },
    }
},
function(params){
    var that = this,
        nodes = {
            'menu' : {}
        },
        components = {},
        options = {},
        optionsList = [],
        optionsLength = 0,
        groups = [],

        oldActive,
        active;

    that.disabled = false;
    that.isOpen = false;
    that.isFocus = false;
    that.wasFocus = false;
    that.clickTarget = null;
    that.isDestructed = null;

    /* *** CLASS FUNCTIONS *** */

    var init = function(){
        that.destructHandler = that.destruct.bind(that);
        that.setParams(params);
        preValidateParams();
        that.convertEvents(that.params['events']);
        that.getDataConfig(that.params['node']);
        validateParams();
        that.addToStack(that.params['node']);
        that.triggerEvent('onRenderStart');
        render();
        setMiscEvents();
        setEvents();
        // Set selected option
        if(that.params['multiple']){
            if(!cm.isEmpty(that.params['value']) && cm.isArray(that.params['value'])){
                cm.forEach(that.params['value'], function(item){
                    if(options[item]){
                        set(options[item], true);
                    }
                });
            }
        }else{
            if(!cm.isEmpty(that.params['value']) && options[that.params['value']]){
                set(options[that.params['value']]);
            }else if(that.params['setInitialValue'] && optionsLength){
                set(optionsList[0]);
            }
        }
        // Final events
        that.addToStack(nodes['container']);
        that.triggerEvent('onRender', active);
    };

    var preValidateParams = function(){
        if(cm.isNode(that.params['select'])){
            that.params['node'] = that.params['select'];
        }
    };

    var validateParams = function(){
        that.triggerEvent('onValidateParamsStart');
        // Validate CSS classes
        if (cm.isEmpty(that.params['className'])) {
            that.params['className'] = [];
        } else if (cm.isString(that.params['className'])) {
            that.params['className'] = [that.params['className']];
        }
        // ToDo: Deprecated legacy parameter
        if(cm.isObject(that.params['Com.Tooltip'])){
            that.params.tooltip.constructorParams = cm.merge(that.params.tooltip.constructorParams, that.params['Com.Tooltip']);
        }
        if(!that.params.tooltip.limitWidth){
            that.params.tooltip.constructorParams.width = 'auto';
        }
        if(cm.isNode(that.params['node'])){
            that.params['placeholder'] = that.params['node'].getAttribute('placeholder') || that.params['placeholder'];
            that.params['multiple'] = that.params['node'].multiple;
            that.params['title'] = that.params['node'].getAttribute('title') || that.params['title'];
            that.params['name'] = that.params['node'].getAttribute('name') || that.params['name'];
            that.params['disabled'] = that.params['node'].disabled || that.params['node'].readOnly || that.params['disabled'];
            that.params['tabindex'] = that.params['node'].getAttribute('tabindex') || that.params['tabindex'];
            that.params['id'] = that.params['node'].id || that.params['id'];
            // Merge CSS classes
            var classList = Array.from(that.params['node'].classList);
            that.params['className'] = cm.merge(that.params['className'], classList);
        }
        if(that.params['multiple']){
            active = [];
        }
        that.triggerEvent('onValidateParams');
        that.triggerEvent('onValidateParamsProcess');
        validateParamsValue();
        that.disabled = that.params['disabled'];
        that.triggerEvent('onValidateParamsEnd');
    };

    var validateParamsValue = function(){
        var dataValue,
            value;
        if(cm.isNode(that.params['node'])){
            dataValue = that.params['node'].getAttribute('data-value');
            // First try to take original value, then real time js value
            value = cm.getSelectValue(that.params['node']);
            // Parse JSON
            if(!cm.isEmpty(dataValue)){
                value = cm.parseJSON(dataValue);
            }
            that.params['value'] = !cm.isEmpty(value) ?  value : that.params['value'];
        }
        that.params['value'] = !cm.isEmpty(that.params['value']) ? that.params['value'] : that.params['defaultValue'];
    };

    var render = function(){
        /* *** RENDER STRUCTURE *** */
        if(that.params['multiple']){
            renderMultiple();
        }else{
            renderSingle();
        }
        /* *** ATTRIBUTES *** */
        // Add class name
        cm.addClass(nodes['container'], that.params['className']);
        // Title
        if(that.params['showTitleTag'] && that.params['title']){
            nodes['container'].title = that.params['title'];
        }
        // Tabindex
        if(cm.isNumber(that.params['tabindex'])){
            nodes['container'].setAttribute('tabindex', that.params['tabindex']);
        }
        // ID
        if(!cm.isEmpty(that.params['id'])){
            nodes['container'].id = that.params['id'];
        }
        // Data attributes
        if(cm.isNode(that.params['node'])){
            cm.forEach(that.params['node'].attributes, function(item){
                if(/^data-(?!node|element)/.test(item.name)){
                    nodes['hidden'].setAttribute(item.name, item.value);
                    nodes['container'].setAttribute(item.name, item.value);
                }
            });
        }
        // Set hidden input attributes
        if(that.params['name']){
            nodes['hidden'].setAttribute('name', that.params['name']);
        }
        // Placeholder
        if(!cm.isEmpty(that.params['placeholder'])){
            nodes['placeholder'] = cm.node('li',
                cm.node('div', {'class' : 'text disabled'},
                    cm.node('span', {'class' : 'label'}, that.params['placeholder'])
                )
            );
            if(that.params['showPlaceholderAbove']){
                cm.addClass(nodes['placeholder'], ['sticky', 'placeholder-sticky']);
            }
            cm.appendChild(nodes['placeholder'], nodes['items']);
        }
        /* *** RENDER OPTIONS *** */
        if(cm.isNode(that.params['node'])){
            collectSelectOptions();
        }
        cm.forEach(that.params['options'], function(item){
            renderOption(item);
        });
        /* *** INSERT INTO DOM *** */
        that.embedStructure(nodes['container']);
    };

    var renderSingle = function(){
        nodes['container'] = cm.node('div', {'class' : 'com__select'},
            nodes['hidden'] = cm.node('select', {'class' : 'display-none'}),
            nodes['target'] = cm.node('div', {'class' : 'pt__input'},
                nodes['text'] = cm.node('input', {'type' : 'text', 'readOnly' : 'true'}),
                nodes['arrow'] = cm.node('div', {'class' : that.params['icons']['arrow']})
            ),
            nodes['scroll'] = cm.node('div', {'class' : 'pt__listing-items'},
                nodes['items'] = cm.node('ul')
            )
        );
        cm.addClass(nodes['target'], that.params['inputClassName']);
        if(!cm.isEmpty(that.params['id'])){
            nodes['text'].setAttribute('aria-describedby', that.params['id']);
        }
    };

    var renderMultiple = function(){
        nodes['container'] = cm.node('div', {'class' : 'com__select-multi'},
            nodes['hidden'] = cm.node('select', {'class' : 'display-none', 'multiple' : true}),
            nodes['inner'] = cm.node('div', {'class' : 'inner'},
                nodes['scroll'] = cm.node('div', {'class' : 'pt__listing-items'},
                    nodes['items'] = cm.node('ul')
                )
            )
        );
    };

    var setMiscEvents = function(){
        if(!that.params['multiple']){
            cm.addEvent(nodes['arrow'], 'mousedown', afterClick);
            cm.addEvent(nodes['arrow'], 'click', afterClick);
            cm.addEvent(nodes['text'], 'keydown', afterKeypress);
            cm.addEvent(nodes['text'], 'focus', afterFocus);
            cm.addEvent(nodes['text'], 'blur', afterBlur);

            // Render tooltip
            cm.getConstructor(that.params.tooltip.constructor, function(classConstructor){
                components['menu'] = new classConstructor(
                    cm.merge(that.params.tooltip.constructorParams, {
                        'container' : that.params['renderInBody']? document.body : nodes['container'],
                        'content' : nodes['scroll'],
                        'target' : nodes['target'],
                        'disabled' : !optionsLength,
                        'events' : {
                            'onShowStart' : afterShow.bind(that),
                            'onHideStart' : afterHide.bind(that),
                        }
                    })
                );
            });
        }
        // Enable / Disable
        if(that.disabled){
            that.disable();
        }else{
            that.enable();
        }
    };

    var setEvents = function(){
        // Add custom event
        if(that.params['customEvents']){
            cm.customEvent.add(nodes['container'], 'destruct', that.destructHandler);
        }
    };

    var unsetEvents = function(){
        // Add custom event
        if(that.params['customEvents']){
            cm.customEvent.remove(nodes['container'], 'destruct', that.destructHandler);
        }
    };

    /******* EVENTS *******/

    var afterClick = function(e) {
        if (e.type === 'mousedown') {
            that.wasFocus = that.isFocus;
        }
        if (e.type === 'click') {
            if (that.wasFocus) {
               that.toggleMenu(false);
            } else {
                that.focus();
            }
            that.triggerEvent('onIconClick');
        }
    };

    var afterFocus = function() {
        if(optionsLength){
            cm.addClass(nodes['container'], 'active');
            that.toggleMenu(true);
            // Scroll to active element
            if(active && options[active]){
                scrollToItem(options[active]);
            }
        }
        that.isFocus = true;
        that.triggerEvent('onFocus', active);
    };

    var afterBlur = function() {
        if (!that.isOwnNode(that.clickTarget)) {
            that.toggleMenu(false);
        }
        that.isFocus = false;
        that.clickTarget = null;
        cm.removeClass(nodes['container'], 'active');
        that.triggerEvent('onBlur', active);
    };

    var afterShow = function() {
        that.isOpen = true;
        cm.addEvent(document, 'keydown', blockDocumentArrows);
        cm.addEvent(document, 'mousedown', afterBodyClick);
    };

    var afterHide = function() {
        that.isOpen = false;
        cm.removeEvent(document, 'keydown', blockDocumentArrows);
        cm.removeEvent(document, 'mousedown', afterBodyClick);
    };

    var afterKeypress = function(e) {
        if(optionsLength){
            var item = options[active],
                index = optionsList.indexOf(item),
                option;
            switch(e.keyCode){
                case 38:
                    cm.preventDefault(e);
                    if(index - 1 >= 0){
                        option = optionsList[index - 1];
                    }else{
                        option = optionsList[optionsLength - 1];
                    }
                    break;

                case 40:
                    cm.preventDefault(e);
                    if(index + 1 < optionsLength){
                        option = optionsList[index + 1];
                    }else{
                        option = optionsList[0];
                    }
                    break;

                case 13:
                    that.toggleMenu(false);
                    break;
            }

            if(option){
                set(option, true);
                scrollToItem(option);
            }
        }
    };

    var afterBodyClick = function(e) {
        that.clickTarget = cm.getEventTarget(e);
        if (!that.isOwnNode(that.clickTarget)) {
            that.toggleMenu(false);
        }
    };

    /******* COLLECTORS *******/

    var collectSelectGroupOption = function(node){
        return {
            'value' : node.value,
            'text' : node.innerHTML,
            'classes' : [node.className],
            'style': node.style.cssText,
            'hidden' : node.hidden,
            'disabled' : node.disabled
        };
    };

    var collectSelectOptions = function(){
        var nodes = that.params['node'].childNodes,
            nodeTagName,
            options;
        cm.forEach(nodes, function(node){
            if(cm.isElementNode(node)){
                nodeTagName = node.tagName.toLowerCase();
                if(nodeTagName === 'optgroup'){
                    options = collectSelectGroupOptions(node);
                    renderGroup(node.label, options);
                }else if(nodeTagName === 'option'){
                    renderOption(
                        collectSelectGroupOption(node)
                    );
                }
            }
        });
    };

    var collectSelectGroupOptions = function(node){
        var optionNodes = node.querySelectorAll('option'),
            options = [];
        cm.forEach(optionNodes, function(optionNode){
            options.push(
                collectSelectGroupOption(optionNode)
            );
        });
        return options;
    };

    /* *** GROUPS *** */

    var renderGroup = function(name, options){
        // Config
        var item = {
            'name' : name,
            'options' : options
        };

        // Structure
        item['optgroup'] = cm.node('optgroup', {'label' : item['name']});
        item['container'] = cm.node('li', {'class' : 'group'},
            item['items'] = cm.node('ul', {'class' : 'pt__listing-items'})
        );
        if(!cm.isEmpty(item['name'])){
            cm.addClass(item['container'], 'group-sticky');
            cm.insertFirst(
                cm.node('div', {'class' : 'title', 'innerHTML' : item['name']}),
                item['container']
            );
        }

        // Render options
        cm.forEach(item['options'], function(optionItem){
            renderOption(optionItem, item);
        });

        // Append
        nodes['items'].appendChild(item['container']);
        nodes['hidden'].appendChild(item['optgroup']);

        // Push
        groups.push(item);
        return item;
    };

    var getGroup = function(name){
        return groups.find(function(item){
            return item.name === name;
        });
    };

    /* *** OPTIONS *** */

    var renderOption = function(item, groupItem){
        // Config
        item = cm.merge({
            'group' : null,         // Group name
            'groupItem': null,      // Group item
            'hidden' : false,
            'select' : false,       // Choose option after adding
            'selected' : false,     // For select with multiple options to choose
            'disabled' : false,
            'placeholder' : false,
            'value' : '',
            'text' : '',
            'textNode': null,
            'classes': [],
            'style': null,
            'renderCheckbox': false,
        }, item);

        // Validate
        item['placeholder'] = cm.isEmpty(item['value']) ? true : item['placeholder'];
        if(!cm.isEmpty(item['className'])){
            if(cm.isArray(item['classes'])){
                item['classes'].push(item['className']);
            }else{
                item['classes'] = [item['classes'], item['className']];
            }
        }

        // Check is option with the same value exists and delete it
        if(options[item['value']]){
            removeOption(options[item['value']]);
        }

        // Get group item and link it to option's config
        if(!cm.isUndefined(groupItem)){
            item['groupItem'] = groupItem;
            item['group'] = groupItem['name'];
        }else if(!cm.isEmpty(item['group'])){
            item['groupItem'] = getGroup(item['group']);
            if(!item['groupItem']){
                item['groupItem'] = renderGroup(item['group']);
            }
        }

        // Structure
        item['option'] = cm.node('option', {'value' : item['value'], 'innerHTML' : item['text']});
        item['node'] = cm.node('li', {'classes' : item['classes'], 'style' : item['style']},
            item['link'] = cm.node('a', {'title' : cm.cutHTML(item['text'])})
        );

        // Label
        if (cm.isNode(item['textNode'])) {
            cm.appendChild(item['textNode'], item['link']);
        } else {
            item['link'].innerHTML = item['text'];
        }

        // Checkbox
        if (item['renderCheckbox']) {
            item['checkbox'] = cm.node('input', {'classes': 'checkbox', 'type': that.params['multiple'] ? 'checkbox' : 'radio', 'aria-hidden': true});
            cm.insertFirst(item['checkbox'], item['link']);
        }

        // States styles
        item['hidden'] && cm.addClass(item['node'], 'hidden');
        item['disabled'] && cm.addClass(item['node'], 'disabled');
        item['placeholder'] && cm.addClass(item['node'], 'placeholder');

        // Append
        if(item['groupItem']){
            item['groupItem']['items'].appendChild(item['node']);
            item['groupItem']['optgroup'].appendChild(item['option']);
        }else{
            nodes['items'].appendChild(item['node']);
            nodes['hidden'].appendChild(item['option']);
        }

        // Label click event
        cm.click.add(item['link'], function(){
            if(!item['disabled'] && !that.disabled){
                set(item, true);
            }
            if(!that.params['multiple']){
                that.toggleMenu(false);
            }
        });

        // Push
        options[item['value']] = item;
        optionsList.push(item);
        optionsLength = optionsList.length;

        // Select
        if(item['select']){
            set(item, false);
        }

        return item;
    };

    var editOption = function(option, text){
        var value = !cm.isUndefined(option['value'])? option['value'] : option['text'];
        option['text'] = text;
        option['node'].innerHTML = text;
        option['option'].innerHTML = text;

        if(!that.params['multiple'] && value === active){
            nodes['text'].value = cm.decode(text);
        }
    };

    var removeOption = function(option, params){
        // Validate params
        params = cm.merge({
            setDefault: true,
        }, params);

        // Validate value
        var value = !cm.isUndefined(option['value'])? option['value'] : option['text'];

        // Remove option from list and array
        cm.remove(option['node']);
        cm.remove(option['option']);
        optionsList = optionsList.filter(function(item){
            return option != item;
        });
        optionsLength = optionsList.length;
        delete options[option['value']];

        // Set new active option
        if(that.params['multiple']){
            if(cm.isArray(active)){
                active = active.filter(function(item){
                    return value != item;
                });
            }
        }else{
            if(value === active){
                if(params.setDefault && optionsLength){
                    set(optionsList[0], true);
                }else{
                    active = null;
                    nodes['text'].value = '';
                }
            }
        }
    };

    /* *** SETTERS *** */

    var set = function(option, execute){
        if(option){
            if(that.params['multiple']){
                setMultiple(option);
            }else{
                setSingle(option);
            }
        }
        if(execute){
            that.triggerEvent('onSelect', active);
            onChange();
        }
    };

    var setMultiple = function(option){
        var value = !cm.isUndefined(option['value'])? option['value'] : option['text'];
        if(option['selected']){
            deselectMultiple(option);
        }else if(
            !that.params.max ||
            (that.params.max > 0 && active.length < that.params.max)
        ){
            active.push(value);
            setOption(option);
        }
    };

    var setSingle = function(option){
        oldActive = active;
        active = !cm.isUndefined(option['value'])? option['value'] : option['text'];
        optionsList.forEach(function(item){
            cm.removeClass(item['node'], 'active');
        });
        if(!option['placeholder'] || that.params['setPlaceholderText']) {
            if(option['group']){
                nodes['text'].value = [cm.decode(option['group']), cm.decode(option['text'])].join(' > ');
            }else{
                nodes['text'].value = cm.decode(option['text']);
            }
        }else{
            nodes['text'].value = '';
        }
        nodes['hidden'].value = active;
        setOption(option);
    };

    var setOption = function(option){
        option['option'].selected = true;
        option['selected'] = true;
        if (option['checkbox']) {
            option['checkbox'].checked = true;
        }
        cm.addClass(option['node'], 'active');
    };

    var deselectMultiple = function(option){
        var value = !cm.isUndefined(option['value'])? option['value'] : option['text'];
        // Filter selected
        active = active.filter(function(item){
            return value != item;
        });
        // Deselect option
        option['option'].selected = false;
        option['selected'] = false;
        if (option['checkbox']) {
            option['checkbox'].checked = false;
        }
        cm.removeClass(option['node'], 'active');
    };

    var onChange = function(){
        if(cm.stringifyJSON(active) !== cm.stringifyJSON(oldActive)){
            that.triggerEvent('onChange', active);
        }
    };

    /* *** DROPDOWN *** */

    var scrollToItem = function(option){
        components['menu'].scrollToNode(option['node']);
    };

    var toggleMenuState = function(){
        if(!components['menu'] || that.params['multiple']){
            return;
        }
        if(!that.disabled && optionsLength > 0){
            components['menu'].enable();
        }else{
            components['menu'].disable();
        }
    };

    /* *** HELPERS *** */

    var blockDocumentArrows = function(e){
        e = cm.getEvent(e);
        if(e.keyCode === 38 || e.keyCode === 40){
            cm.preventDefault(e);
        }
    };

    /* ******* MAIN ******* */

    that.destruct = function(){
        var that = this;
        if(!that.isDestructed){
            that.isDestructed = true;
            unsetEvents();
            that.removeFromStack();
        }
        return that;
    };

    that.get = function(){
        return active;
    };

    that.getText = function() {
        var strings = [];
        if (cm.isArray(active)) {
            cm.forEach(active, value => {
                if (options[value]) {
                    strings.push(options[value].text);
                }
            });
        } else {
            if (options[active]) {
                strings.push(options[active].text);
            }
        }
        return strings.join(', ') || null;
    };

    that.set = function(value, triggerEvents){
        triggerEvents = cm.isUndefined(triggerEvents)? true : triggerEvents;
        // Select option and execute events
        if(!cm.isUndefined(value)){
            if(cm.isArray(value)){
                cm.forEach(value, function(item){
                    if(options[item]){
                        set(options[item], false);
                    }
                });
                if(triggerEvents){
                    that.triggerEvent('onSelect', active);
                    that.triggerEvent('onChange', active);
                }
            }else if(options[value]){
                set(options[value], triggerEvents);
            }
        }
        return that;
    };

    that.reset = function(triggerEvents){
        triggerEvents = cm.isUndefined(triggerEvents)? true : triggerEvents;
        if(that.params['multiple']){
            that.deselectAll(triggerEvents);
        }else{
            if(optionsLength){
                set(optionsList[0], triggerEvents);
            }
        }
        that.triggerEvent('onReset', active);
    };

    that.selectAll = function(triggerEvents){
        triggerEvents = cm.isUndefined(triggerEvents)? true : triggerEvents;
        if(that.params['multiple']){
            cm.forEach(options, deselectMultiple);
            cm.forEach(options, setMultiple);
            if(triggerEvents){
                that.triggerEvent('onSelect', active);
                onChange();
            }
        }
        return that;
    };

    that.deselectAll = function(triggerEvents){
        triggerEvents = cm.isUndefined(triggerEvents)? true : triggerEvents;
        if(that.params['multiple']){
            cm.forEach(options, deselectMultiple);
            if(triggerEvents){
                that.triggerEvent('onSelect', active);
                onChange();
            }
        }
        return that;
    };

    that.addOption = function(value, text){
        if(cm.isObject(arguments[0])){
            renderOption(arguments[0]);
        }else{
            renderOption({
                'value' : value,
                'text' : text
            });
        }
        toggleMenuState();
        return that;
    };

    that.addOptions = function(arr){
        cm.forEach(arr, function(item){
            renderOption(item);
        });
        toggleMenuState();
        return that;
    };

    that.editOption = function(value, text){
        if(!cm.isUndefined(value) && options[value]){
            editOption(options[value], text);
        }
        return that;
    };

    that.removeOption = function(value){
        if(!cm.isUndefined(value) && options[value]){
            removeOption(options[value]);
            toggleMenuState();
        }
        return that;
    };

    that.removeOptions = that.removeOptionsAll = function(){
        cm.forEach(options, function(item){
            removeOption(item, {setDefault: false});
        });
        toggleMenuState();
        return that;
    };

    that.getOption = function(value){
        if(!cm.isUndefined(value) && options[value]){
            return options[value];
        }
        return null;
    };

    that.getSelectedOption = that.getValueOption = function(){
        if (cm.isArray(active)) {
            var values = [];
            cm.forEach(active, value => {
                var option = that.getOption(value);
                if (option) {
                    values.push(option);
                }
            });
            return values;
        } else {
            return that.getOption(active);
        }
    };

    that.getOptions = that.getOptionsAll = that.getAllOptions = function(){
        var result = [];
        cm.forEach(optionsList, function(item){
            result.push({
                'text' : item['text'],
                'value' : item['value']
            });
        });
        return result;
    };

    that.hideOption = function(value){
        if(cm.isUndefined(value) || !options[value]){
            return;
        }
        var option = options[value];
        option['hidden'] = true;
        cm.addClass(option['node'], 'hidden');
    };

    that.showOption = function(value){
        if(cm.isUndefined(value) || !options[value]){
            return;
        }
        var option = options[value];
        option['hidden'] = false;
        cm.removeClass(option['node'], 'hidden');
    };

    that.toggleOptionVisibility = function(value, state) {
        var option = options[value];
        if(cm.isUndefined(value) || !option){
            return;
        }
        if (state) {
            that.showOption(value);
        } else {
            that.hideOption(value);
        }
    };

    that.disableOption = function(value) {
        if(cm.isUndefined(value) || !options[value]){
            return;
        }
        var option = options[value];
        option['disabled'] = true;
        cm.addClass(option['node'], 'disabled');
    };

    that.enableOption = function(value) {
        if(cm.isUndefined(value) || !options[value]){
            return;
        }
        var option = options[value];
        option['disabled'] = false;
        cm.removeClass(option['node'], 'disabled');
    };

    that.focus = function(){
        if(!that.params['multiple']){
            nodes['text'].focus();
        }
        return that;
    };

    that.blur = function(){
        if(!that.params['multiple']){
            nodes['text'].blur();
        }
        return that;
    };

    that.disable = function(){
        that.disabled = true;
        cm.addClass(nodes['container'], 'disabled');
        cm.addClass(nodes['scroll'], 'disabled');
        cm.addClass(nodes['target'], 'disabled');
        if(!that.params['multiple']){
            nodes['text'].disabled = true;
            components['menu'] && components['menu'].disable();
        }
        return that;
    };

    that.enable = function(){
        that.disabled = false;
        cm.removeClass(nodes['container'], 'disabled');
        cm.removeClass(nodes['scroll'], 'disabled');
        cm.removeClass(nodes['target'], 'disabled');
        if(!that.params['multiple']){
            nodes['text'].disabled = false;
            if(optionsLength > 0){
                components['menu'] && components['menu'].enable();
            }
        }
        return that;
    };

    that.toggleVisibility = function(state){
        cm.toggleClass(nodes['container'], 'is-hidden', !state);
        return that;
    };

    that.toggleMenu = function(state, immediately){
        if(that.disabled || !components['menu']){
            return that;
        }
        if(state){
            components['menu'].show(immediately);
        }else{
            components['menu'].hide(immediately);
        }
        return that;
    };

    that.getNodes = function(key){
        return nodes[key] || nodes;
    };

    that.getContainer = function(){
        return nodes.container;
    };

    that.isOwnNode = function(node) {
        return cm.isParent(nodes.container, node, true) || components['menu'].isOwnNode(node);
    };

    init();
});

/* ****** FORM FIELD COMPONENT ******* */

Com.FormFields.add('select', {
    'node' : cm.node('select'),
    'fieldConstructor' : 'Com.AbstractFormField',
    'constructor' : 'Com.Select'
});

cm.define('Com.SelectFieldTrigger', {
    'extend' : 'Com.AbstractController',
    'params' : {
        'renderStructure' : true,
        'embedStructureOnRender' : true,
        'controllerEvents' : true,
        'triggerName' : null,
        'triggerFieldSize' : null,
        'options' : [],
        'Com.Toolbar' : {
            'embedStructure' : 'append'
        }
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractController.apply(that, arguments);
});

cm.getConstructor('Com.SelectFieldTrigger', function(classConstructor, className, classProto){
    var _inherit = classProto._inherit;

    /******* SYSTEM *******/

    classProto.onConstructStart = function(){
        var that = this;
        // Variables
        that.fields = {};
        // Bind context
        that.changeEventHandler = that.changeEvent.bind(that);
    };

    classProto.onValidateParams = function(){
        var that = this;
        that.components['form'] = that.params['form'];
        that.components['formField'] = that.params['formField'];
    };

    classProto.onRender = function(){
        var that = this;
        that.toggle();
    };

    /******* VIEW MODEL *******/

    classProto.renderView = function(){
        var that = this;
        that.triggerEvent('onRenderViewStart');
        that.nodes['container'] = cm.node('div', {'class' : 'app__select-trigger'});
        that.triggerEvent('onRenderViewProcess');
        that.triggerEvent('onRenderViewEnd');
        return that;
    };

    classProto.renderViewModel = function(){
        var that = this;
        // Call parent method - renderViewModel
        _inherit.prototype.renderViewModel.apply(that, arguments);
        // Collect Fields
        that.getTriggerField();
        that.getFields();
        // Render Toolbar
        that.renderToolbar();
    };

    classProto.getTriggerField = function(){
        var that = this;
        var field = that.components['form'].getField(that.params['triggerName']);
        if(field){
            that.components['trigger'] = field['controller'];
            that.components['trigger'].addEvent('onChange', that.changeEventHandler);
        }
    };

    classProto.getFields = function(){
        var that = this;
        cm.forEach(that.params['options'], function(option){
            cm.forEach(option['fields'], function(field){
                if(cm.isObject(field)){
                    that.processField(option['value'], field);
                }else{
                    that.processField(option['value'], {'name' : field});
                }
            });
        });
    };

    classProto.processField = function(value, data){
        var that = this;
        data = cm.merge({
            'value' : value,
            'name' : null,
            'size' : null,
            'field' : null,
            'controller' : null,
            'container' : null
        }, data);
        // Controller
        data['field'] = that.components['form'].getField(data['name']);
        if(data['field']){
            data['controller'] = data['field']['controller'];
            data['container'] = data['controller'].getContainer();
        }
        // Export
        that.fields[data['name']] = data;
    };

    classProto.renderToolbar = function(){
        var that = this;
        // Toolbar
        cm.getConstructor('Com.Toolbar', function(classConstructor, className){
            that.components['toolbar'] = new classConstructor(
                cm.merge(that.params[className], {
                    'container' : that.nodes['container']
                })
            );
            that.components['toolbar']
                .addGroup({
                    'name' : 'trigger',
                    'position' : 'left'
                })
                .addGroup({
                    'name' : 'fields',
                    'position' : 'left'
                })
                .addField({
                    'group' : 'trigger',
                    'name' : 'trigger',
                    'node' : that.components['trigger'].getContainer(),
                    'size' : that.params['triggerFieldSize']
                })
        });
        // Fields
        cm.forEach(that.fields, function(field, name){
            that.components['toolbar'].addField({
                'group' : 'fields',
                'name' : field['name'],
                'node' : field['container'],
                'size' : field['size'],
                'hidden' : true
            });
        })
    };

    /******* HANDLERS *******/

    classProto.changeEvent = function(){
        var that = this;
        that.toggle();
    };

    classProto.toggle = function(){
        var that = this;
        var value = that.components['trigger'].get();
        cm.forEach(that.fields, function(field, name){
            if(field['value'] == value){
                that.components['toolbar'].showField(field['name'], 'fields');
            }else{
                that.components['toolbar'].hideField(field['name'], 'fields');
            }
        });
    };
});

/* ****** FORM FIELD COMPONENT ******* */

Com.FormFields.add('select-field-trigger', {
    'field' : false,
    'fieldConstructor' : 'Com.AbstractFormField',
    'constructor' : 'Com.SelectFieldTrigger'
});
cm.define('Com.TagsInput', {
    'modules' : [
        'Params',
        'Events',
        'Langs',
        'Structure',
        'DataConfig',
        'Stack'
    ],
    'require' : [
        'Com.Autocomplete'
    ],
    'events' : [
        'onRender',
        'onAdd',
        'onRemove',
        'onChange',
        'onOpen',
        'onClose',
        'onReset'
    ],
    'params' : {
        'input' : null,                                 // Deprecated, use 'node' parameter instead.
        'node' : cm.node('input', {'type' : 'text'}),
        'container' : null,
        'name' : '',
        'embedStructure' : 'replace',
        'data' : [],
        'maxSingleTagLength': 255,
        'max' : 0,                                      // Not implemented
        'autocomplete' : false,
        'icons' : {
            'add' : 'icon default linked',
            'remove' : 'icon default linked'
        },
        'Com.Autocomplete' : {
            'clearOnEmpty' : false
        }
    },
    'strings' : {
        'tags' : 'Tags',
        'add' : 'Add',
        'remove' : 'Remove',
        'placeholder' : 'Add tags...'
    }
},
function(params){
    var that = this,
        nodes = {},
        tags = [],
        items = {};

    that.isDestructed = null;
    that.value = null;
    that.components = {};
    that.isAutocomplete = false;

    var init = function(){
        var sourceTags, splitTags;
        preValidateParams();
        // Init modules
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataConfig(that.params['node']);
        // Render
        validateParams();
        render();
        that.addToStack(nodes['container']);
        that.triggerEvent('onRender');
        // Set tags
        splitTags = that.params['node'].value.split(',');
        sourceTags = cm.extend(that.params['data'], splitTags);
        cm.forEach(sourceTags, function(tag){
            addTag(tag);
        });
    };

    var preValidateParams = function(){
        if(cm.isNode(that.params['input'])){
            that.params['node'] = that.params['input'];
        }
    };

    var validateParams = function(){
        if(cm.isNode(that.params['node'])){
            that.params['name'] = that.params['node'].getAttribute('name') || that.params['name'];
        }
        that.isAutocomplete = that.params['autocomplete'];
    };

    var render = function(){
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__tags-input'},
            nodes['hidden'] = cm.node('input', {'type' : 'hidden'}),
            nodes['inner'] = cm.node('div', {'class' : 'inner input'},
                nodes['tags'] = cm.node('div', {'class' : 'tags'})
            )
        );
        renderInput();
        // Attributes
        if(that.params['name']){
            nodes['hidden'].setAttribute('name', that.params['name']);
        }
        // Events
        cm.addEvent(nodes['container'], 'click', function(e){
            var target = cm.getEventTarget(e);
            if(!cm.isParent(nodes['tags'], target, true)){
                nodes['input'].focus();
            }
        });
        // Append
        that.embedStructure(nodes['container']);

    };

    var renderInput = function(){
        // Structure
        nodes['input'] = cm.node('input', {'type' : 'text', 'maxlength' : that.params['maxSingleTagLength'], 'class' : 'adder', 'placeholder' : that.lang('placeholder')});
        cm.appendChild(nodes['input'], nodes['inner']);
        // Autocomplete
        if(that.isAutocomplete){
            cm.getConstructor('Com.Autocomplete', function(classConstructor){
                that.components['autocomplete'] = new classConstructor(cm.merge(that.params['Com.Autocomplete'], {
                    'events' : {
                        'onClickSelect' : function(){
                            addAdderTags(true);
                        }
                    }
                }));
            });
            that.components['autocomplete'].setTarget(nodes['input']);
            that.components['autocomplete'].setInput(nodes['input']);
        }
        // Add new tag on comma
        cm.addEvent(nodes['input'], 'keypress', function(e){
            if(e.charCode === 44 || e.charCode === 59){
                cm.preventDefault(e);
                addAdderTags(true);
                that.isAutocomplete && that.components['autocomplete'].hide();
            }
        });
        // Add new tag on enter or escape
        cm.addEvent(nodes['input'], 'keydown', function(e){
            if(cm.isKey(e, ['enter', 'escape'])){
                cm.preventDefault(e);
                addAdderTags(true);
                that.isAutocomplete && that.components['autocomplete'].hide();
            }
        });
        cm.addEvent(nodes['input'], 'focus', function(){
            cm.addClass(nodes['container'], 'active');
            cm.addClass(nodes['inner'], 'input-focus');
        });
        cm.addEvent(nodes['input'], 'blur', function(){
            addAdderTags(true);
            cm.removeClass(nodes['container'], 'active');
            cm.removeClass(nodes['inner'], 'input-focus');
        });
    };

    var addAdderTags = function(execute){
        var sourceTags = nodes['input'].value.split(',');
        cm.forEach(sourceTags, function(tag){
            addTag(tag, execute);
        });
        nodes['input'].value = '';
        that.isAutocomplete && that.components['autocomplete'].clear();
    };

    var addTag = function(tag, execute){
        tag = tag.trim();
        if(tag && tag.length && !/^[\s]*$/.test(tag) && !cm.inArray(tags, tag)){
            tags.push(tag);
            renderTag(tag);
            setHiddenInputData();
            // Execute events
            if(execute){
                // API onChange Event
                that.triggerEvent('onChange', {'tag' : tag});
                // API onAdd Event
                that.triggerEvent('onAdd', {'tag' : tag});
            }
        }
    };

    var renderTag = function(tag){
        var item = {
            'tag' : tag
        };
        // Structure
        item['container'] = cm.node('div', {'class' : 'item'},
            cm.node('div', {'class' : 'inner'},
                cm.node('div', {'class' : 'text', 'title' : tag}, tag),
                item['button'] = cm.node('div', {'class' : that.params['icons']['remove'], 'title' : that.lang('remove')})
            )
        );
        item['anim'] = new cm.Animation(item['container']);
        // Append
        cm.appendChild(item['container'], nodes['tags']);
        // Add click event on "Remove Tag" button
        cm.addEvent(item['button'], 'click', function(){
            removeTag(item);
        });
        // Push to global array
        items[tag] = item;
    };

    var removeTag = function(item){
        // Remove tag from data
        tags = cm.arrayRemove(tags, item['tag']);
        delete items[item['tag']];
        setHiddenInputData();
        // API onChange Event
        that.triggerEvent('onChange', {
            'tag' : item['tag']
        });
        // API onRemove Event
        that.triggerEvent('onRemove', {
            'tag' : item['tag']
        });
        // Hide
        cm.remove(item['container']);
        item = null;
    };

    var setHiddenInputData = function(){
        that.value = tags.join(',');
        nodes['hidden'].value = that.value;
    };

    /* ******* MAIN ******* */

    that.destruct = function(){
        var that = this;
        if(!that.isDestructed){
            that.isDestructed = true;
            that.removeFromStack();
        }
        return that;
    };

    that.get = function(){
        return !cm.isEmpty(that.value) ? that.value : '';
    };

    that.set = function(value){
        that.add(value);
        return that;
    };

    that.add = function(tag /* or tags comma separated or array */){
        var sourceTags;
        if(!tag){
            sourceTags = [];
        }else if(cm.isArray(tag)){
            sourceTags = tag;
        }else{
            sourceTags = tag.split(',');
        }
        cm.forEach(sourceTags, function(tag){
            addTag(tag, true);
        });
        return that;
    };

    that.remove = function(tag){
        var sourceTags;
        if(!tag){
            sourceTags = [];
        }else if(cm.isArray(tag)){
            sourceTags = tag;
        }else{
            sourceTags = tag.split(',');
        }
        cm.forEach(sourceTags, function(tag){
            if(cm.inArray(tags, tag)){
                removeTag(items[tag]);
            }
        });
        return that;
    };

    that.reset = function(){
        cm.forEach(items, function(item){
            removeTag(item, true);
        });
        that.triggerEvent('onReset');
        return that;
    };

    that.getAutocomplete = function(){
        return that.components['autocomplete'];
    };

    init();
});

/* ****** FORM FIELD COMPONENT ******* */

Com.FormFields.add('tags', {
    'node' : cm.node('input', {'type' : 'text'}),
    'fieldConstructor' : 'Com.AbstractFormField',
    'constructor' : 'Com.TagsInput'
});
cm.define('Com.TimeSelect', {
    'modules' : [
        'Params',
        'Events',
        'Langs',
        'Structure',
        'DataConfig',
        'Stack'
    ],
    'events' : [
        'onRender',
        'onSelect',
        'onChange',
        'onClear'
    ],
    'params' : {
        'input' : null,                                  // Deprecated, use 'node' parameter instead.
        'node' : cm.node('input', {'type' : 'text'}),
        'container' : null,
        'embedStructure' : 'replace',
        'name' : '',
        'renderSelectsInBody' : true,
        'size' : 'default',                              // default, full, custom
        'format' : 'cm._config.timeFormat',
        'showTitleTag' : true,
        'title' : false,
        'withHours' : true,
        'hoursInterval' : 0,
        'hoursFormat' : 24,
        'withMinutes' : true,
        'minutesInterval' : 0,
        'withSeconds' : false,
        'secondsInterval' : 0,
        'selected' : 0
    },
    'strings' : {
        'separator' : ':',
        'Hours' : 'HH',
        'Minutes' : 'MM',
        'Seconds' : 'SS',
        'HoursTitle' : 'Hours',
        'MinutesTitle' : 'Minutes',
        'SecondsTitle' : 'Seconds'
    }
},
function(params){
    var that = this,
        nodes = {},
        components = {};

    that.date = new Date();
    that.value = 0;
    that.previousValue = 0;
    that.disabled = false;

    var init = function(){
        that.setParams(params);
        preValidateParams();
        that.convertEvents(that.params['events']);
        that.getDataConfig(that.params['node']);
        validateParams();
        render();
        setMiscEvents();
        that.addToStack(nodes['container']);
        // Set selected time
        if(that.params['selected']){
            that.set(that.params['selected'], that.params['format'], false);
        }else{
            that.set(that.params['node'].value, that.params['format'], false);
        }
    };

    var preValidateParams = function(){
        if(cm.isNode(that.params['input'])){
            that.params['node'] = that.params['input'];
        }
    };

    var validateParams = function(){
        if(cm.isNode(that.params['node'])){
            that.params['title'] = that.params['node'].getAttribute('title') || that.params['title'];
            that.params['name'] = that.params['node'].getAttribute('name') || that.params['name'];
        }
        if(cm.isEmpty(that.params['hoursInterval']) || that.params['hoursInterval'] === 0){
            that.params['hoursInterval'] = 1;
        }
        if(cm.isEmpty(that.params['minutesInterval']) || that.params['minutesInterval'] === 0){
            that.params['minutesInterval'] = 1;
        }
        if(cm.isEmpty(that.params['secondsInterval']) || that.params['secondsInterval'] === 0){
            that.params['secondsInterval'] = 1;
        }
    };

    var render = function(){
        /* *** STRUCTURE *** */
        nodes['container'] = cm.node('div', {'class' : 'com__timeselect'},
            nodes['hidden'] = cm.node('input', {'type' : 'hidden'}),
            nodes['inner'] = cm.node('div', {'class' : 'inner'})
        );
        if(!cm.isEmpty(that.params['size'])){
            cm.addClass(nodes['container'], ['size', that.params['size']].join('-'));
        }
        /* *** ITEMS *** */
        // Hours
        if(that.params['withHours']){
            renderHours();
        }
        // Minutes
        if(that.params['withMinutes']){
            renderMinutes();
        }
        // Seconds
        if(that.params['withSeconds']){
            renderSeconds();
        }
        /* *** ATTRIBUTES *** */
        // Title
        if(that.params['showTitleTag'] && that.params['title']){
            nodes['container'].title = that.params['title'];
        }
        // Name
        if(that.params['name']){
            nodes['hidden'].setAttribute('name', that.params['name']);
        }
        /* *** INSERT INTO DOM *** */
        that.embedStructure(nodes['container']);
    };

    var renderHours = function(){
        var hours = 0,
            label;

        if(nodes['inner'].childNodes.length){
            nodes['inner'].appendChild(cm.node('div', {'class' : 'sep'}, that.lang('separator')));
        }
        nodes['inner'].appendChild(cm.node('div', {'class' : 'field'},
            nodes['selectHours'] = cm.node('select', {'placeholder' : that.lang('Hours'), 'title' : that.lang('HoursTitle')})
        ));
        while(hours < 24){
            if(that.params['hoursFormat'] === 24){
                label = cm.addLeadZero(hours);
            }else{
                label = [(hours % 12 || 12), (hours < 12 ? 'am' : 'pm')].join('');
            }
            nodes['selectHours'].appendChild(
                cm.node('option', {'value' : hours}, label)
            );
            hours += that.params['hoursInterval'];
        }
    };

    var renderMinutes = function(){
        var minutes = 0;

        if(nodes['inner'].childNodes.length){
            nodes['inner'].appendChild(cm.node('div', {'class' : 'sep'}, that.lang('separator')));
        }
        nodes['inner'].appendChild(cm.node('div', {'class' : 'field'},
            nodes['selectMinutes'] = cm.node('select', {'placeholder' : that.lang('Minutes'), 'title' : that.lang('MinutesTitle')})
        ));
        while(minutes < 60){
            nodes['selectMinutes'].appendChild(
                cm.node('option', {'value' : minutes}, cm.addLeadZero(minutes))
            );
            minutes += that.params['minutesInterval'];
        }
    };

    var renderSeconds = function(){
        var seconds = 0;

        if(nodes['inner'].childNodes.length){
            nodes['inner'].appendChild(cm.node('div', {'class' : 'sep'}, that.lang('separator')));
        }
        nodes['inner'].appendChild(cm.node('div', {'class' : 'field'},
            nodes['selectSeconds'] = cm.node('select', {'placeholder' : that.lang('Seconds'), 'title' : that.lang('SecondsTitle')})
        ));
        while(seconds < 60){
            nodes['selectSeconds'].appendChild(
                cm.node('option', {'value' : seconds},cm.addLeadZero(seconds))
            );
            seconds += that.params['secondsInterval'];
        }
    };

    var setMiscEvents = function(){
        // Hours select
        if(that.params['withHours']){
            components['selectHours'] = new Com.Select({
                    'select' : nodes['selectHours'],
                    'renderInBody' : that.params['renderSelectsInBody']
                }).addEvent('onChange', function(){
                    set(true);
                });
        }
        // Minutes select
        if(that.params['withMinutes']){
            components['selectMinutes'] = new Com.Select({
                    'select' : nodes['selectMinutes'],
                    'renderInBody' : that.params['renderSelectsInBody']
                }).addEvent('onChange', function(){
                    set(true);
                });
        }
        // Seconds select
        if(that.params['withSeconds']){
            components['selectSeconds'] = new Com.Select({
                    'select' : nodes['selectSeconds'],
                    'renderInBody' : that.params['renderSelectsInBody']
                })
                .addEvent('onChange', function(){
                    set(true);
                });
        }
        // Trigger onRender Event
        that.triggerEvent('onRender');
    };

    var set = function(triggerEvents){
        that.previousValue = that.value;
        that.params['withHours'] && that.date.setHours(components['selectHours'].get());
        that.params['withMinutes'] && that.date.setMinutes(components['selectMinutes'].get());
        that.params['withSeconds'] && that.date.setSeconds(components['selectSeconds'].get());
        that.value = cm.dateFormat(that.date, that.params['format']);
        nodes['hidden'].value = that.value;
        // Trigger events
        if(triggerEvents){
            that.triggerEvent('onSelect', that.value);
            onChange();
        }
    };

    var onChange = function(){
        if(!that.previousValue || (!that.value && that.previousValue) || (that.value != that.previousValue)){
            that.triggerEvent('onChange', that.value);
        }
    };

    /* ******* MAIN ******* */

    that.set = function(str, format, triggerEvents){
        format = !cm.isUndefined(format) ? format : that.params['format'];
        triggerEvents = !cm.isUndefined(triggerEvents) ? triggerEvents : true;
        // Get time
        if(cm.isEmpty(str) || typeof str == 'string' && new RegExp(cm.dateFormat(false, that.params['format'])).test(str)){
            that.clear();
            return that;
        }else if(typeof str == 'object'){
            that.date = str;
        }else{
            that.date = cm.parseDate(str, format);
        }
        // Set components
        that.params['withHours'] && components['selectHours'].set(that.date.getHours(), false);
        that.params['withMinutes'] && components['selectMinutes'].set(that.date.getMinutes(), false);
        that.params['withSeconds'] && components['selectSeconds'].set(that.date.getSeconds(), false);
        // Set time
        set(triggerEvents);
        return that;
    };

    that.get = function(){
        return that.value;
    };

    that.getDate = function(){
        return that.date;
    };

    that.getHours = function(){
        return that.date.getHours();
    };

    that.getMinutes = function(){
        return that.date.getMinutes();
    };

    that.getSeconds = function(){
        return that.date.getSeconds();
    };

    that.clear = function(triggerEvents){
        triggerEvents = typeof triggerEvents != 'undefined'? triggerEvents : true;
        // Clear time
        that.date.setHours(0);
        that.date.setMinutes(0);
        that.date.setSeconds(0);
        // Clear components
        that.params['withHours'] && components['selectHours'].set(that.date.getHours(), false);
        that.params['withMinutes'] && components['selectMinutes'].set(that.date.getMinutes(), false);
        that.params['withSeconds'] && components['selectSeconds'].set(that.date.getSeconds(), false);
        // Set time
        set(false);
        // Trigger events
        if(triggerEvents){
            that.triggerEvent('onClear', that.value);
            onChange();
        }
        return that;
    };

    that.disable = function(){
        that.disabled = true;
        that.params['withHours'] && components['selectHours'].disable();
        that.params['withMinutes'] && components['selectMinutes'].disable();
        that.params['withSeconds'] && components['selectSeconds'].disable();
        return that;
    };

    that.enable = function(){
        that.disabled = false;
        that.params['withHours'] && components['selectHours'].enable();
        that.params['withMinutes'] && components['selectMinutes'].enable();
        that.params['withSeconds'] && components['selectSeconds'].enable();
        return that;
    };

    init();
});

cm.define('Com.TintRange', {
    'extend' : 'Com.AbstractRange',
    'params' : {
        'className' : 'com__range',
        'theme' : 'theme--arrows',
        'min' : 360,
        'max' : 0,
        'value' : 360
    }
},
function(params){
    var that = this;
    Com.AbstractRange.apply(that, arguments);
});

cm.getConstructor('Com.TintRange', function(classConstructor, className, classProto){
    classProto.renderRangeContent = function(){
        var that = this,
            nodes = {};
        that.nodes['rangeContent'] = nodes;
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__tint-range__content'});
        // Export
        return nodes['container'];
    };
});

/* ****** FORM FIELD COMPONENT ******* */

Com.FormFields.add('tint-range', {
    'node' : cm.node('input', {'type' : 'text'}),
    'fieldConstructor' : 'Com.AbstractFormField',
    'constructor' : 'Com.TintRange'
});
cm.define('Com.TwoSideMultiSelect', {
    'extend' : 'Com.AbstractInput',
    'params' : {
        'controllerEvents' : true,
        'className' : 'com__two-side-multi-select',
        'setHiddenInput' : true,
        'defaultValue' : [],
        'options' : [],
        'showLabels' : false,
        'selectConstructor' : 'Com.Select',
        'selectParams' : {
            'node' : cm.node('select', {'multiple' : true}),
            'multiple' : true,
            'className' : 'is-max'
        }
    },
    'strings' : {
        'firstLabel' : 'Left:',
        'secondLabel' : 'Right:',
        'add' : '>>',
        'remove' : '<<',
        'addTitle' : 'Add',
        'removeTitle' : 'Remove'
    }
},
function(params){
    var that = this;
    // Call parent class construct
    Com.AbstractInput.apply(that, arguments);
});

cm.getConstructor('Com.TwoSideMultiSelect', function(classConstructor, className, classProto){
    var _inherit = classProto._inherit;

    classProto.onConstructStart = function(){
        var that = this;
        // Variables
        that.value = [];
        that.options = {};
        // Binds
        that.keyPressHandler = that.keyPressHelper.bind(that);
        that.moveToLeftHandler = that.moveToLeft.bind(that);
        that.moveToRightHandler = that.moveToRight.bind(that);
    };

    classProto.validateParamsValue = function(){
        var that = this,
            value;
        if(cm.isNode(that.params['node'])){
            value = cm.getSelectValue(that.params['node']);
            that.params['value'] = !cm.isEmpty(value) ?  value : that.params['value'];
        }
        that.params['value'] = !cm.isEmpty(that.params['value']) ? that.params['value'] : that.params['defaultValue'];
    };

    classProto.onSetEvents = function(){
        var that = this;
        cm.addEvent(window, 'keypress', that.keyPressHandler);
    };

    classProto.onUnsetEvents = function(){
        var that = this;
        cm.removeEvent(window, 'keypress', that.keyPressHandler);
    };

    /*** VIEW MODEL ***/

    classProto.renderHiddenContent = function(){
        var that = this,
            nodes = {};
        that.nodes['hiddenContent'] = nodes;
        // Structure
        nodes['container'] = nodes['input'] = cm.node('select', {'class' : 'display-none', 'multiple' : true});
        // Export
        return nodes['container'];
    };

    classProto.renderContent = function(){
        var that = this,
            nodes = {};
        that.nodes['content'] = nodes;
        that.triggerEvent('onRenderContentStart');
        // Structure
        nodes['container'] = cm.node('div', {'class' : 'com__two-side__content'},
            nodes['inner'] = cm.node('div', {'class' : 'inner'},
                nodes['firstColumn'] = cm.node('div', {'class' : 'column column--first'}),
                nodes['controls'] = cm.node('div', {'class' : 'controls'},
                    nodes['moveToRight'] = cm.node('button', {'class' : 'button button-primary is-box', 'type' : 'button', 'title' : that.lang('addTitle')}, that.lang('add')),
                    nodes['moveToLeft'] = cm.node('button', {'class' : 'button button-primary is-box', 'type' : 'button', 'title' : that.lang('removeTitle')}, that.lang('remove'))
                ),
                nodes['secondColumn'] = cm.node('div', {'class' : 'column column--second'})
            )
        );
        // Labels
        if(that.params['showLabels']){
            cm.appendChild(
                cm.node('div', {'class' : 'label'}, that.lang('firstLabel')),
                nodes['firstColumn']
            );
            cm.appendChild(
                cm.node('div', {'class' : 'label'}, that.lang('secondLabel')),
                nodes['secondColumn']
            );
            cm.addClass(nodes['container'], 'has-labels');
        }
        // Events
        that.triggerEvent('onRenderContentProcess');
        cm.addEvent(nodes['moveToRight'], 'click', that.moveToRightHandler);
        cm.addEvent(nodes['moveToLeft'], 'click', that.moveToLeftHandler);
        that.triggerEvent('onRenderContentEnd');
        // Export
        return nodes['container'];
    };

    classProto.renderViewModel = function(){
        var that = this;
        // Call parent method
        _inherit.prototype.renderViewModel.apply(that, arguments);
        // Render selects
        cm.getConstructor(that.params['selectConstructor'], function(classConstructor){
            that.components['firstSelect'] = new classConstructor(
                cm.merge(that.params['selectParams'], {
                    'container' : that.nodes['content']['firstColumn']
                })
            );
            that.components['secondSelect'] = new classConstructor(
                cm.merge(that.params['selectParams'], {
                    'container' : that.nodes['content']['secondColumn']
                })
            );
        });
        // Collect and render options
        that.collectOptions();
        // Render data options
        cm.forEach(that.params['options'], function(item){
            that.renderOption(item);
        });
    };

    /*** OPTIONS ***/

    classProto.collectOptions = function(){
        var that = this;
        cm.forEach(that.params['node'].options, function(item){
            that.renderOption({
                'value' : item.value,
                'text' : item.innerHTML
            });
        });
    };

    classProto.renderOption = function(item){
        var that = this;
        // Validate
        item = cm.merge({
            'value' : null,
            'text' : null
        }, item);
        item['value'] = !cm.isUndefined(item['value'])? item['value'] : item['text'];
        // Render hidden option
        item['option'] = cm.node('option', {'value' : item['value'], 'innerHTML' : item['text']});
        that.nodes['hidden'].appendChild(item['option']);
        // Add options
        that.components['firstSelect'].addOption(item['value'], item['text']);
        that.options[item['value']] = item;
    };

    /*** MOVE ***/

    classProto.moveToLeft = function(){
        var that = this,
            selected = that.components['secondSelect'].get();
        if(!cm.isEmpty(selected)){
            that.components['secondSelect'].deselectAll();
            selected = cm.extract(that.value, selected);
            that.set(selected, true);
        }
    };

    classProto.moveToRight = function(){
        var that = this,
            selected = that.components['firstSelect'].get();
        if(!cm.isEmpty(selected)){
            that.components['firstSelect'].deselectAll();
            selected = cm.extend(that.value, selected);
            that.set(selected, true);
        }
    };

    classProto.moveOptionToLeft = function(item){
        var that = this;
        if(item['selected']){
            item['selected'] = false;
            that.components['secondSelect'].removeOption(item['value']);
            that.components['firstSelect'].showOption(item['value']);
        }
    };

    classProto.moveOptionToRight = function(item){
        var that = this;
        if(!item['selected']){
            item['selected'] = true;
            that.components['secondSelect'].addOption(item['value'], item['text']);
            that.components['firstSelect'].hideOption(item['value']);
        }
    };

    /*** EVENTS ***/

    classProto.keyPressHelper = function(e){
        var that = this,
            target = cm.getElementAbove(e);
        cm.handleKey(e, 'enter', function(e){
            if(cm.isParent(that.nodes['content']['firstColumn'], target, true)){
                cm.preventDefault(e);
                that.moveToRight();
            }
            if(cm.isParent(that.nodes['content']['secondColumn'], target, true)){
                cm.preventDefault(e);
                that.moveToLeft();
            }
        });
    };

    /*** VALUE ***/

    classProto.saveHiddenValue = function(value){
        var that = this,
            isInArray,
            isSelected;
        cm.forEach(that.options, function(item){
            if(!cm.isEmpty(value)){
                isInArray = cm.isArray(value) && cm.inArray(value, item['value']);
                isSelected = isInArray || item['value'] === value;
                item['option'].selected = isSelected;
            }else{
                item['option'].selected = false;
            }
        });
    };

    classProto.setData = function(value){
        var that = this,
            isInArray,
            isSelected;
        cm.forEach(that.options, function(item){
            if(!cm.isEmpty(value)){
                isInArray = cm.isArray(value) && cm.inArray(value, item['value']);
                isSelected = isInArray || item['value'] === value;
                if(isSelected){
                    that.moveOptionToRight(item);
                }else{
                    that.moveOptionToLeft(item);
                }
            }else{
                that.moveOptionToLeft(item);
            }
        });
    };
});
window.LESS = {"CmIconVars-Family":"Magpie-UI-Glyphs","CmIconVars-Color":"#666666","CmIconVars-Version":"3.94.0","CmIcon-Magnify":"\\e600","CmIcon-Reduce":"\\e601","CmIcon-CircleArrowLeft":"\\e700","CmIcon-CircleArrowRight":"\\e701","CmIcon-CircleArrowUp":"\\e702","CmIcon-CircleArrowDown":"\\e703","CmIcon-CircleClose":"\\e704","CmIcon-CircleTwitter":"\\e800","CmIcon-CircleInstagram":"\\e801","CmIcon-CircleYoutube":"\\e802","CmIcon-CircleVK":"\\e803","CmIcon-CircleFacebook":"\\e804","CmIcon-ChevronDown":"\\e900","CmIcon-ChevronUp":"\\e901","CmIcon-ChevronLeft":"\\e902","CmIcon-ChevronRight":"\\e903","CmIconIA-Spinner-BorderSize":"3px","CmIconIA-Spinner-BorderSizeLarge":"6px","CmIconIA-Spinner-DefaultBackground":"#e8e8e8","CmIconIA-Spinner-ActiveBackground":"#2985e0","CmVersion":"3.94.0","CmProtocol":"","CmPath-Images":"../img/MagpieUI","CmPath-Fonts":"../fonts/MagpieUI","CmSize-None":"0px","CmSize-XXXXSmall":"2px","CmSize-XXXSmall":"4px","CmSize-XXSmall":"8px","CmSize-XSmall":"12px","CmSize-Small":"16px","CmSize-Medium":"24px","CmSize-Large":"32px","CmSize-XLarge":"48px","CmSize-XXLarge":"64px","CmSize-XXXLarge":"96px","CmIndent-None":"0px","CmIndent-XXXXSmall":"2px","CmIndent-XXXSmall":"4px","CmIndent-XXSmall":"8px","CmIndent-XSmall":"12px","CmIndent-Small":"16px","CmIndent-Medium":"24px","CmIndent-Large":"32px","CmIndent-XLarge":"48px","CmIndent-XXLarge":"64px","CmIndent-XXXLarge":"96px","CmIndents":["0px","2px","4px","8px","12px","16px","24px","32px","48px","64px","96px"],"CmUI-Transition-Duration":"250ms","CmUI-Transition-DurationMedium":"150ms","CmUI-Transition-DurationShort":"100ms","CmUI-Transition-DurationLong":"500ms","CmUI-Transition-DurationXLong":"750ms","CmUI-Transition-DurationXXLong":"1000ms","CmUI-Transition-DurationReverse":"100ms","CmUI-Transition-DurationNone":"0ms","CmUI-Transition-Delay-Hide":"300ms","CmUI-MotionAsymmetric":"cubic-bezier(0.5, 0, 0.15, 1)","CmUI-MotionBounce":"cubic-bezier(0.5, 0.1, 0.4, 1.3)","CmUI-Opacity-Transparent":0.01,"CmUI-Opacity-Hover":0.7,"CmUI-Shadow":[0,0,"8px","rgba(0, 0, 0, 0.15)"],"CmUI-ShadowLight":[0,0,"2px","rgba(0, 0, 0, 0.2)"],"CmUI-ShadowInner":[0,"2px","2px","rgba(0, 0, 0, 0.4)","inset"],"CmUI-Shadow-Top":[0,"-2px","5px","rgba(0, 0, 0, 0.15)"],"CmUI-Shadow-TopSmall":[0,"-1px","2px","rgba(0, 0, 0, 0.15)"],"CmUI-Shadow-Bottom":[0,"2px","5px","rgba(0, 0, 0, 0.15)"],"CmUI-Shadow-BottomLarge":[0,"2px","12px","rgba(0, 0, 0, 0.2)"],"CmUI-Shadow-BottomSmall":[0,"1px","2px","rgba(0, 0, 0, 0.15)"],"CmUI-Shadow-Right":["2px",0,"5px","rgba(0, 0, 0, 0.15)"],"CmUI-Shadow-Left":["-2px",0,"5px","rgba(0, 0, 0, 0.15)"],"CmUI-Shadow-Card":[0,"1px","2px","rgba(0, 0, 0, 0.25)"],"CmUI-Overlay":"rgba(255, 255, 255, 0.7)","CmUI-Overlay-Fade":0.7,"CmUI-Overlay-FadeHeight":0.9,"CmUI-Overlay-FadeHigh":0.9,"CmUI-Overlay-FadeMedium":0.3,"CmUI-Overlay-FadeP":"70%","CmUI-Overlay-FadeHeightP":"90%","CmUI-Overlay-FadeHighP":"90%","CmUI-Overlay-FadeMediumP":"30%","CmUI-Overlay-Dark":"rgba(0, 0, 0, 0.7)","CmUI-Overlay-Light":"rgba(255, 255, 255, 0.7)","CmUI-Overlay-Duration":"500ms","CmUI-AdaptiveFrom":"768px","CmUI-TooltipWidth":"320px","CmUI-ColumnIndent":"24px","CmUI-BoxIndent":"24px","CmUI-GoogleFont":"Open+Sans","CmUI-GoogleFont-Enable":"true","CmUI-GoogleFont-Weight":"100,300,400,600,700,800","CmVar-Color-LightDefault-Lightness":"100%","CmVar-Color-LightHighlight-Lightness":"98%","CmVar-Color-LightHover-Lightness":"95%","CmVar-Color-LightActive-Lightness":"91%","CmVar-Color-LightActiveHover-Lightness":"86%","CmVar-Color-MiddleDefault-Lightness":"80%","CmVar-Color-MiddleHover-Lightness":"75%","CmVar-Color-MiddleActive-Lightness":"70%","CmVar-Color-MiddleActiveHover-Lightness":"65%","CmVar-Color-DarkDefault-Lightness":"52%","CmVar-Color-DarkHover-Lightness":"45%","CmVar-Color-DarkActive-Lightness":"35%","CmVar-Color-DarkActiveHover-Lightness":"25%","CmColor-Primary":210,"CmColor-Primary-DarkSaturation":"75%","CmColor-Primary-DarkLighten":"0%","CmColor-Primary-DarkDefault-Lightness":"52%","CmColor-Primary-DarkHover-Lightness":"45%","CmColor-Primary-DarkActive-Lightness":"35%","CmColor-Primary-DarkActiveHover-Lightness":"25%","CmColor-Primary-DarkDefault":"#2985e0","CmColor-Primary-DarkHover":"#1d73c9","CmColor-Primary-DarkActive":"#16599c","CmColor-Primary-DarkActiveHover":"#104070","CmColor-Primary-MiddleSaturation":"75%","CmColor-Primary-MiddleLighten":"0%","CmColor-Primary-MiddleDefault-Lightness":"80%","CmColor-Primary-MiddleHover-Lightness":"75%","CmColor-Primary-MiddleActive-Lightness":"70%","CmColor-Primary-MiddleActiveHover-Lightness":"65%","CmColor-Primary-MiddleDefault":"#a6ccf2","CmColor-Primary-MiddleHover":"#8fbfef","CmColor-Primary-MiddleActive":"#79b2ec","CmColor-Primary-MiddleActiveHover":"#63a6e9","CmColor-Primary-LightSaturation":"70%","CmColor-Primary-LightLighten":"0%","CmColor-Primary-LightHighlight-Lightness":"98%","CmColor-Primary-LightHover-Lightness":"95%","CmColor-Primary-LightActive-Lightness":"91%","CmColor-Primary-LightActiveHover-Lightness":"86%","CmColor-Primary-LightDefault":"transparent","CmColor-Primary-LightHighlight":"#f6fafd","CmColor-Primary-LightHover":"#e9f2fb","CmColor-Primary-LightActive":"#d8e8f8","CmColor-Primary-LightActiveHover":"#c2dbf4","CmColor-Secondary":0,"CmColor-Secondary-DarkSaturation":"0%","CmColor-Secondary-DarkLighten":"0%","CmColor-Secondary-DarkDefault-Lightness":"52%","CmColor-Secondary-DarkHover-Lightness":"45%","CmColor-Secondary-DarkActive-Lightness":"35%","CmColor-Secondary-DarkActiveHover-Lightness":"25%","CmColor-Secondary-DarkDefault":"#858585","CmColor-Secondary-DarkHover":"#737373","CmColor-Secondary-DarkActive":"#595959","CmColor-Secondary-DarkActiveHover":"#404040","CmColor-Secondary-MiddleSaturation":"0%","CmColor-Secondary-MiddleLighten":"0%","CmColor-Secondary-MiddleDefault-Lightness":"80%","CmColor-Secondary-MiddleHover-Lightness":"75%","CmColor-Secondary-MiddleActive-Lightness":"70%","CmColor-Secondary-MiddleActiveHover-Lightness":"65%","CmColor-Secondary-MiddleDefault":"#cccccc","CmColor-Secondary-MiddleHover":"#bfbfbf","CmColor-Secondary-MiddleActive":"#b3b3b3","CmColor-Secondary-MiddleActiveHover":"#a6a6a6","CmColor-Secondary-LightSaturation":"0%","CmColor-Secondary-LightLighten":"0%","CmColor-Secondary-LightHighlight-Lightness":"98%","CmColor-Secondary-LightHover-Lightness":"95%","CmColor-Secondary-LightActive-Lightness":"91%","CmColor-Secondary-LightActiveHover-Lightness":"86%","CmColor-Secondary-LightDefault":"transparent","CmColor-Secondary-LightHighlight":"#fafafa","CmColor-Secondary-LightHover":"#f2f2f2","CmColor-Secondary-LightActive":"#e8e8e8","CmColor-Secondary-LightActiveHover":"#dbdbdb","CmColor-Success":120,"CmColor-Success-DarkSaturation":"65%","CmColor-Success-DarkLighten":"-10%","CmColor-Success-DarkDefault-Lightness":"52%","CmColor-Success-DarkHover-Lightness":"45%","CmColor-Success-DarkActive-Lightness":"35%","CmColor-Success-DarkActiveHover-Lightness":"25%","CmColor-Success-DarkDefault":"#25b125","CmColor-Success-DarkHover":"#1f931f","CmColor-Success-DarkActive":"#166916","CmColor-Success-DarkActiveHover":"#0d3f0d","CmColor-Success-MiddleSaturation":"65%","CmColor-Success-MiddleLighten":"0%","CmColor-Success-MiddleDefault-Lightness":"80%","CmColor-Success-MiddleHover-Lightness":"75%","CmColor-Success-MiddleActive-Lightness":"70%","CmColor-Success-MiddleActiveHover-Lightness":"65%","CmColor-Success-MiddleDefault":"#abedab","CmColor-Success-MiddleHover":"#96e996","CmColor-Success-MiddleActive":"#81e481","CmColor-Success-MiddleActiveHover":"#6ce06c","CmColor-Success-LightSaturation":"60%","CmColor-Success-LightLighten":"0%","CmColor-Success-LightHighlight-Lightness":"98%","CmColor-Success-LightHover-Lightness":"95%","CmColor-Success-LightActive-Lightness":"91%","CmColor-Success-LightActiveHover-Lightness":"86%","CmColor-Success-LightDefault":"transparent","CmColor-Success-LightHighlight":"#f7fdf7","CmColor-Success-LightHover":"#ebfaeb","CmColor-Success-LightActive":"#daf6da","CmColor-Success-LightActiveHover":"#c6f1c6","CmColor-Danger":0,"CmColor-Danger-DarkSaturation":"65%","CmColor-Danger-DarkLighten":"0%","CmColor-Danger-DarkDefault-Lightness":"52%","CmColor-Danger-DarkHover-Lightness":"45%","CmColor-Danger-DarkActive-Lightness":"35%","CmColor-Danger-DarkActiveHover-Lightness":"25%","CmColor-Danger-DarkDefault":"#d43535","CmColor-Danger-DarkHover":"#bd2828","CmColor-Danger-DarkActive":"#931f1f","CmColor-Danger-DarkActiveHover":"#691616","CmColor-Danger-MiddleSaturation":"65%","CmColor-Danger-MiddleLighten":"0%","CmColor-Danger-MiddleDefault-Lightness":"80%","CmColor-Danger-MiddleHover-Lightness":"75%","CmColor-Danger-MiddleActive-Lightness":"70%","CmColor-Danger-MiddleActiveHover-Lightness":"65%","CmColor-Danger-MiddleDefault":"#edabab","CmColor-Danger-MiddleHover":"#e99696","CmColor-Danger-MiddleActive":"#e48181","CmColor-Danger-MiddleActiveHover":"#e06c6c","CmColor-Danger-LightSaturation":"65%","CmColor-Danger-LightLighten":"0%","CmColor-Danger-LightHighlight-Lightness":"98%","CmColor-Danger-LightHover-Lightness":"95%","CmColor-Danger-LightActive-Lightness":"91%","CmColor-Danger-LightActiveHover-Lightness":"86%","CmColor-Danger-LightDefault":"transparent","CmColor-Danger-LightHighlight":"#fdf7f7","CmColor-Danger-LightHover":"#fbeaea","CmColor-Danger-LightActive":"#f7d9d9","CmColor-Danger-LightActiveHover":"#f3c4c4","CmColor-Warning":38,"CmColor-Warning-DarkSaturation":"75%","CmColor-Warning-DarkLighten":"0%","CmColor-Warning-DarkDefault-Lightness":"52%","CmColor-Warning-DarkHover-Lightness":"45%","CmColor-Warning-DarkActive-Lightness":"35%","CmColor-Warning-DarkActiveHover-Lightness":"25%","CmColor-Warning-DarkDefault":"#e09d29","CmColor-Warning-DarkHover":"#c98a1d","CmColor-Warning-DarkActive":"#9c6b16","CmColor-Warning-DarkActiveHover":"#704d10","CmColor-Warning-MiddleSaturation":"70%","CmColor-Warning-MiddleLighten":"0%","CmColor-Warning-MiddleDefault-Lightness":"80%","CmColor-Warning-MiddleHover-Lightness":"75%","CmColor-Warning-MiddleActive-Lightness":"70%","CmColor-Warning-MiddleActiveHover-Lightness":"65%","CmColor-Warning-MiddleDefault":"#f0d6a8","CmColor-Warning-MiddleHover":"#eccb93","CmColor-Warning-MiddleActive":"#e8c17d","CmColor-Warning-MiddleActiveHover":"#e4b667","CmColor-Warning-LightSaturation":"70%","CmColor-Warning-LightLighten":"0%","CmColor-Warning-LightHighlight-Lightness":"98%","CmColor-Warning-LightHover-Lightness":"95%","CmColor-Warning-LightActive-Lightness":"91%","CmColor-Warning-LightActiveHover-Lightness":"86%","CmColor-Warning-LightDefault":"transparent","CmColor-Warning-LightHighlight":"#fdfbf6","CmColor-Warning-LightHover":"#fbf5e9","CmColor-Warning-LightActive":"#f8ecd8","CmColor-Warning-LightActiveHover":"#f4e2c2","CmColor-Font":"#666666","CmColor-Font-Opposite":"#ffffff","CmColor-Font-Hint":"#999999","CmColor-Font-Disabled":"#999999","CmColor-Font-Placeholder":"#b7b7b7","CmColor-Font-Link":"#2985e0","CmColor-Font-LinkHover":"#1d73c9","CmColor-Font-LinkActive":"#16599c","CmColor-Background":"#ffffff","CmColor-Icon":"#666666","CmColor-Mark":"#fdf6ad","CmColor-Gallery":"#111111","CmColor-Border":"#cccccc","CmColor-BorderHover":"#a6a6a6","CmColor-BorderSelected":"#a6ccf2","CmColor-BorderActive":"#2985e0","CmColor-BorderDisabled":"#e8e8e8","CmFont-Base-LightWeight":300,"CmFont-Base-NormalWeight":400,"CmFont-Base-MediumWeight":500,"CmFont-Base-BoldWeight":600,"CmFont-Base-LineHeight":"18px","CmFont-Base-LineHeightSmall":"18px","CmFont-Base-Family":"\"Open+Sans\", arial, helvetica, sans-serif","CmFont-Base-Size":"14px","CmFont-Base-SizeSmall":"12px","CmFont-Base-Weight":400,"CmFont-Base-Color":"#666666","CmFont-Base-ColorOpposite":"#ffffff","CmFont-Base-Hint-Size":"12px","CmFont-Base-Hint-Color":"#999999","CmFont-Placeholder-Size":"inherit","CmFont-Placeholder-SizeSmall":"12px","CmFont-Placeholder-Style":"inherit","CmFont-Placeholder-Color":"#b7b7b7","CmFont-UI-LightWeight":300,"CmFont-UI-NormalWeight":400,"CmFont-UI-BoldWeight":600,"CmFont-UI-LineHeight":"18px","CmFont-UI-Size":"14px","CmFont-UI-SizeSmall":"12px","CmFont-UI-Family":"\"Open+Sans\", arial, helvetica, sans-serif","CmFont-UI-Weight":400,"CmFont-UI-Color":"#666666","CmFont-UI-ColorOpposite":"#ffffff","CmFont-UI-H1-LineHeight":"32px","CmFont-UI-H1-Size":"24px","CmFont-UI-H1-Weight":300,"CmFont-UI-H1-Color":"#666666","CmFont-UI-H4-LineHeight":"24px","CmFont-UI-H4-Size":"16px","CmFont-UI-H4-Weight":300,"CmFont-UI-H4-Color":"#666666","CmBorder-Radius":"3px","CmBorder-Width":"1px","CmBorder-Style":"solid","CmBorder-BoxWidth":"2px","CmBorder-TemporaryWidth":"2px","CmBorder-Default":["1px","solid","#cccccc"],"CmBorder-Separator":["1px","dotted","#cccccc"],"CmBorder-Editable":["1px","dashed","#2985e0"],"CmBorder-Box":["2px","solid","#cccccc"],"CmBorder-BoxHover":["2px","solid","#a6a6a6"],"CmBorder-BoxActive":["2px","solid","#2985e0"],"CmBorder-BoxSelected":["2px","solid","#a6ccf2"],"CmBorder-Temporary":["2px","dashed","#cccccc"],"CmBorder-TemporaryHover":["2px","dashed","#a6a6a6"],"CmBorder-TemporaryActive":["2px","dashed","#2985e0"],"CmBorder-TemporarySelected":["2px","dashed","#a6ccf2"],"CmButton-PaddingX":"12px","CmButton-OutlineWidth":"1px","CmButton-OutlineOffset":"1px","CmButton-Gap":"8px","CmInput-Padding":"6px","CmInput-BorderWidth":"1px","CmInput-BorderStyle":"solid","CmInput-DefaultBackground":"#ffffff","CmInput-DefaultBorder":"#cccccc","CmInput-HoverBackground":"#ffffff","CmInput-HoverBorder":"#a6a6a6","CmInput-ActiveBackground":"#ffffff","CmInput-ActiveBorder":"#2985e0","CmInput-DisabledBackground":"#fafafa","CmInput-DisableBorder":"#e8e8e8","CmInput-AccentColor":"#1966b3","CmTextarea-Height":"100px","CmSelect-Size":7,"CmScrollBar-Size":"8px","CmScrollBar-Radius":"3px","CmScrollBar-TrackBackground":"rgba(250, 250, 250, 0.5)","CmScrollBar-ThumbColor":"#dbdbdb","CmScrollBar-ThumbColorHover":"#cccccc","CmScrollBar-Light-ThumbColor":"#f6fafd","CmScrollBar-Light-ThumbColorHover":"#e9f2fb","CmForm-FieldHeight":"32px","CmForm-FieldIndent":"16px","CmForm-FieldTitleWidth":"156px","CmForm-FieldTitleWidthSpaceless":"128px","CmForm-FieldInnerIndent":"8px","CmForm-FieldSmallWidth":"210px","CmForm-Field-AdaptiveUp":"641px","CmForm-Field-AdaptiveDown":"640px","CmForm-HintGap":"4px","CmForm-ButtonsIndent":"12px","CmForm-IconsIndent":"8px","CmForm-ImageBox-ButtonWidth":"100px","CmForm-Cols-Names":["one","two","three","four","five","six","seven","eight","nine","ten"],"CmForm-Cols-Indent":"2%","CmForm-FilesList-Count":3,"CmForm-FieldPlaceholder-Scale":0.75,"CmCounter-Size":"16px","CmCounter-Border":"1px","CmCounter-Radius":"16px","PtBox-BorderWidth":"1px","PtBox-BorderColor":"#cccccc","PtBox-Padding":"4px","PtBoxItem-Sizes":[50,80,150],"PtBoxItem-DescrLines":1,"PtBoxContent-Indent":"48px","PtBoxContent-Indents":["0px","2px","4px","8px","12px","16px","24px","32px","48px","64px","96px"],"PtBoxCode-PaddingY":"8px","PtBoxCode-PaddingX":"12px","PtMenu-IndentY":"4px","PtMenu-IndentX":"0px","PtMenu-BorderWidth":"1px","PtMenu-BorderColor":"#cccccc","PtMenu-ItemIndentY":"2px","PtMenu-ItemIndentX":"12px","PtMenu-ItemGap":"8px","PtMenu-Item-Color":"#666666","PtMenu-Item-HoverColor":"#1d73c9","PtMenu-Item-ActiveColor":"#16599c","PtMenu-SeparatorIndentX":"12px","PtMenu-SeparatorSize":"1px","PtMenu-SeparatorColor":"#cccccc","PtMenu-Dropdown-IndentX":"0px","PtMenu-Dropdown-IndentY":"0px","PtLinks-Indent":"4px","PtLinks-Separator":"|","PtLinks-Separator-Color":"#666666","PtCheckLine-Gap":"0px","PtCheckLine-HasHover-Gap":"1px","PtImage-Background":"#fafafa","PtImage-Color":"#ffffff","PtImage-Padding":"8px","PtImage-TitlePaddingTop":"4px","PtImage-ButtonsIndent":"8px","PtImage-ToolsMargin":"4px","PtImage-ToolsGap":"8px","PtRange-Size":"24px","PtRange-Height":"200px","PtRange-Drag-Color":"#000000","PtList-PaddingY":"2px","PtList-PaddingX":"4px","PtList-Indent":"1px","PtList-ImageIndent":"8px","PtListingItems-Count":10,"PtListingItems-PaddingY":"2px","PtListingItems-PaddingX":"4px","PtListingItems-Indent":"1px","PtListingItems-GroupIndent":"12px","PtListingCounters-Indent":"4px","PtListingCounters-Height":"24px","PtColumns-Indent":"24px","PtColumns-Indents":["0px","2px","4px","8px","12px","16px","24px","32px","48px","64px","96px"],"PtColumns-AdaptiveFrom":"768px","PtGrid-Indent":"24px","PtGrid-Indents":["0px","2px","4px","8px","12px","16px","24px","32px","48px","64px","96px"],"PtGrid-AdaptiveFrom":"768px","PtSelectable-Hover-Background":"#fafafa","PtSelectable-Hover-Border":"#f2f2f2","PtSelectable-Active-Background":"#f6fafd","PtSelectable-Active-Border":"#d8e8f8","PtToolbar-GroupIndent":"16px","PtToolbar-ItemIndent":"4px","PtToolbar-ItemIndents":["0px","2px","4px","8px","12px","16px","24px","32px","48px","64px","96px"],"PtToolbar-XXXSmall":"32px","PtToolbar-XXSmall":"56px","PtToolbar-XSmall":"76px","PtToolbar-Small":"100px","PtToolbar-Medium":"150px","PtToolbar-Default":"200px","PtToolbar-Large":"250px","PtToolbar-XLarge":"350px","PtLineShare-Size":"32px","PtLineShare-Indent":"8px","PtGridlist-AdaptiveFrom":"768px","PtGridlist-FontSize":"14px","PtGridlist-Title-FontSize":"14px","PtGridlist-Title-DefaultBackground":"transparent","PtGridlist-Title-HoverBackground":"#e9f2fb","PtGridlist-Title-ActiveBackground":"#d8e8f8","PtGridlist-Cell-Padding":"6px","PtGridlist-Cell-SpaceSize":"1px","PtGridlist-Cell-SpaceBorder":["1px","solid","transparent"],"PtGridlist-Cell-FontSize":"14px","PtGridlist-Cell-LineHeight":"18px","PtGridlist-Cell-DefaultBackground":"transparent","PtGridlist-Cell-HoverBackground":"#e9f2fb","PtGridlist-Cell-ActiveBackground":"#d8e8f8","PtGridlist-Cell-ActiveHoverBackground":"#c2dbf4","PtGridlist-Cell-SuccessBackground":"#daf6da","PtGridlist-Cell-SuccessHoverBackground":"#c6f1c6","PtGridlist-Cell-WarningBackground":"#f8ecd8","PtGridlist-Cell-WarningHoverBackground":"#f4e2c2","PtGridlist-Cell-DangerBackground":"#f7d9d9","PtGridlist-Cell-DangerHoverBackground":"#f3c4c4","PtGridlist-Title-HasBackground-Default":"#fafafa","PtGridlist-Title-HasBackground-Hover":"#f2f2f2","PtGridlist-Cell-HasBackground-Default":"#fafafa","PtGridlist-Cell-HasBackground-Hover":"#f2f2f2","PtGridlist-Cell-HasBackground-Active":"#e8e8e8","PtDnD-Area-Padding":"16px","PtDnD-Area-BorderRadius":"3px","PtDnD-DropDuration":"400ms","PtDnD-MoveDuration":"200ms","PtDnD-Chassis-HighlightIndent":"24px","PtDnD-Area-ActiveBackground":"rgba(54, 140, 226, 0.12)","PtDnD-Area-ActiveBorder":["1px","dashed","#2985e0"],"PtDnD-Area-HighlightBackground":"rgba(54, 140, 226, 0.05)","PtDnD-Area-HighlightBorder":["1px","dashed","rgba(41, 133, 224, 0.3)"],"ComDashboard-Area-Padding":0,"ComDashboard-Widget-Indent":"24px","ComDashboard-Placeholder-Height":"48px","PtEditable-HoverBackground":"rgba(255, 255, 255, 0.5)","PtEditable-ActiveBackground":"rgba(255, 255, 255, 0.5)","PtEditable-Drag-DefaultBackground":"#fafafa","PtEditable-Drag-HoverBackground":"#f2f2f2","PtEditable-Drag-ActiveBackground":"#d8e8f8","PtDrag-Vertical-Width":"48px","PtDrag-Vertical-Height":"16px","PtDrag-Vertical-Icon-Width":"18px","PtDrag-Vertical-Icon-Height":"6px","PtDrag-Horizontal-Width":"16px","PtDrag-Horizontal-Height":"32px","PtDrag-Horizontal-Icon-Width":"6px","PtDrag-Horizontal-Icon-Height":"14px","PtDrag-DefaultBackground":"#fafafa","PtDrag-DefaultBorder":"#cccccc","PtDrag-HoverBackground":"#f2f2f2","PtDrag-HoverBorder":"#a6a6a6","PtDrag-ActiveBackground":"#d8e8f8","PtDrag-ActiveBorder":"#79b2ec","PtDrag-Line-Size":"2px","PtDrag-Line-DefaultBackground":"#e8e8e8","PtDrag-Line-HoverBackground":"#e8e8e8","PtDrag-Line-ActiveBackground":"#2985e0","PtRuler-Line-Size":"2px","PtRuler-Line-Indent":"12px","PtRuler-Line-DefaultBackground":"#e8e8e8","PtRuler-Line-HoverBackground":"#e8e8e8","PtRuler-Line-ActiveBackground":"#2985e0","PtOverlay-Default":"rgba(255, 255, 255, 0.7)","PtOverlay-Light":"rgba(255, 255, 255, 0.7)","PtOverlay-SolidLight":"#ffffff","PtOverlay-Dark":"rgba(0, 0, 0, 0.7)","PtOverlay-Duration":"500ms","PtOverlay-Spinner-Size":"32px","PtOverlay-Progress-Size":"4px","PtOverlay-ZIndex":1003,"LtCollapsible-SidebarWidth":"350px","LtCollapsible-Duration":"500ms","LtComment-InnerIndent":"4px","ComCalendar-CellHeight":"21px","ComCalendar-CellBorderRadius":"2px","ComCalendar-Outer-Background":"transparent","ComCalendar-Outer-BackgroundHover":"transparent","ComCalendar-Outer-BorderSize":0,"ComCalendar-Outer-Border":"transparent","ComCalendar-Outer-BorderHover":"transparent","ComCalendar-Inner-Background":"#fafafa","ComCalendar-Inner-BackgroundHover":"#f2f2f2","ComCalendar-Inner-BorderSize":"1px","ComCalendar-Inner-Border":"#e8e8e8","ComCalendar-Inner-BorderHover":"#dbdbdb","ComCalendar-Weekend-Background":"#e8e8e8","ComCalendar-Weekend-BackgroundHover":"#dbdbdb","ComCalendar-Weekend-BorderSize":"1px","ComCalendar-Weekend-Border":"#e8e8e8","ComCalendar-Weekend-BorderHover":"#dbdbdb","ComCalendar-Today-Background":"transparent","ComCalendar-Today-BackgroundHover":"#c2dbf4","ComCalendar-Today-BorderSize":"2px","ComCalendar-Today-Border":"#2985e0","ComCalendar-Today-BorderHover":"#1d73c9","ComCalendar-Active-Background":"#d8e8f8","ComCalendar-Active-BackgroundHover":"#c2dbf4","ComCalendar-Active-BorderSize":"1px","ComCalendar-Active-Border":"#2985e0","ComCalendar-Active-BorderHover":"#1d73c9","ComColumns-AdaptiveFrom":"768px","ComColumns-Indent":"24px","ComColumns-Indents":["0px","2px","4px","8px","12px","16px","24px","32px","48px","64px","96px"],"ComColumns-MinHeight":"64px","ComColumns-HoverBackground":"rgba(0, 0, 0, 0.01)","ComColumns-ActiveBackground":"rgba(0, 0, 0, 0.01)","ComColumns-Ruler-DefaultBackground":"rgba(250, 250, 250, 0.8)","ComColumns-Ruler-ActiveBackground":"rgba(246, 250, 253, 0.8)","ComSpacer-HoverBackground":"rgba(0, 0, 0, 0.01)","ComSpacer-ActiveBackground":"#f6fafd","ComBoxTools-Width":"210px","ComBoxTools-LineSize":"32px","ComBoxTools-LineIndent":"4px","ComBoxTools-LinkSize":"24px","ComBoxTools-LinkIndent":"4px","ComPositionTools-Item-Size":"24px","ComPositionTools-Item-Indent":"4px","ComPositionTools-Item-Large-Size":"32px","ComPositionTools-Item-Large-Indent":"4px","ComRepeatTools-Item-Size":"38px","ComRepeatTools-Item-Indent":"4px","ComScaleTools-Item-Size":"38px","ComScaleTools-Item-Indent":"4px","ComRange-Bar-Height":"8px","ComRange-Bar-Color":"#e8e8e8","ComRange-Range-Color":"#c2dbf4","ComDatepicker-Width":"210px","ComDatepicker-TooltipWidth":"210px","ComTimeSelect-Width":"210px","ComTimeSelect-Indent":"12px","ComColorPalette-Size":"200px","ComColorPalette-Drag-Size":"16px","ComColorPicker-Width":"210px","ComFileDropzone-Height":"128px","ComFileDropzone-Duration":"250ms","ComImageInput-Height":"128px","ComImageInput-CoverBackground":"rgba(0, 0, 0, 0.7)","ComImageInput-CoverDelay":"300ms","ComImageInput-ButtonsIndent":"4px","CmMultipleFileInput-Count":3,"ComDialog-Duration":"250ms","ComDialog-WindowDuration":"500ms","ComDialog-Indent":"24px","ComDialog-Radius":"3px","ComDialog-TitleIndent":"12px","ComDialog-IconSize":"24px","ComDialog-Overlay":"rgba(0, 0, 0, 0.7)","ComDialog-Default-Background":"#ffffff","ComDialog-Black-Background":"#111111","ComDialog-Black-TitleColor":"#ffffff","ComDialog-Light-Overlay":"rgba(255, 255, 255, 0.7)","ComDialog-Light-Background":"#ffffff","ComDialog-Light-TitleColor":"#ffffff","ComDialog-Light-TitleBackground":"#2985e0","ComDialog-Compact-Indent":"12px","ComDialog-Compact-TitleHeight":"32px","ComDialog-Compact-TitleIndent":"12px","ComDialog-Compact-IconSize":"32px","ComDialog-Box-Indent":"24px","ComTabset-AdaptiveFrom":"768px","ComTabset-BorderColor":"#cccccc","ComTabset-BorderRadius":"3px","ComTabset-BorderWidth":"1px","ComTabset-Border":["1px","solid","#cccccc"],"ComTabset-BorderOverlap":"#ffffff","ComTabset-BorderOverlapRadius":0,"ComTabset-Duration":"250ms","ComTabset-Column-Width":"256px","ComTabset-Content-Background":"#ffffff","ComTabset-Content-Padding":"24px","ComTabset-Tabs-Height":"32px","ComTabset-Tabs-Indent":"4px","ComTabset-Tabs-IndentInner":"12px","ComTabset-Tabs-IndentBetween":"-1px","ComTabset-Tabs-HorizontalIndent":"24px","ComTabset-Tabs-VerticalIndent":"24px","ComTabset-Tabs-FontSize":"14px","ComTabset-Tabs-DefaultBackground":"#e8e8e8","ComTabset-Tabs-HoverBackground":"#f2f2f2","ComTabset-Tabs-ActiveBackground":"#ffffff","ComTabset-TabsTitle-Background":"#fafafa","ComTabset-Tabs-ImageSize":"24px","ComTabset-Tabs-TitleIndent":"8px","ComPagination-Duration":"250ms","ComToggleBox-AdaptiveFrom":"768px","ComToggleBox-Size":"32px","ComToggleBox-SizeMedium":"24px","ComToggleBox-SizeUI":"24px","ComToggleBox-SizeBase":"24px","ComToggleBox-HasBackground-TitleIndentX":"8px","ComToggleBox-HasBackground-TitleIndentY":"0px","ComToggleBox-HasBackground-TitleIndent":["0px","8px"],"ComToggleBox-HasBackground-TitleBorderRadius":"3px","ComToggleBox-ContentBackgroundNormal":"#fafafa","ComToggleBox-ContentBackgroundHover":"#f2f2f2","ComToggleBox-ContentSpaceBorder":["1px","solid","transparent"],"ComToggleBox-Theme":"Light","ComToggleBox-HasBackground-TitleTheme":"Light","ComToggleBox-ThemeLight-TitleColorNormal":"#666666","ComToggleBox-ThemeLight-TitleColorHover":"#1d73c9","ComToggleBox-ThemeLight-TitleColorActive":"#666666","ComToggleBox-ThemeLight-TitleIcon":"../img/MagpieUI/icons/small/arrow-right.png","ComToggleBox-ThemeLight-TitleBackgroundNormal":"#e8e8e8","ComToggleBox-ThemeLight-TitleBackgroundHover":"#c2dbf4","ComToggleBox-ThemeLight-TitleBackgroundActive":"#e8e8e8","ComToggleBox-ThemeDark-TitleColorNormal":"#ffffff","ComToggleBox-ThemeDark-TitleColorHover":"#c2dbf4","ComToggleBox-ThemeDark-TitleColorActive":"#ffffff","ComToggleBox-ThemeDark-TitleIcon":"../img/MagpieUI/icons/small/arrow-white-right.png","ComToggleBox-ThemeDark-TitleBackgroundNormal":"#2985e0","ComToggleBox-ThemeDark-TitleBackgroundHover":"#1d73c9","ComToggleBox-ThemeDark-TitleBackgroundActive":"#2985e0","ComSelect-ListCount":7,"ComSelect-MultiListCount":5,"ComSelect-MultiListHeight":"23px","ComSelect-MaxHeight":"114px","ComAutocomplete-ListCount":7,"ComTagsInput-itemIndent":"12px","ComTagsInput-itemWidth":"250px","ComTagsInput-inputWidth":"200px","ComZoom-Background":"#111111","ComGallery-Background":"#111111","ComGalleryControls-Button-Size":"12px","ComGalleryLayout-ArrowWidth":"24px","ComGalleryLayout-SizesCount":12,"ComGalleryPreview-SidebarWidth":"400px","ComGalleryPreview-SidebarPadding":"24px","ComSlider-Duration":"500ms","CmScreen-Tablet":"1024px","CmScreen-TabletPortrait":"768px","CmScreen-Mobile":"640px","CmScreen-MobilePortrait":"480px","CmScreen-XSmall":"375px","CmMedia-Laptop-Up":"1400px","CmMedia-Laptop-Down":"1399px","CmMedia-Desktop-Up":"1024px","CmMedia-Desktop-Down":"1023px","CmMedia-Tablet-Up":"769px","CmMedia-Tablet-Down":"768px","CmMedia-Mobile-Up":"641px","CmMedia-Mobile-Down":"640px","CmMedia-Small-Up":"481px","CmMedia-Small-Down":"480px","CmMedia-XSmall-Up":"376px","CmMedia-XSmall-Down":"375px","AppPath-Images":"../img","AppPath-Fonts":"../fonts"};
if(cm._baseUrl.indexOf('serdidg.github.io') > -1){
    cm._baseUrl = [cm._baseUrl, '/MagpieUI/docs/build'].join('/');
}else{
    cm._baseUrl = [cm._baseUrl, 'docs/build'].join('/');
}
cm._assetsUrl = cm._baseUrl;
cm.define('Docs.DynamicForm', {
    'modules' : [
        'Params',
        'Events',
        'Langs',
        'DataConfig',
        'DataNodes',
        'Stack'
    ],
    'events' : [
        'onRender'
    ],
    'params' : {
        'node' : cm.Node('div'),
        'name' : '',
        'formName' : 'dynamic'
    }
},
function(params){
    var that = this;

    that.nodes = {
        'container' : cm.node('div'),
        'text' : cm.node('textarea'),
        'button' : cm.node('button')
    };
    that.components = {};

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataNodes(that.params['node']);
        that.getDataConfig(that.params['node']);
        render();
        that.addToStack(that.params['node']);
        that.triggerEvent('onRender');
    };

    var render = function(){
        new cm.Finder('Com.Form', that.params['formName'], that.nodes['container'], process);
    };

    var process = function(classObject){
        that.components['form'] = classObject;
        cm.addEvent(that.nodes['button'], 'click', executeAction);
    };

    var executeAction = function(){
        var value = "that.components['form']" + that.nodes['text'].value;
        try{
            eval(value);
        }catch(e){
            cm.log(e);
        }
    };

    /* ******* PUBLIC ******* */

    init();
});
cm.define('Docs.DynamicToolbar', {
    'modules' : [
        'Params',
        'Events',
        'Langs',
        'DataConfig',
        'DataNodes',
        'Stack'
    ],
    'events' : [
        'onRender'
    ],
    'params' : {
        'node' : cm.Node('div'),
        'name' : ''
    }
},
function(params){
    var that = this;

    that.nodes = {
        'container' : cm.node('div'),
        'text' : cm.node('textarea'),
        'button' : cm.node('button')
    };
    that.components = {};

    var init = function(){
        that.setParams(params);
        that.convertEvents(that.params['events']);
        that.getDataNodes(that.params['node']);
        that.getDataConfig(that.params['node']);
        that.addToStack(that.params['node']);
        render();
        that.triggerEvent('onRender');
    };

    var render = function(){
        new cm.Finder('Com.Toolbar', that.params['name'], that.nodes['container'], process);
    };

    var process = function(classObject){
        that.components['toolbar'] = classObject;
        cm.addEvent(that.nodes['button'], 'click', executeAction);
    };

    var executeAction = function(){
        var value = "that.components['toolbar']" + that.nodes['text'].value;
        try{
            eval(value);
        }catch(e){

        }
    };

    /* ******* PUBLIC ******* */

    init();
});
window.Collector = new Com.Collector({
        'autoInit' : true
    })
    .addEvent('onConstruct', function(collector, data){
        Part.Menu();
        Part.Autoresize(data['node']);
    });

cm.onReady(function(){
    window.Collector.construct();
});